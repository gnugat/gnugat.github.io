<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Lo√Øc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-09-24T09:09:06+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Lo√Øc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[eXtreme Legacy 3: End to End Tests]]></title>
            <link href="/2025/09/24/xl-3-end-to-end-tests.html"/>
            <updated>2025-09-24T00:00:00+01:00</updated>
            <id>/2025/09/24/xl-3-end-to-end-tests.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p>ü§ò The Beta Destroyer breaks free from the crypts of Manual Testing,
  forging unbreakable chains of End to End test scenarios,
  binding every component in the unholy covenant of automations! üî•</p>
</blockquote>

<p>In this series, we're dealing with BisouLand, an eXtreme Legacy application
(2005 LAMP spaghetti code base). So far, we have:</p>

<ol>
<li><a href="/2025/09/10/xl-1-dockerizing-2005-lamp-app.html">üêã got it to run in a local container</a></li>
<li><a href="/2025/09/17/xl-2-smoke-tests.html">üí® wrote Smoke Tests</a></li>
</ol>

<p>This means we can run it locally (http://localhost:8080/),
and have some level of automated tests.</p>

<p>But currently the tests are failing!</p>

<p>So, we'll inspect the issue, identify it,
write End to End tests which will be today's third article focus,
and finally we'll fix the bug.</p>

<p><img
    alt="The plan: we find the bug. We fix the bug. Now there are two bugs. Now there are three bugs"
    src="/images/xl-3-the-plan.jpg"
    width="100%" /></p>

<ul>
<li><a href="#identifying-the-issue">Identifying the issue</a></li>
<li><a href="#writing-the-test">Writing the test</a></li>
<li><a href="#test-data-cleanup">Test data cleanup</a></li>
<li><a href="#custom-assertion">Custom Assertion</a></li>
<li><a href="#fixing-the-bug">Fixing the bug</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="identifying-the-issue">Identifying the issue</h2>

<p>Let's run the tests to see the failure messages:</p>

<pre><code class="console">make test arg='--testdox --filter PlayerPages'
PHPUnit 12.3.2 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.12
Configuration: /apps/qa/phpunit.xml.dist

FFFFFFFFFFFF............                                          24 / 24 (100%)

Time: 00:00.081, Memory: 18.00 MB

Player Pages (Bl\Qa\Tests\Smoke\PlayerPages)
 ‚úò it loads account page (`/connected.html`) for logged in players
   ‚îê
   ‚îú Failed asserting that Page loads for logged in players
   ‚îÇ
   ‚îÇ /apps/qa/tests/Smoke/Assertion/Assert.php:41
   ‚îÇ /apps/qa/tests/Smoke/PlayerPagesTest.php:45
   ‚î¥
[...]
FAILURES!
Tests: 24, Assertions: 24, Failures: 12.
</code></pre>

<p>The player cannot log in... Let's try manually,
first we need to sign-up a new player:</p>

<p><img alt="BisouLand signup attempt screenshot" src="/images/xl-3-signup-attempt-screenshot.png" width="100%" /></p>

<p>It worked:</p>

<p><img alt="BisouLand signup errot screenshot" src="/images/xl-3-signup-success-screenshot.png" width="100%" /></p>

<p>Now let's log in:</p>

<p><img alt="BisouLand signup attempt screenshot" src="/images/xl-3-login-attempt-screenshot.png" width="100%" /></p>

<p>But it fails! The error says the username doesn't exist:</p>

<p><img alt="BisouLand signup errot screenshot" src="/images/xl-3-login-failure-screenshot.png" width="100%" /></p>

<p>Inspecting the database shows that the player data wasn't inserted.</p>

<p>The Smoke Tests didn't catch directly the login error,
because it's an error printed inside the HTML,
and our tests only check for status code <code>200</code>.</p>

<p>So this highlights the limits of Smoke Tests
(though we have to recognise that they did indirectly catch the issue,
with players being unable to login).</p>

<p>The code handling signing up is located in <code>./apps/monolith/web/phpincludes/inscription.php</code>,
and hold on to your socks because it looks like this:</p>

<pre><code class="php">&lt;?php
if (false == $_SESSION['logged']) {
    $send = 0;
    $pseudo = '';
    $mdp = '';
    if (isset($_POST['inscription'])) {
        // Mesure de securite.
        $pseudo = htmlentities(addslashes($_POST['Ipseudo']));
        $mdp = htmlentities(addslashes($_POST['Imdp']));
        $mdp2 = htmlentities(addslashes($_POST['Imdp2']));
        // Prevoir empecher de prendre un pseudo deje existant
        // Si les variables contenant le pseudo, le mot de passe existent et contiennent quelque chose.
        if (isset($_POST['Ipseudo'], $_POST['Imdp'], $_POST['Imdp2']) &amp;&amp; !empty($_POST['Ipseudo']) &amp;&amp; !empty($_POST['Imdp']) &amp;&amp; !empty($_POST['Imdp2'])) {
            if ($mdp == $mdp2) {
                // Si le pseudo est superieur e 3 caracteres et inferieur e 35 caracteres.
                $taille = strlen(trim($_POST['Ipseudo']));
                if ($taille &gt;= 4 &amp;&amp; $taille &lt;= 15) {
                    /* //Mesure de securite.
                    $pseudo = htmlentities(addslashes($_POST['pseudo']));
                    $mdp = htmlentities(addslashes($_POST['mdp']));*/

                    // La requete qui compte le nombre de pseudos
                    $sql = mysql_query("SELECT COUNT(*) AS nb_pseudo FROM membres WHERE pseudo='".$pseudo."'");

                    // Verifie si le pseudo n'est pas deje pris.
                    if (0 == mysql_result($sql, 0, 'nb_pseudo') &amp;&amp; 'BisouLand' != $pseudo) {
                        // Verifie que le pseudo est correct.
                        if (preg_match("!^\w+$!", $pseudo)) {
                            if (preg_match("!^\w+$!", $mdp)) {
                                // Si le mot de passe est superieur e 4 caracteres.
                                $taille = strlen(trim($_POST['Imdp']));
                                if ($taille &gt;= 5 &amp;&amp; $taille &lt;= 15) {
                                    // On execute la requete qui enregistre un nouveau membre.

                                    // Hashage du mot de passe avec md5().
                                    $hmdp = md5($mdp);

                                    mysql_query("INSERT INTO membres (id, pseudo, mdp, confirmation, lastconnect) VALUES ('', '".$pseudo."', '".$hmdp."', '1', ".time().')');

                                    echo 'Ton inscription est confirm√©e ! Tu peux maintenant te connecter.&lt;br /&gt;';
                                    $send = 1;
                                } else {
                                    echo 'Erreur : le mot de passe est soit trop court, soit trop long !';
                                }
                            } else {
                                echo 'Erreur : le mot de passe n\'est pas valide !';
                            }
                        } else {
                            echo 'Erreur : le pseudo n\'est pas valide !';
                        }
                    } else {
                        echo 'Erreur : pseudo deje pris !';
                    }
                } else {
                    echo 'Erreur : le pseudo est soit trop court, soit trop long !';
                }
            } else {
                echo 'Erreur : Tu n\'as pas rentre deux fois le meme mot de passe !';
            }
        } else {
            echo 'Erreur : Pense e remplir tous les champs !';
        }
    }
    if (0 == $send) {
        ?&gt;
&lt;form method="post" class="formul" action="inscription.html"&gt;
    &lt;label&gt;Pseudo :&lt;br /&gt;&lt;span class="petit"&gt;(Entre 4 et 15 caracteres)&lt;/span&gt;&lt;br /&gt;&lt;input type="text" name="Ipseudo" tabindex="10" size="15" maxlength="15" value="&lt;?php echo stripslashes($pseudo); ?&gt;"/&gt;&lt;/label&gt;&lt;br /&gt;
    &lt;label&gt;Mot de passe : &lt;br /&gt;&lt;span class="petit"&gt;(Entre 5 et 15 caracteres)&lt;/span&gt;&lt;br /&gt;&lt;input type="password" name="Imdp" tabindex="20" size="15" maxlength="15" value=""/&gt;&lt;/label&gt;&lt;br /&gt;
    &lt;label&gt;Reecris le mot de passe : &lt;br /&gt;&lt;input type="password" name="Imdp2" tabindex="30" size="15" maxlength="15" value=""/&gt;&lt;/label&gt;&lt;br /&gt;
    &lt;input type="submit" name="inscription" value="S'inscrire" /&gt;
&lt;/form&gt;
&lt;?php
    }
} else {
    echo 'Pfiou t\'es dja connected toi !!';
}
?&gt;
</code></pre>

<p>Now, that's eXtreme Legacy!!!</p>

<p>Let's focus on the problematic line,
which is supposed to save the player's data in the database
(I've reformatted it a bit for readability):</p>

<pre><code class="php">mysql_query(
    'INSERT INTO membres (id, pseudo, mdp, confirmation, timestamp, lastconnect, amour)'
    ." VALUES ('', '{$pseudo}', '{$hmdp}', '1', ".time().', '.time().", '300')"
);
</code></pre>

<p>There are many problems here (deprecated function, SQL injection vulnerability,
use of cryptologically broken md5 for password hashing etc),
but what jumps to my attention is the use of <code>''</code> for the ID value.</p>

<p>After some research it turns out this code worked fine in older MySQL versions,
because MySQL would silently convert the empty string to <code>0</code>,
and since the id field is an <code>AUTO_INCREMENT</code> integer,
MySQL would then treat that <code>0</code> as a signal to generate the next sequence value.</p>

<p>However MySQL 5.7 (which is the version we picked!), released in October 2015,
introduced a significant change: <code>STRICT_TRANS_TABLES</code> became enabled by default.
This means MySQL now rejects data type error like this one.</p>

<p>So to fix the issue we can change the MySQL version,
but the end goal is to upgrade the versions to the most recent, not to downgrade,
so let's instead just fix the code.</p>

<p>But first, we need to write a test: Test Driven Development, or no tests at all! ü§ò</p>

<h2 id="writing-the-test">Writing the test</h2>

<p>There are two kinds of tests that I hate: Smoke Tests, and End to End Tests.</p>

<p>End to End tests usually are about navigating the application, which is slow,
and checking for the content of the response, which is brittle.</p>

<p>However in this scenario, there are no alternative to test the features:
there are no HTTP framework, or handler / controller / services classes used
to allow us to write Functional / Integration / System tests.</p>

<p>To test our sign-up, all we can do is:</p>

<ul>
<li>issue a POST request to simulate the form being submitted</li>
<li>check in the database if the expected record has been persisted</li>
</ul>

<p>So let's just do that:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\EndToEnd;

use Bl\Qa\Tests\EndToEnd\Assertion\Assert;
use Bl\Qa\Tests\Infrastructure\Scenario\SignUpNewPlayer;
use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;
use PHPUnit\Framework\Attributes\CoversNothing;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Large;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;

#[CoversNothing]
#[Large]
final class SignUpTest extends TestCase
{
    public function test_it_allows_visitors_to_become_players(): void
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        $player = SignUpNewPlayer::run(
            'BisouTest',
            'password',
            'password',
        );

        Assert::signedUpCount($player-&gt;username, 1);
    }

    #[DataProvider('invalidCredentialsProvider')]
    #[TestDox('It prevents invalid credentials: $description')]
    public function test_it_prevents_invalid_credentials(string $username, string $password, string $description): void
    {
        SignUpNewPlayer::run(
            $username,
            $password,
            $password,
        );

        Assert::signedUpCount($username, 0);
    }

    /**
     * [string $username, string $password, string $description][].
     *
     * @return array&lt;array{string, string, string}&gt;
     */
    public static function invalidCredentialsProvider(): array
    {
        return [
            ['usr', 'password', 'username too short (&lt; 4 characters)'],
            ['test_sign_up02__', 'password', 'username too long (&gt; 15 characters)'],
            ['test_sign_up03!', 'password', 'username contains special characters (non alpha-numerical, not an underscore (`_`))'],
            ['test_sign_up05', 'pass', 'password too short (&lt; 5 characters)'],
            ['test_sign_up06', 'passwordthatistoolong', 'password too long (&gt; 15 characters)'],
            ['test_sign_up07', 'password!', 'password contains special characters (non alpha-numerical, not an underscore (`_`))'],
            ['BisouLand', 'password', 'system account, for notifications'],
        ];
    }

    #[TestDox('It prevents usernames that are already used')]
    public function test_it_prevents_usernames_that_are_already_used(): void
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        $username = 'BisouTest_';
        $password = 'password';
        $passwordConfirmation = $password;

        // First registration should succeed
        SignUpNewPlayer::run(
            $username,
            $password,
            $passwordConfirmation,
        );
        // Second registration should fail
        SignUpNewPlayer::run(
            $username,
            $password,
            $passwordConfirmation,
        );

        Assert::signedUpCount($username, 1);
    }

    public function test_it_prevents_passwords_that_do_not_match_confirmation(): void
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        $username = 'BisouTest';
        $password = 'password';
        $passwordConfirmation = 'different';

        SignUpNewPlayer::run(
            $username,
            $password,
            $passwordConfirmation
        );

        Assert::signedUpCount($username, 0);
    }
}
</code></pre>

<p>If I've read the long and nested if statements correctly,
this should cover all the different sign-up scenarios,
including username and password checking.</p>

<p>For now let's just run the "happy scenario" test to make sure it fails:</p>

<pre><code class="console">make test arg='--testdox --filter test_it_allows_visitors_to_become_players'
PHPUnit 12.3.2 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.12
Configuration: /apps/qa/phpunit.xml.dist

F                                                                   1 / 1 (100%)

Time: 00:00.032, Memory: 18.00 MB

Sign Up (Bl\Qa\Tests\EndToEnd\SignUp)
 ‚úò It allows visitors to become players
   ‚îê
   ‚îú Failed asserting that Signed Up Count 0 is 1
   ‚îÇ
   ‚îÇ /apps/qa/tests/EndToEnd/Assertion/Assert.php:114
   ‚îÇ /apps/qa/tests/EndToEnd/SignUpTest.php:30
   ‚î¥

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.
</code></pre>

<p>Brilliant! Before we fix it, I'll dive a bit more in the test details.</p>

<h2 id="test-data-cleanup">Test data cleanup</h2>

<p>I was surprised to find out that the username <code>BisouLand</code> was forbidden,
turns out it is used to send system notifications
(though I note that the checks are case sensitive only).</p>

<p>This is actually what inspired me to use <code>BisouTest</code> as a special test username,
if you remember correctly in the <code>SignUpNewPlayer</code> scenario,
which we've reused from the Smoke Tests as we would have done the exact same logic,
we have the following:</p>

<pre><code class="php">        if ('BisouTest' === $username) {
            $username = substr('BisouTest_'.uniqid(), 0, 15);
        }
</code></pre>

<p>This makes sure that there will be no username duplicates.</p>

<p>One thing I didn't mention in my previous article was that I've setup a way
to cleanup the test data with the <code>DeleteAllTestPlayers</code> scenario:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Scenario;

use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;

final readonly class DeleteAllTestPlayers
{
    public static function run(): void
    {
        $pdo = TestKernelSingleton::get()-&gt;pdo();

        $pdo-&gt;query("DELETE FROM membres WHERE pseudo LIKE 'BisouTest%'");
    }
}
</code></pre>

<p>This is called by a PHPUnit subscriber for the <code>TestRunner\Finished</code> event:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Subscriber;

use Bl\Qa\Tests\Infrastructure\Scenario\DeleteAllTestPlayers;
use PHPUnit\Event\TestRunner\Finished;
use PHPUnit\Event\TestRunner\FinishedSubscriber;

final readonly class TestCleanupSubscriber implements FinishedSubscriber
{
    public function notify(Finished $event): void
    {
        DeleteAllTestPlayers::run();
    }
}
</code></pre>

<p>This will be called once the testsuite is finished executing,
but only if we register the subscriber in a PHPUnit Extension:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Subscriber;

use PHPUnit\Runner\Extension\Extension;
use PHPUnit\Runner\Extension\Facade;
use PHPUnit\Runner\Extension\ParameterCollection;
use PHPUnit\TextUI\Configuration\Configuration;

final readonly class TestCleanupExtension implements Extension
{
    public function bootstrap(Configuration $configuration, Facade $facade, ParameterCollection $parameters): void
    {
        $facade-&gt;registerSubscriber(new TestCleanupSubscriber());
    }
}
</code></pre>

<p>The extension also has to be registered in the <code>phpunit.xml</code> config:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- https://phpunit.readthedocs.io/en/latest/configuration.html --&gt;
&lt;phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         cacheDirectory=".phpunit.cache"
         executionOrder="depends,defects"
         shortenArraysForExportThreshold="10"
         requireCoverageMetadata="true"
         beStrictAboutCoverageMetadata="true"
         beStrictAboutOutputDuringTests="true"
         displayDetailsOnPhpunitDeprecations="true"
         colors="true"
         failOnPhpunitDeprecation="true"
         failOnRisky="true"
         failOnWarning="true"&gt;
    &lt;php&gt;
        &lt;ini name="display_errors" value="1" /&gt;
        &lt;ini name="error_reporting" value="-1" /&gt;
        &lt;env name="APP_ENV" value="test" force="true" /&gt;
        &lt;env name="SHELL_VERBOSITY" value="-1" /&gt;
    &lt;/php&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="smoke"&gt;
            &lt;directory&gt;tests/Smoke&lt;/directory&gt;
        &lt;/testsuite&gt;
        &lt;testsuite name="end-to-end"&gt;
            &lt;directory&gt;tests/EndToEnd&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;

    &lt;extensions&gt;
        &lt;bootstrap class="Bl\Qa\Tests\Infrastructure\Subscriber\TestCleanupExtension"/&gt;
    &lt;/extensions&gt;

    &lt;source ignoreIndirectDeprecations="true" restrictNotices="true" restrictWarnings="true"&gt;
        &lt;include&gt;
            &lt;directory&gt;../monolith/web&lt;/directory&gt;
        &lt;/include&gt;
    &lt;/source&gt;
&lt;/phpunit&gt;
</code></pre>

<h2 id="custom-assertion">Custom Assertion</h2>

<p>I've created a <code>signedUpCount</code> custom assertion,
which will count in the database the number of records persisted for a given
username:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\EndToEnd\Assertion;

use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;
use PHPUnit\Framework\Assert as PHPUnitAssert;

final readonly class Assert
{
    public static function signedUpCount(string $username, int $expectedCount): void
    {
        $pdo = TestKernelSingleton::get()-&gt;pdo();

        $stmt = $pdo-&gt;prepare('SELECT COUNT(*) FROM membres WHERE pseudo = :username');
        $stmt-&gt;execute([
            'username' =&gt; $username,
        ]);
        $actualCount = (int) $stmt-&gt;fetchColumn();

        PHPUnitAssert::assertSame(
            $expectedCount,
            $actualCount,
            "Failed asserting that Signed Up Count {$actualCount} is {$expectedCount}",
        );
    }
}
</code></pre>

<p>I think there's an argument to have had made two assertions
(eg <code>signedUpSuccessful</code> count = 1, and <code>signedUpFailed</code> count = 0),
but for now I'm happy with this.</p>

<h2 id="fixing-the-bug">Fixing the bug</h2>

<p>We're going to fix that bug by removing the ID field from the query:</p>

<pre><code class="php">mysql_query(
    'INSERT INTO membres (pseudo, mdp, confirmation, timestamp, lastconnect, amour)'
    ." VALUES ('{$pseudo}', '{$hmdp}', '1', ".time().', '.time().", '300')"
);
</code></pre>

<p>Let's see if the bug is fixed by running the one test:</p>

<pre><code class="console">make test arg='--testdox --filter test_it_allows_visitors_to_become_players'
PHPUnit 12.3.2 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.12
Configuration: /apps/qa/phpunit.xml.dist

.                                                                   1 / 1 (100%)

Time: 00:00.018, Memory: 18.00 MB

Sign Up (Bl\Qa\Tests\EndToEnd\SignUp)
 ‚úî It allows visitors to become players

OK (1 test, 1 assertion)
</code></pre>

<p>So far so good, let's confirm by running all the tests:</p>

<pre><code class="console">make test
PHPUnit 12.3.2 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.12
Configuration: /apps/qa/phpunit.xml.dist

.................................................                 49 / 49 (100%)

Time: 00:00.162, Memory: 18.00 MB

OK (49 tests, 49 assertions)
</code></pre>

<p>Excellent! All fixed!</p>

<h2 id="conclusion">Conclusion</h2>

<p>I believe there will be many more instances of this,
and given the success of this fix we can assume it's safe to apply to all instances.</p>

<p>But I know these <code>mysql_query</code> calls will be removed very soon:</p>

<ul>
<li>they are deprecated</li>
<li>the query used is vulnerable to SQL Injection</li>
</ul>

<p>The End to End tests we've written also allow us to refactor the code,
instead of a nested list we can for example make use of early returns.</p>

<p>But if I have to refactor that code, I want to do it right,
by first writing unit tests which will make a design model emerge,
and by creating an API so we can also have integration tests.</p>

<p>Once we have these, both the Smoke Tests and End to End tests can be removed.</p>

<p>So I'm going to leave this as is for now.</p>

<blockquote>
  <p>‚ÅâÔ∏è <em>What do you mean, "the code is ugly"??</em></p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[eXtreme Legacy 2: Smoke Tests]]></title>
            <link href="/2025/09/17/xl-2-smoke-tests.html"/>
            <updated>2025-09-17T00:00:00+01:00</updated>
            <id>/2025/09/17/xl-2-smoke-tests.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p>ü§ò The Quality Avenger emerges from the burning forges of Coding Standards,
  smelting the ores of Static Analysis into the moulds of Automated Testing. üî•</p>
</blockquote>

<p>In this series, we're dealing with BisouLand, an eXtreme Legacy application
(2005 LAMP spaghetti code base). So far, we have:</p>

<ol>
<li><a href="/2025/09/10/xl-1-dockerizing-2005-lamp-app.html">üêã got it to run in a local container</a></li>
</ol>

<p>This means we can access it (http://localhost:8080/) and manually check it.
Unfortunately looking at the <a href="https://github.com/pyricau/bisouland/tree/4.0.1">code</a>,
it's obvious we cannot launch it to production as is:</p>

<ul>
<li>Encoding Issues</li>
<li>Broken Authentication and Session Management</li>
<li>Cross-Site Scripting (XSS) Flaws</li>
<li>Injection Flaws, including SQL injection</li>
<li>Improper Error Handling</li>
<li>Non Compliance with GDPR requirements</li>
</ul>

<p>But how do we know we're not breaking anything when fixing these?
As things currently stand, we don't even know what features BisouLand has.</p>

<p>So, we're going to need to write tests, which will be today's second article focus.</p>

<ul>
<li><a href="#qa-app">QA app</a></li>
<li><a href="#smoke-tests">Smoke Tests</a></li>
<li><a href="#custom-assertions">Custom Assurance</a></li>
<li><a href="#scenarios">Scenarios</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="qa-app">QA app</h2>

<p>The first plan of action is to move the current app into the <code>./apps/monolith</code>
sub-folder, and to create a new QA one in <code>./apps/qa</code>.</p>

<p>This approach will allow us to isolate the legacy code from any tooling we might
need to bring it up to standards.</p>

<p>The QA application has the following tree directory:</p>

<pre><code>apps/qa/
‚îú‚îÄ‚îÄ composer.json
‚îú‚îÄ‚îÄ composer.lock
‚îú‚îÄ‚îÄ compose.yaml
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ phpstan-baseline.neon
‚îú‚îÄ‚îÄ phpstan.neon.dist
‚îú‚îÄ‚îÄ phpunit.xml.dist
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ tests/
</code></pre>

<p>As you can see, it has its own <code>Dockerfile</code>:</p>

<pre><code># syntax=docker/dockerfile:1

###
# PHP Dev Container
# Utility Tools: PHP, bash, Composer
###
FROM php:8.4-cli-alpine AS php_dev_container

# Composer environment variables:
# * default user is superuser (root), so allow them
# * put cache directory in a readable/writable location
# _Note_: When running `composer` in container, use `--no-cache` option
ENV COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_CACHE_DIR=/tmp/.composer/cache

# Install dependencies:
# * bash for shell access and scripting
# * zip for composer packages that use ZIP archives
# _Note (Alpine)_: `--no-cache` includes `--update` and keeps image size minimal
#
# Then install PHP extensions
#
# _Note (Hadolint)_: No version locking, since Alpine only ever provides one version
# hadolint ignore=DL3018
RUN apk add --update --no-cache \
        bash \
        libzip-dev \
        zip \
    &amp;&amp; docker-php-ext-install \
        bcmath \
        pdo \
        pdo_mysql \
        zip

# Copy Composer binary from composer image
# _Note (Hadolint)_: False positive as `COPY` works with images too
# See: https://github.com/hadolint/hadolint/issues/197#issuecomment-1016595425
# hadolint ignore=DL3022
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /apps/qa

# Caching `composer install`, as long as composer.{json,lock} don't change.
COPY composer.json composer.lock ./
RUN composer install \
    --no-cache \
    --no-interaction \
    --no-plugins \
    --no-scripts \
    --optimize-autoloader

# Copy the remaining application files (excluding those listed in .dockerignore)
COPY . .
</code></pre>

<p>And <code>compose.yaml</code>:</p>

<pre><code class="yaml">name: skyswoon-qa

services:
  app:
    build: .
    command: php -S 0.0.0.0:8081
    volumes:
      # Mount current directory into container for QA tools and configs
      - .:/apps/qa
      # Mount the monolith source code for analysis
      - ../monolith:/apps/monolith
    networks:
      - default
      - skyswoon-monolith_default

networks:
  skyswoon-monolith_default:
    external: true
</code></pre>

<p>This allows us to have QA in its own container (with PHP 8.4),
but it can still communicate with the monolith container,
so we can issue curl requets or query the MySQL database.</p>

<p>It also allows access to the monolith source files,
so we can run toolings on them like phpstan, rector, PHP CS Fixer, etc.</p>

<h2 id="smoke-tests">Smoke Tests</h2>

<p>There are two kinds of tests that I hate
(this is coming from a Test Driven Development practitioner, btw!)
and one of them is Smoke Tests.</p>

<p>Those basically issue a curl request,
and only check the bare minimum such as the status code is <code>200</code>.</p>

<p>I don't like these because they are slow (remote requests),
unreliable (errors like form validation, page not found, etc will still return <code>200</code>),
and overall don't provide much value at all.</p>

<p>However in this specific case I still think Smoke Tests can help us,
notably to make a list of what pages the website has,
and also differentiate the ones that are public,
and the ones that should only be accessed by logged in players.</p>

<p>This will be valuable knowledge,
and once we have better test coverage <strong>we can get rid of those</strong>.</p>

<p>After manually navigating the website, checking the <code>pages.php</code> file,
and overall getting familiar with the app,
I've documented my findings in a data provider in the following Smoke Test,
which checks if all private pages are accessible to logged in players,
but not for logged out visitors:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Smoke;

use Bl\Qa\Tests\Infrastructure\Scenario\GetLoggedInPlayer;
use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;
use Bl\Qa\Tests\Smoke\Assertion\Assert;
use PHPUnit\Framework\Attributes\CoversNothing;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\Attributes\Large;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;

#[CoversNothing]
#[Large]
final class PlayerPagesTest extends TestCase
{
    #[TestDox('it blocks $pageName page (`$url`) for visitors')]
    #[DataProvider('playerPagesProvider')]
    public function test_it_blocks_player_page_for_visitors(string $url, string $pageName): void
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        $response = $httpClient-&gt;request('GET', $url);

        Assert::blocksPageForLoggedOutVisitors($response);
    }

    #[TestDox('it loads $pageName page (`$url`) for logged in players')]
    #[DataProvider('playerPagesProvider')]
    public function test_it_loads_player_page_for_logged_in_players(string $url, string $pageName): void
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        $loggedInPlayer = GetLoggedInPlayer::run();

        $response = $httpClient-&gt;request('GET', $url, [
            'headers' =&gt; [
                'Cookie' =&gt; $loggedInPlayer-&gt;sessionCookie,
            ],
        ]);

        Assert::loadsPageForLoggedInPlayers($response);
    }

    /**
     * @return array&lt;array{string, string}&gt;
     */
    public static function playerPagesProvider(): array
    {
        return [
            ['/connected.html', 'account'],
            ['/action.html', 'blow kisses'],
            ['/cerveau.html', 'brain'],
            ['/changepass.html', 'change password'],
            ['/nuage.html', 'clouds'],
            ['/yeux.html', 'eyes'],
            ['/boite.html', 'inbox'],
            ['/bisous.html', 'kisses'],
            ['/construction.html', 'organs'],
            ['/infos.html', 'reference'],
            ['/techno.html', 'techniques'],
            ['/lire.html', 'view message'],
        ];
    }
}
</code></pre>

<p>Running this test <em>should</em> output the following:</p>

<pre><code class="console">&gt; make test arg='--testdox --filter PlayerPages'
PHPUnit 12.3.2 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.11
Configuration: /apps/qa/phpunit.xml.dist

........................                                          24 / 24 (100%)

Time: 00:00.606, Memory: 18.00 MB

Player Pages (Bl\Qa\Tests\Smoke\PlayerPages)
 ‚úî it blocks organs page (`/construction.html`) for visitors
 ‚úî it blocks account page (`/connected.html`) for visitors
 ‚úî it blocks reference page (`/infos.html`) for visitors
 ‚úî it blocks kisses page (`/bisous.html`) for visitors
 ‚úî it blocks brain page (`/cerveau.html`) for visitors
 ‚úî it blocks change¬∑password page (`/changepass.html`) for visitors
 ‚úî it blocks eyes page (`/yeux.html`) for visitors
 ‚úî it blocks view¬∑message page (`/lire.html`) for visitors
 ‚úî it blocks clouds page (`/nuage.html`) for visitors
 ‚úî it blocks inbox page (`/boite.html`) for visitors
 ‚úî it blocks techniques page (`/techno.html`) for visitors
 ‚úî it blocks blow¬∑kisses page (`/action.html`) for visitors
 ‚úî it loads view¬∑message page (`/lire.html`) for logged in players
 ‚úî it loads eyes page (`/yeux.html`) for logged in players
 ‚úî it loads brain page (`/cerveau.html`) for logged in players
 ‚úî it loads change¬∑password page (`/changepass.html`) for logged in players
 ‚úî it loads techniques page (`/techno.html`) for logged in players
 ‚úî it loads account page (`/connected.html`) for logged in players
 ‚úî it loads reference page (`/infos.html`) for logged in players
 ‚úî it loads inbox page (`/boite.html`) for logged in players
 ‚úî it loads kisses page (`/bisous.html`) for logged in players
 ‚úî it loads organs page (`/construction.html`) for logged in players
 ‚úî it loads clouds page (`/nuage.html`) for logged in players
 ‚úî it loads blow¬∑kisses page (`/action.html`) for logged in players

OK (24 tests, 24 assertions)
</code></pre>

<blockquote>
  <p><em>üîó Check</em>: <a href="/2025/07/31/phpunit-best-practices.html">PHPUnit Best Practices</a></p>
</blockquote>

<p>The test is structured as follow:</p>

<ol>
<li>get an instance of HttpClient through TestKernelSingleton</li>
<li>optionally run some setup scenario such as <code>SignUpNewPlayer</code>, <code>LogInPlayer</code>, etc</li>
<li>send the remote request, and get the HTTP response</li>
<li>check that the HTTP Response satisfies our expectations</li>
</ol>

<h2 id="custom-assertions">Custom Assertions</h2>

<p>To be able to see if a page is blocked for a non logged in visitor,
we cannot just rely on the HTTP Status (it will always be 200),
so we have to instead check for error messages contained in the page.</p>

<p>Through my search, I've discovered that various messages get displayed when a
logged out visitor tries to access a private page,
I've documented this in the following custom assertion:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Smoke\Assertion;

use PHPUnit\Framework\Assert as PHPUnitAssert;
use Symfony\Contracts\HttpClient\ResponseInterface;

final readonly class Assert
{
    private const array NOT_LOGGED_IN_MESSAGES = [
        // Warning: side bar contains `Tu n'es pas connect&amp;eacute;.`
        'standard' =&gt; 'es pas connect√© !!',
        'variant 1 (inbox)' =&gt; 'es pas connect&amp;eacute; !!',
        'variant 2 (kisses, organs, techniques, account)' =&gt; 'Veuillez vous connecter.',
        'variant 3 (reference)' =&gt; 'Erreur... et vouaip !! :D',
    ];

    public static function blocksPageForLoggedOutVisitors(ResponseInterface $response): void
    {
        $content = (string) $response-&gt;getContent();

        foreach (self::NOT_LOGGED_IN_MESSAGES as $message) {
            if (str_contains($content, $message)) {
                PHPUnitAssert::assertSame(200, $response-&gt;getStatusCode(), $content);

                return;
            }
        }

        PHPUnitAssert::fail('Failed asserting that Page is blocked for logged out visitors');
    }

    public static function loadsPageForLoggedInPlayers(ResponseInterface $response): void
    {
        $content = (string) $response-&gt;getContent();

        foreach (self::NOT_LOGGED_IN_MESSAGES as $message) {
            if (str_contains($content, $message)) {
                PHPUnitAssert::fail('Failed asserting that Page loads for logged in players');
            }
        }

        PHPUnitAssert::assertSame(200, $response-&gt;getStatusCode(), $content);
    }
}
</code></pre>

<h2 id="scenarios">Scenarios</h2>

<p>For some of our tests, we need to have a visitor to first sign up as a player,
which I've done through the following "Scenario" class:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Scenario;

use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;

final readonly class SignUpNewPlayer
{
    public static function run(
        string $username = 'BisouTest',
        string $password = 'password',
        string $passwordConfirmation = 'password',
    ): Player {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        if ('BisouTest' === $username) {
            $username = substr('BisouTest_'.uniqid(), 0, 15);
        }

        $httpClient-&gt;request('POST', '/inscription.html', [
            'body' =&gt; [
                'Ipseudo' =&gt; $username,
                'Imdp' =&gt; $password,
                'Imdp2' =&gt; $passwordConfirmation,
                'inscription' =&gt; "S'inscrire",
            ],
            'headers' =&gt; [
                'Content-Type' =&gt; 'application/x-www-form-urlencoded',
            ],
        ]);

        return new Player($username, $password);
    }
}
</code></pre>

<p>Here we do an HTTP request that will simulate posting the HTML form,
alternatives for this would have been doing a SQL query to directly
create the player in the database, but we risk missing other insertions
that might be required.</p>

<p>The advantage of the current approach is that it also smoke tests the signup form.</p>

<p>We also need the player to be logged in:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Scenario;

use Bl\Qa\Tests\Infrastructure\TestKernelSingleton;
use Symfony\Component\HttpClient\Exception\RedirectionException;

final readonly class LogInPlayer
{
    public static function run(Player $player): string
    {
        $httpClient = TestKernelSingleton::get()-&gt;httpClient();

        try {
            $response = $httpClient-&gt;request('POST', '/redirect.php', [
                'body' =&gt; [
                    'pseudo' =&gt; $player-&gt;username,
                    'mdp' =&gt; $player-&gt;password,
                    'connexion' =&gt; 'Se connecter',
                ],
                'headers' =&gt; [
                    'Content-Type' =&gt; 'application/x-www-form-urlencoded',
                ],
                'max_redirects' =&gt; 0,
            ]);
        } catch (RedirectionException $e) { // @phpstan-ignore catch.neverThrown
            // With max_redirects=0, HttpClient throws an exception when we get a 302
            // This is expected on successful login
            $response = $e-&gt;getResponse();
        }

        $headers = $response-&gt;getHeaders(false);
        $cookies = $headers['set-cookie'] ?? $headers['Set-Cookie'] ?? [];
        foreach ($cookies as $cookie) {
            if (str_starts_with($cookie, 'PHPSESSID=')) {
                return $cookie;
            }
        }

        $content = $response-&gt;getContent(false);
        $allCookies = implode(', ', $cookies);

        throw new \RuntimeException("Login failed: PHPSESSID cookie not found. Cookies: [{$allCookies}], Content: {$content}");
    }
}
</code></pre>

<p>Similarly to the <code>SignUpNewPlayer</code> scenario,
<code>LogInPlayer</code> posts a HTTP request that simulates the log in form.</p>

<p>To be abe to then act as the logged in player, we need their Session Cookie string,
so we make sure to return it.</p>

<p>Finally the <code>GetLoggedInPlayer</code> scenario will sign up and login a player once,
and always return it to save us some overhead in the test suite:</p>

<pre><code class="php">&lt;?php

declare(strict_types=1);

namespace Bl\Qa\Tests\Infrastructure\Scenario;

final class GetLoggedInPlayer
{
    private static ?LoggedInPlayer $loggedInPlayer = null;

    public static function run(): LoggedInPlayer
    {
        if (null === self::$loggedInPlayer) {
            $player = SignUpNewPlayer::run();
            $sessionCookie = LogInPlayer::run($player);

            self::$loggedInPlayer = new LoggedInPlayer($player-&gt;username, $player-&gt;password, $sessionCookie);
        }

        return self::$loggedInPlayer;
    }
}
</code></pre>

<p>These scenarios will come in handy when we start writing other kinds of tests.</p>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>üíª <strong>Source code</strong>:</p>
  
  <ul>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.5">Before our changes</a></li>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.6">After Smoke Tests</a></li>
  </ul>
</blockquote>

<p>Now we can type:</p>

<pre><code class="console">make test arg='--testdox --filter PlayerPages'
</code></pre>

<p>And get the list of all public and private pages.</p>

<blockquote>
  <p>‚ÅâÔ∏è <em>What do you mean, "tests are failing"??</em></p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[eXtreme Legacy 1: Dockerizing a 2005 LAMP app]]></title>
            <link href="/2025/09/10/xl-1-dockerizing-2005-lamp-app.html"/>
            <updated>2025-09-10T00:00:00+01:00</updated>
            <id>/2025/09/10/xl-1-dockerizing-2005-lamp-app.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p>ü§ò From the abyssal depths of forgotten servers,
  Docker the Void-Walker awakens to drag ancient LAMP stack from their tombs,
  wrapping them in the obsidian chains of containerization! üî•</p>
</blockquote>

<p>Back in 2005, I learned how to write Linux/Apache/MySQL/PHP websites thanks
to the Site du Zero (SdZ), which is now known as <a href="https://openclassrooms.com/en/">Open Classrooms</a>.</p>

<p>I also used to play a web-browser game, similar to <a href="https://fr.wikipedia.org/wiki/OGame">OGame</a>,
called BisouLand (SkySwoon). Turns out its creator also built it through SdZ tutorials!</p>

<p>Fast forward 20 years later (today),
I received a message on LinkedIn from a CTO asking me the following:</p>

<blockquote>
  <p>üí¨ "Are you willing to work with <strong>eXtreme Legacy</strong> code on occasion?"</p>
</blockquote>

<p>I wondered to myself: what is eXtreme Legacy code? And I immediately remembered BisouLand.</p>

<p>You see, back in 2011,
its creator had made it Open Source on github and made me code collaborator...</p>

<p>So I <em>do</em> have access to a 2005 LAMP stack website,
cobbled together by someone learning stuff on the go from the internet.</p>

<p>What would it take, in 2025, to get an eXtreme Legacy app up and running?</p>

<p>This is what we're going to find out in this series.</p>

<p>Today's first article is about getting it to run, at least locally.</p>

<ul>
<li><a href="#the-project">The Project</a></li>
<li><a href="#containerization">Containerisation</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="the-project">The Project</h2>

<p>The <a href="https://github.com/pyricau/bisouland/tree/v1">version 1</a> has the following tree directory:</p>

<pre><code>web/
‚îú‚îÄ‚îÄ .htaccess
‚îú‚îÄ‚îÄ checkConnect.php
‚îú‚îÄ‚îÄ deconnexion.php
‚îú‚îÄ‚îÄ favicon.ico
‚îú‚îÄ‚îÄ images/
‚îú‚îÄ‚îÄ includes/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bisouStyle2.css
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ compteur.js
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ newbisouStyle2.css
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ prev.js
‚îú‚îÄ‚îÄ index.php
‚îú‚îÄ‚îÄ phpincludes/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ accueil.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ action.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ aide.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ attaque.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bd.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ bisous.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ confirmation.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ connected.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ connexion.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ erreur404.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ evo.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ fctIndex.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ nuage.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ...
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ pages.php
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ yeux.php
‚îî‚îÄ‚îÄ redirect.php
</code></pre>

<p>The <code>.htaccess</code> file contains URL rewrite rules for Apache:</p>

<pre><code>RewriteEngine on
RewriteRule (.+)\.confirmation\.html$ /index.php?page=confirmation&amp;id=$1
RewriteRule (.+)\.bisous\.html$ /index.php?page=bisous&amp;cancel=$1
RewriteRule (.+)\.(.+)\.nuage\.html$ /index.php?page=nuage&amp;saut=1&amp;sautnuage=$1&amp;sautposition=$2
RewriteRule (.+)\.nuage\.html$ /index.php?page=nuage&amp;nuage=$1
RewriteRule (.+)\.(.+)\.action\.html$ /index.php?page=action&amp;nuage=$1&amp;position=$2
RewriteRule (.+)\.(.+)\.yeux\.html$ /index.php?page=yeux&amp;Dnuage=$1&amp;Dpos=$2
RewriteRule (.+)\.html$ /index.php?page=$1
ErrorDocument 404 /erreur404.html
</code></pre>

<p>There are no Database schema, but a quick scan at the files will reveal the use
of MySQL, for example <code>web/phpincludes/bd.php</code>:</p>

<pre><code class="php">&lt;?php

function bd_connect() {
        mysql_pconnect("HOST", "USER", "PASSWORD");
        mysql_select_db("DATABASE");
}
</code></pre>

<p>As for the code architecture, the file <code>web/index.php</code> acts as a
front controller that displays the layout of the website, and then includes
a file from <code>web/phpincludes/</code> for the actual page content.</p>

<p>The HTML is mixed with the MySQL queries, session managemenet, game logic
and any other PHP code. Code and comments are written in French, and there are
several encoding issues.</p>

<p>Here's an extract from <code>web/index.php</code>:</p>

<pre><code class="php">&lt;?php

header('Content-type: text/html; charset=ISO-8859-1'); 

session_start();
ob_start();
include 'phpincludes/bd.php';
bd_connect();
include('phpincludes/fctIndex.php');

//Si la variable $_SESSION['logged'] n'existe pas, on la cr√©√©e, et on l'initialise a false
if (!isset($_SESSION['logged'])) $_SESSION['logged'] = false;

//Si on est pas connect√©.
if ($_SESSION['logged'] == false)
{
  $id=0;
  //On r√©cup√®re les cookies enregistr√©s chez l'utilisateurs, s'ils sont la.
  if (isset($_COOKIE['pseudo']) &amp;&amp; isset($_COOKIE['mdp']))
  {
    $pseudo = htmlentities(addslashes($_COOKIE['pseudo']));
    $mdp = htmlentities(addslashes($_COOKIE['mdp']));
    //La requ√™te qui compte le nombre de pseudos
    $sql = mysql_query("SELECT COUNT(*) AS nb_pseudo FROM membres WHERE pseudo='".$pseudo."'");
    if (mysql_result($sql,0,'nb_pseudo') != 0)
    {
      //S√©lection des informations.
      $sql_info = mysql_query("SELECT id, confirmation, mdp, nuage FROM membres WHERE pseudo='".$pseudo."'");
      $donnees_info = mysql_fetch_assoc($sql_info);
      //Si le mot de passe est le m√™me (le mot de passe est d√©j√† crypt√©).
      if ($donnees_info['mdp'] == $mdp)
      {
        //Si le compte est confirm√©.
        if ($donnees_info['confirmation'] == 1)
        {
          //On modifie la variable qui nous indique que le membre est connect√©.
          $_SESSION['logged'] = true;
          $page='cerveau';
        }
      }
    }
  }
}

if ($_SESSION['logged'] == true)
{
  //l'id du membre.
  $id=$_SESSION['id'];

  //Fonction destin√©e √† l'administration
  if (isset($_POST['UnAct']) &amp;&amp; $id==12)
  {
    actionAdmin();
  }

  $sql_info = mysql_query(
    "SELECT timestamp, coeur, bouche, amour, jambes, smack, baiser, pelle, tech1, tech2, tech3, tech4, dent, langue, bloque, soupe, oeil"
    ." FROM membres WHERE id='".$id."'"
  );
  $donnees_info = mysql_fetch_assoc($sql_info);
  //On r√©cup√®re le nombre de points d'amour.
  $amour = $donnees_info['amour'];
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /&gt; 
  &lt;link rel="stylesheet" media="screen" type="text/css" title="bisouStyle2" href="includes/bisouStyle2.css" /&gt; 
  &lt;link rel="shorcut icon" href="http://bisouland.piwai.info/favicon.ico"/&gt;
  &lt;meta http-equiv="Content-Language" content="fr" /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="speedbarre"&gt;
  &lt;?php if ($_SESSION['logged'] == true)
    {?&gt;
      &lt;?php echo formaterNombre(floor($amour)); ?&gt;
    &lt;?php
    }
    else
    {
    ?&gt;
    &lt;a href="connexion.html"&gt;Connexion&lt;/a&gt;
    &lt;?php } ?&gt;
  &lt;/div&gt;

  &lt;div id="corps"&gt;
    &lt;?php
    include('phpincludes/pages.php');
    if (isset($array_pages[$page]))
    {
      include('phpincludes/'.$array_pages[$page]);
    }
    else
    {
      include('phpincludes/erreur404.php');
    }
    ?&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>üòµ</p>

<p>In addition to the spaghetti code, we can immediately spot security issues.
But we cannot fix anything until we can manually test the website,
so how do we get it to run?</p>

<h2 id="containerisation">Containerisation</h2>

<p>Back in 2005, the most common versions of the LAMP stack were:</p>

<ul>
<li>Apache: 2</li>
<li>MySQL: MySQL 4.0 - 5.0</li>
<li>PHP 4.3 - 5.1</li>
</ul>

<p>Applications written for MySQL 4.0 and PHP 4.3 can be run up to MySQL 5.7
and PHP 5.6. Some deprecation notices would be issued, but in terms of backward
compatibility that's how far we can stretch things.</p>

<p>So let's create a <code>Dockerfile</code> that will have Apache 2, PHP 5.6 and MySQL 5.7:</p>

<pre><code># syntax=docker/dockerfile:1

FROM php:5.6-apache

# Update sources.list to use archive repositories for Debian Stretch
RUN sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list \
    &amp;&amp; sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list \
    &amp;&amp; sed -i '/stretch-updates/d' /etc/apt/sources.list

# Install system dependencies and PHP extensions in single layer
RUN docker-php-ext-install mysql \
    &amp;&amp; a2enmod rewrite

# Set working directory
WORKDIR /var/www/html

# Copy application files with proper ownership
COPY --chown=www-data:www-data web/ /var/www/html/
</code></pre>

<p>With the following <code>compose.yaml</code>, we'll set up the Apache and MySQL servers:</p>

<pre><code class="yaml">name: skyswoon-monolith

services:
  web:
    build: .
    ports:
      - "8080:80"
    volumes:
      - ./web:/var/www/html
    depends_on:
      - db
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    restart: unless-stopped

  db:
    image: mysql:5.7
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "127.0.0.1:3306:3306"
    restart: unless-stopped

volumes:
  mysql_data:
</code></pre>

<p>You might notice that I've mentioned some environment variables,
to configure the database. These will need to be set in a <code>.env</code> file:</p>

<pre><code># Database
DATABASE_HOST=db
DATABASE_USER=database_user
DATABASE_PASSWORD=database_password
DATABASE_NAME=database_name
# MySQL root password (for Docker)
MYSQL_ROOT_PASSWORD=mysql_root_password
</code></pre>

<p>When the <code>docker compose up</code> is run,
Docker Composer automatically reads from <code>.env</code> and sets the environment variable,
then PHP will copy these into the <code>$_ENV</code> array super global,
so we can get the values like so in <code>web/phpincludes/bd.php</code>:</p>

<pre><code class="php">&lt;?php

function bd_connect()
{
    mysql_pconnect(
        $_ENV['DATABASE_HOST'],
        $_ENV['DATABASE_USER'],
        $_ENV['DATABASE_PASSWORD'],
    );
    mysql_select_db($_ENV['DATABASE_NAME']);
}
</code></pre>

<p>Last but not least, I'm adding a <code>Makefile</code>, to avoid having to type long
<code>docker compose build; docker compose up</code> commands: <a href="https://github.com/pyricau/bisouland/blob/b31597c47a49e0dd2b87fbd55bd608530f81efec/Makefile">see file in github</a>.</p>

<blockquote>
  <p><strong>Super Secret Tip</strong>:
  I've written about <a href="/2025/08/06/my-symfony-dockerfile.html">My Symfony Dockerfile</a>,
  and <a href="/2025/08/06/my-symfony-makefile.html">My Symfony Makefile</a>.</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>üíª <strong>Source code</strong>:</p>
  
  <ul>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.0">Before our changes</a></li>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.5">After containerisation</a></li>
  </ul>
</blockquote>

<p><img alt="BisouLand screenshot" src="/images/xl-1-bisouland-screenshot.png" width="100%" /></p>

<p>And we did it! now by typing:</p>

<pre><code class="console">make build; make up
</code></pre>

<p>We get BisouLand running live, 20 years after its conception.</p>

<p>You can visit it there: http://localhost:8080/accueil.html.</p>

<blockquote>
  <p>‚ÅâÔ∏è <em>What do you mean, "it doesn't work"?? It works on my machine!</em></p>
</blockquote>
]]></content>
        </entry>
    </feed>