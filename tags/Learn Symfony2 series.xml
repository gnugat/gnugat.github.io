<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-07-31T09:29:11+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Learn Symfony2 - part 1: Composer]]></title>
            <link href="/2014/06/18/learn-sf2-composer-part-1.html"/>
            <updated>2014-06-18T00:00:00+01:00</updated>
            <id>/2014/06/18/learn-sf2-composer-part-1.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>Deprecated</strong>: This series has been re-written - see
  <a href="/2016/02/03/ultimate-symfony-http-kernel.html">The Ultimate Developer Guide to Symfony</a></p>
</blockquote>

<p>You don't know anything about the <a href="http://symfony.com/">Symfony2</a> framework,
and you'd like a quick guide to learn how to use it, and how it works?</p>

<p>Then this article is for you :) .</p>

<p>Don't get me wrong: one day or another you'll have to read the
<a href="http://symfony.com/doc/current/index.html">documentation</a>, and you'll have to
practice a lot in order to master it. But for now this guide should be a good
start for you.</p>

<p>In the first article of this series, you'll learn about
<a href="https://getcomposer.org/">Composer</a>, which helps you with third party library
installation and updates.</p>

<h2 id="creating-the-project">Creating the project</h2>

<p>In order to understand how Symfony2 works, we won't use the
<a href="http://symfony.com/distributions">Symfony Standard Edition</a>, but rather start
from scratch with the bare minimum.</p>

<p>Let's create our project:</p>

<pre><code>mkdir knight
cd knight
git init
</code></pre>

<h2 id="getting-composer">Getting Composer</h2>

<p>When developing a project the last thing you want is to waste your time
re-inventing the wheel, so you install third party libraries. Those libraries
have their own life cycle: they might release some bug fixes and new features
after you installed them, so you'll need to update them sometimes.</p>

<p><a href="https://getcomposer.org/">Composer</a> makes these things so easy you'll never
have to worry again about versions. First download it:</p>

<pre><code>curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
</code></pre>

<p>And we're done! If only every project were so easy to install... :)</p>

<h2 id="installing-and-updating-symfony2">Installing and updating Symfony2</h2>

<p>Actually, Symfony2 is only a name regrouping many libraries which can be used
individually (you can even use them in other frameworks, CMS or projects like
<a href="http://symfony.com/projects/drupal">Drupal</a>,
<a href="http://symfony.com/projects/phpbb">phpBB</a>,
<a href="http://symfony.com/projects/laravel">Laravel</a>,
<a href="http://symfony.com/projects/ezpublish">eZ Publish</a>,
<a href="http://symfony.com/projects/orocrm">OroCRM</a> and
<a href="http://symfony.com/projects/piwik">Piwik</a> did).</p>

<p><em>Note</em>: Symfony2 libraries are called <code>components</code>.</p>

<p>Composer was made to install libraries, so let's use it:</p>

<pre><code>composer require 'symfony/symfony:~2.5' # install every single libraries in sf2
</code></pre>

<p>This command will do the following steps:</p>

<ol>
<li>create a <code>composer.json</code> configuration file if it doesn't already exist</li>
<li>add <code>symfony/symfony: ~2.5</code> in it (useful for further <code>composer install</code>)</li>
<li>actually download symfony inside the <code>vendor/symfony/symfony</code> directory</li>
<li>create a <code>composer.lock</code> file</li>
</ol>

<p>Later on, to update those dependencies you'll just have to run
<code>composer update</code>.</p>

<p><em>Note</em>: a library on which you depend upon is called a <code>dependency</code>.</p>

<p>This will look in the <code>composer.lock</code> file to know which version has been
installed (e.g. 2.5.0) and then checks if there's any new version available.
For more information about how Composer handles versions, see
<a href="https://igor.io/2013/01/07/composer-versioning.html">Igor's article</a>.</p>

<p>This means that you can totally ignore the <code>vendor</code> directory:</p>

<pre><code>echo '/vendor/*' &gt;&gt; .gitignore
</code></pre>

<p>If your team wants to install your project, they'll just have to clone your
repository and then run <code>composer install</code> which runs into the following steps:</p>

<ol>
<li>read the <code>composer.json</code> file to see the list of dependencies</li>
<li>read the <code>composer.lock</code> file to check the version installed by the commiter</li>
<li>download the dependencies with the version specified in the lock (even if new
ones are available)</li>
</ol>

<p>If a dependency is listed in <code>composer.json</code> but not in <code>composer.lock</code>,
Composer will download the last matching version and add it to the lock.</p>

<p>This means that everyone will have the same version installed! If you allow only
one person to run <code>composer update</code> you can guarantee this.</p>

<h2 id="autloading">Autloading</h2>

<p>Because Composer knows where each classes of the installed libraries are, it
provides a nice feature:
<a href="http://www.php.net/manual/en/language.oop5.autoload.php">autoloading</a>.</p>

<p>Simply put, each time a class is called, Composer will automatically include the
file where it's declared.</p>

<p>Your own code too can benefit from it. We just need to edit the <code>composer.json</code>
file:</p>

<pre><code>{
    "require": {
        "symfony/symfony": "~2.5"
    },
    "autoload": {
        "psr-4": {
            "": "src/"
        }
    }
}
</code></pre>

<p>And run the following command to take the changes into account:</p>

<pre><code>composer update
</code></pre>

<p>This tells Composer that we're going to follow the
<a href="http://www.php-fig.org/psr/psr-4/">PSR-4</a> standard and that we're going to put
our sources in the <code>src</code> directory.</p>

<p><em>Note</em>: PSR 4 requires you to:</p>

<ul>
<li>create one class per file</li>
<li>give the same name to your file and your class</li>
<li>use the path of the class for the namespace</li>
</ul>

<p>For example: the file <code>src/Knight/ApplicationBundle/KnightApplicationBundle.php</code>
contains a class named <code>KnightApplicationBundle</code> located in the namespace
<code>Knight\ApplicationBundle</code>.</p>

<p>Don't worry too much about it for now.</p>

<h2 id="conclusion">Conclusion</h2>

<p>And that's everything you need to know about Composer for now. Let's commit our
work:</p>

<pre><code>git add -A
git commit -m 'Installed Symfony2'
</code></pre>

<p>I hope this could help you, stay tuned for the next articles!</p>
]]></content>
        </entry>
    </feed>