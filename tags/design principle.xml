<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-10-01T13:55:52+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Command/Query Responsibility Segregation]]></title>
            <link href="/2015/08/25/cqrs.html"/>
            <updated>2015-08-25T00:00:00+01:00</updated>
            <id>/2015/08/25/cqrs.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>TL;DR</strong>: CQRS is about not mixing "read" and "write" logic. You can use patterns
  like a Repostiory / Search Engine and Command Bus to help you achieve this.</p>
</blockquote>

<p>The <a href="https://en.wikipedia.org/wiki/Single_responsibility_principle">Single Responsibility Principle</a>
(SRP) has many applications: we can find it in the <a href="https://en.wikipedia.org/wiki/Unix_philosophy">Unix philosophy</a>
("do one thing and do it well") and usually refactoring is all about identifying
responsibilities and extracting them in their own classes.</p>

<p><a href="http://martinfowler.com/bliki/CQRS.html">Command/Query Responsibility Segregation</a>
(CQRS) can be viewed as a part of it.</p>

<p>In this article, we'll explore the pros and cons of CQRS and we'll see some ways
to implement it.</p>

<h2 id="messages">Messages</h2>

<p>We usually communicate with our application by giving it an input which can be
viewed as a "message". Messages can be classified in 3 different types:</p>

<ul>
<li>Imperative: we want the application to do something (e.g. register a new member)</li>
<li>Interrogatory: we want to know the state of the application (e.g. the list of registered members)</li>
<li>Informative: we notify the application of an event (e.g. a member visited a page)</li>
</ul>

<blockquote>
  <p><strong>Note</strong>: For more information, have a look at <a href="http://verraes.net/2015/01/messaging-flavours/">Messaging Flavours</a>
  by <a href="https://twitter.com/mathiasverraes">Mathias Verraes</a>.</p>
</blockquote>

<p>The CQRS principle states that Imperative messages should not be mixed with
Interrogatory ones.</p>

<blockquote>
  <p><strong>Note</strong>: Here's an interresting article about
  <a href="http://verraes.net/2015/02/form-command-model-validation/">validating those messages</a>.</p>
</blockquote>

<h2 id="asynchronous-use-case">Asynchronous use case</h2>

<p>Let's take the <a href="https://en.wikipedia.org/wiki/A/B_testing">A/B testing</a> example:
we'd like to know which setting will attract more visits on a given page.
To do so when a user visits the page, we send a request to an API with some helpful information.</p>

<p>On receiving the request, the API can simply push a message to a Messaging Queue
(e.g. RabbitMQ). This request was an Informative message.</p>

<blockquote>
  <p><strong>Note</strong>: To learn more about RabbitMQ, have a look at <a href="https://www.sensiolabsblog.co.uk/blog/improve-the-performance-of-your-symfony-application-using-rabbitmq">this article</a>
  and <a href="http://www.slideshare.net/cakper/2014-0821-symfony-uk-meetup-scaling-symfony2-apps-with-rabbit-mq">those slides</a>.</p>
</blockquote>

<p>Eventually, the Messaging Queue will call a consumer and give it the message: now
the consumer must register the information somewhere. This message is an Imperative one.</p>

<p>Later on, we can display the statistic on a dashboard. This time, we're dealing
with an interrogatory message.</p>

<p>As we can see, the CQRS principle is applied here. It is really useful whith
asynchronous use cases.</p>

<h2 id="synchonous-use-case">Synchonous use case</h2>

<p>Another example would be member registration: a new member submits a registration
form. If it is valid, they're told to check their email: a confirmation token has
been sent to them.</p>

<p>Behind the scene, our application receives the request: it is an Imperative
message so we create a token and save the information somewhere. Once done the
application can send a "Member registered" event, which will trigger a listener
that will send the email.</p>

<blockquote>
  <p><strong>Note</strong>: the registration logic can be decoupled from the email logic: we can
  first have a service that registers members and when done sends a "Member registered"
  event. Then a listener could call our email service.</p>
</blockquote>

<p>Once again, we've applied the CQRS principle, but in a synchronous use case. If
later on our application gets successful, we'll might want to make those process
asynchronous and it will be easy to do so.</p>

<h2 id="imperative-messages-expecting-return-value">Imperative messages expecting return value</h2>

<p>Our final example will be about an API that allows scientists to report a new species.
They need to send a POST Request to the endpoint, which in turn will return a response
containing the created resource.</p>

<p>The issue here is that we're going to mix an Imperative message (report a new species)
and an Interrogatory message (get the newly reported species).</p>

<p>CQRS cannot be applied "fully" everywhere, but we can try the following compromises:</p>

<ul>
<li>our entry point can first handle the imperative message, and then handle the interrogatory one</li>
<li>our imperative message handler can return directly the result without extra "read" queries</li>
</ul>

<blockquote>
  <p><strong>Note</strong>: for the second solution, we need to create our own UUID, instead of
  relying on the database to generate the IDs.</p>
</blockquote>

<h2 id="handling-imperative-messages">Handling Imperative Messages</h2>

<p>The Command Bus pattern is really helpful to handle Imperative Messages.
It's composed of 3 objects:</p>

<ul>
<li>Command: a Data Transfer Object (DTO) with a meaningful name (e.g. ReportNewSpecies) that wraps the message parameters</li>
<li>CommandHandler: a service dedicated to a single Command, that encapsulates the logic</li>
<li>CommandBus: contains all CommandHandlers and calls the appropriate one for the given Command</li>
</ul>

<p>The Command would be constructed in an entry point (Controller, Command, EventListener),
with parameters extracted from the input (Request, Input, Event) and then given to
the CommandBus.</p>

<p>The CommandBus is usually a Middleware:</p>

<ul>
<li>we can have a simple CommandBus that calls the apprioriate command</li>
<li>we can have a CommandBus that wraps the simple one in a database transaction</li>
<li>we can have a CommandBus that wraps the transaction one in an exception handler</li>
<li>etc...</li>
</ul>

<blockquote>
  <p><strong>Note</strong>: To learn more about this pattern, have a look at the following articles:</p>
  
  <ul>
  <li><a href="http://shawnmc.cool/command-bus">CommandBus</a></li>
  <li><a href="http://www.reddit.com/r/PHP/comments/29a6qz/what_am_i_missing_with_this_whole_command_bus/">What am I missing with this whole command bus</a></li>
  <li>Command Bus series:
  
  <ul>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/a-wave-of-command-buses/">Command and CommandHandler</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/responsibilities-of-the-command-bus/">CommandBus</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/from-commands-to-events/">EventBus</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/some-questions-about-the-command-bus/">FAQ</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/01/collecting-events-and-the-events-aware-command-bus/">Event dispatching</a></li>
  </ul></li>
  </ul>
</blockquote>

<h2 id="handling-interrogatory-messages">Handling Interrogatory Messages</h2>

<p>There's actually many options to handle Interrogatory messages.</p>

<h3 id="repository">Repository</h3>

<p>The <a href="http://code.tutsplus.com/tutorials/the-repository-design-pattern--net-35804">Repository design pattern</a>
introduces a class that acts like a collection, but behind the scene relies
on a Gateway to actually retrieve data (could be from a file, a database, a remote endpoint etc)
and on a Factory to format the returned value.</p>

<p>Usually "find" methods are added to the repository with a name describing the expected
criterias.</p>

<blockquote>
  <p><strong>Note</strong>: Here's a list of nice articles about this parttern:</p>
  
  <ul>
  <li><a href="http://martinfowler.com/eaaCatalog/gateway.html">Gateway</a></li>
  <li><a href="http://martinfowler.com/articles/refactoring-external-service.html">Refactoring external service</a></li>
  <li><a href="http://mnapoli.fr/repository-interface/">Repository interface</a></li>
  <li><a href="http://mnapoli.fr/collection-interface-and-database-abstraction/">Collection interface and database abstraction</a></li>
  </ul>
</blockquote>

<h3 id="criteria">Criteria</h3>

<p>Sometimes the repositories will grow bigger and bigger. The alternative solution
would be to build a Criteria object and pass it to a service.</p>

<p>Here's some of these solutions:</p>

<ul>
<li><a href="http://dev.imagineeasy.com/post/44139111915/taiming-repository-classes-in-doctrine-with-the">Using the QueryBuilder</a></li>
<li><a href="http://www.whitewashing.de/2013/03/04/doctrine_repositories.html">build a Criteria and give it to the repository</a></li>
<li><a href="http://blog.kevingomez.fr/2015/02/07/on-taming-repository-classes-in-doctrine-among-other-things/">using the specification pattern</a></li>
<li><a href="http://blog.kevingomez.fr/2015/03/14/rulerz-specifications-and-symfony-are-in-a-boat/">RulerZ, a library using the specification pattern</a></li>
</ul>

<p>Personally I've been experimenting with a Proof Of Concept (POC): <a href="http://gnugat.github.io/search-engine/">SearchEngine</a>.
I still need more experimentations to start advising on this subject, so if you
want to share your experience you'd be welome to post a comment :) .</p>

<h2 id="conclusion">Conclusion</h2>

<p>CQRS helps you to decouple your code (from itself and from third party libraries)
even if, like every principles, it cannot be applied everywhere.</p>

<p>To help you apply it, you can use Command Bus and Repositories / SearchEngine.</p>

<blockquote>
  <p><strong>Note</strong>: Here's a list of interresting articles about CQRS:</p>
  
  <ul>
  <li><a href="https://speakerdeck.com/richardmiller/avoiding-the-mud">Avoiding the mud</a></li>
  <li><a href="https://medium.com/@benjamindulau/do-not-mistake-ddd-for-cqrs-yeah-but-where-to-start-5595b8e68a4d">Do not mistake DDD for CQRS, yeah, but where to start?</a></li>
  <li><a href="http://verraes.net/2014/05/functional-foundation-for-cqrs-event-sourcing/">functional foundation for CQRS Event Sourcing</a></li>
  <li><a href="http://www.udidahan.com/2009/12/09/clarified-cqrs/">clarified CQRS</a></li>
  <li><a href="http://martinfowler.com/bliki/CQRS.html">CQRS</a></li>
  </ul>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Open/Closed principle, by example]]></title>
            <link href="/2014/05/14/open-closed-principle-by-example.html"/>
            <updated>2014-05-14T00:00:00+01:00</updated>
            <id>/2014/05/14/open-closed-principle-by-example.html</id>
            <content type="html"><![CDATA[<p><a href="#conclusion">TL;DR: jump to the conclusion</a>.</p>

<p>This week I've read two articles, which just have been published, on the
Open/Closed principle:</p>

<ul>
<li>one by <a href="http://blog.8thlight.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html">Uncle Bob</a></li>
<li>another one by <a href="http://verraes.net/2014/05/final-classes-in-php/">Mathias Verraes</a></li>
</ul>

<p>I'd like to add my small contribution to their explanation by providing a real
world example: <a href="https://github.com/gnugat/redaktilo">Redaktilo</a>.</p>

<h2 id="problem-statement">Problem statement</h2>

<p>Let's say you have the following file:</p>

<pre><code>Egg
Sausage
Bacon
Spam
</code></pre>

<p>Redaktilo provides an <code>Editor</code> class which allows you to jump to the line you
want, provided that you know exactly its content:</p>

<pre><code class="php">$editor-&gt;has($file, 'Bacon'); // true!
$editor-&gt;jumpDownTo($file, 'Bacon'); // Current line: Bacon
$editor-&gt;jumpUpTo($file, 'Sausage'); // Current line: Sausage
</code></pre>

<p>But what if you want to jump two lines under <code>Sausage</code>? You'd have to create
a new method:</p>

<pre><code class="php">$editor-&gt;moveDown($file, 2); // Current line: Spam
</code></pre>

<p>You have extended <code>Editor</code> by modifying it.</p>

<h2 id="complying-to-the-open%2Fclosed-principle">Complying to the Open/Closed principle</h2>

<p>Having to fork a library to extend it doesn't feel natural. What does the
Open/Closed principle say?</p>

<blockquote>
  <p>Software entities (classes, modules, functions, etc.) should be open for
  extension, but closed for modification.</p>
</blockquote>

<p>Our <code>Editor</code> class is open to extension, but also to modification.</p>

<p>To fix this, we can transfer the responsibility of finding a pattern in the file
to a <code>SearchStrategy</code>:</p>

<pre><code class="php">&lt;?php

namespace Gnugat\Redaktilo\Search;

use Gnugat\Redaktilo\File;

interface SearchStrategy
{
    public function has(File $file, $pattern);

    public function findNext(File $file, $pattern);
    public function findPrevious(File $file, $pattern);

    public function supports($pattern);
}

</code></pre>

<p>Here's some implementation ideas:</p>

<ul>
<li><code>LineSearchStrategy</code>: looking for the exact line in the file</li>
<li><code>LineNumberSearchStrategy</code>: jumping to a line relatively to the current one</li>
<li><code>RegexpSearchStrategy</code>: looking for a pattern in the file using regular expressions</li>
<li><code>PhpTokenSearchStrategy</code>: parsing PHP tokens</li>
</ul>

<p>The <code>supports</code> method tells you that <code>LineSearchStrategy</code> needs <code>$pattern</code> to be
a string, but that <code>RegexpSearchStrategy</code> needs an <code>Expression</code> value object.</p>

<p>The responsibility to find a <code>SearchStrategy</code> which supports the given pattern
should be delegated to <code>SearchEngine</code>:</p>

<pre><code class="php">&lt;?php

namespace Gnugat\Redaktilo\Search;

class SearchEngine
{
    private $searchStrategies = array();

    public function registerStrategy(SearchStrategy $searchStrategy)
    {
        $this-&gt;searchStrategies[] = $searchStrategy;
    }

    public function resolve($pattern)
    {
        foreach ($this-&gt;searchStrategies as $searchStrategy) {
            if ($searchStrategy-&gt;supports($pattern)) {
                return $searchStrategy;
            }
        }

        throw new PatternNotSupportedException($pattern);
    }
}
</code></pre>

<p>You no longer need to fork Redaktilo to add new search related behavior, you can
now just create a new implementation of <code>SearchStrategy</code>, register it into
<code>SearchEngine</code> and then inject it into the <code>Editor</code>:</p>

<pre><code class="php">use Gnugat\Redaktilo\Editor;
use Gnugat\Redaktilo\Filesystem;
use Gnugat\Redaktilo\Search\SearchEngine;
use Gnugat\Redaktilo\Search\LineNumberSearchStrategy;
use Gnugat\Redaktilo\Search\LineSearchStrategy;
use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;

$searchEngine = new SearchEngine();

$lineSearchStrategy = new LineSearchStrategy();
$searchEngine-&gt;registerStrategy($lineSearchStrategy);

$lineNumberSearchStrategy = new LineNumberSearchStrategy();
$searchEngine-&gt;registerStrategy($lineNumberSearchStrategy);

$symfonyFilesystem = new SymfonyFilesystem();
$filesystem = new Filesystem($symfonyFilesystem);
$editor = new Editor($filesystem, $searchEngine);
</code></pre>

<p>We just made Redaktilo open to extension (still) and closed to modifications,
hooray!</p>

<h2 id="editor%27s-diff">Editor's diff</h2>

<p>Here's what <code>Editor</code> looked like after adding <code>moveDown</code>:</p>

<pre><code class="php">&lt;?php

namespace Gnugat\Redaktilo;

class Editor
{
    public function jumpDownTo(File $file, $pattern)
    {
        $lines = $file-&gt;readlines();
        $filename = $file-&gt;getFilename();
        $currentLineNumber = $file-&gt;getCurrentLineNumber() + 1;
        $length = count($lines);
        while ($currentLineNumber &lt; $length) {
            if ($lines[$currentLineNumber] === $pattern) {
                $file-&gt;setCurrentLineNumber($currentLineNumber);

                return;
            }
            $currentLineNumber++;
        }

        throw new \Exception("Couldn't find line $pattern in $filename");
    }

    public function jumpUpTo(File $file, $pattern)
    {
        $lines = $file-&gt;readlines();
        $filename = $file-&gt;getFilename();
        $currentLineNumber = $file-&gt;getCurrentLineNumber() - 1;
        while (0 &lt;= $currentLineNumber) {
            if ($lines[$currentLineNumber] === $pattern) {
                $file-&gt;setCurrentLineNumber($currentLineNumber);

                return;
            }
            $currentLineNumber--;
        }

        throw new \Exception("Couldn't find line $pattern in $filename");
    }

    public function moveUp(File $file, $lines = 1)
    {
        $newLineNumber = $file-&gt;getCurrentLineNumber() - $lines;

        if ($newLineNumber &lt; 0) {
            $newLineNumber = 0;
        }

        $file-&gt;setCurrentLineNumber($newLineNumber);
    }

    public function has(File $file, $pattern)
    {
        return $file-&gt;hasLine($pattern);
    }
}
</code></pre>

<p>And now, here's what it looks like:</p>

<pre><code class="php">&lt;?php

namespace Gnugat\Redaktilo;

use Gnugat\Redaktilo\Search\SearchEngine;

class Editor
{
    private $searchEngine;

    public function __construct(SearchEngine $searchEngine)
    {
        $this-&gt;searchEngine = $searchEngine;
    }

    public function jumpDownTo(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);
        $foundLineNumber = $searchStrategy-&gt;findNext($file, $pattern);

        $file-&gt;setCurrentLineNumber($foundLineNumber);
    }

    public function jumpUpTo(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);
        $foundLineNumber = $searchStrategy-&gt;findPrevious($file, $pattern);

        $file-&gt;setCurrentLineNumber($foundLineNumber);
    }

    public function has(File $file, $pattern)
    {
        $searchStrategy = $this-&gt;searchEngine-&gt;resolve($pattern);

        return $searchStrategy-&gt;has($file, $pattern);
    }
}
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>You should be able to add new features without modifying existing code.</p>

<p>I hope you found this article interesting, if you have any questions or
feedback please feel free to do so on <a href="https://twitter.com/epiloic">Twitter</a>.</p>
]]></content>
        </entry>
    </feed>