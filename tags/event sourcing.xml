<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2024-08-19T17:47:21+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Locating moving]]></title>
            <link href="/2016/10/12/mars-rover-locating-moving.html"/>
            <updated>2016-10-12T00:00:00+01:00</updated>
            <id>/2016/10/12/mars-rover-locating-moving.html</id>
            <content type="html"><![CDATA[<p>In this series we're building the software of a Mars Rover, according to
the <a href="/2016/06/15/mars-rover-introduction.html">following specifications</a>.
It allows us to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>We've already developed the first use case about landing the rover on mars,
and the second one about driving it. We're now developing the last one,
requesting its location:</p>

<blockquote>
  <p>Mars rover will be requested to give its current location (<code>x</code> and <code>y</code>
  coordinates and the orientation).</p>
</blockquote>

<p>In this article we're going to move geolocation value objects (<code>Location</code>,
<code>Coordinates</code> and <code>Orientation</code>) into their new package (<code>geolocation</code>):</p>

<pre><code>git checkout 5-location
cd packages/geolocation
</code></pre>

<h2 id="geolocation">Geolocation</h2>

<p>Let's move our value objects to their new package:</p>

<pre><code>mkdir -p src/MarsRover/Geolocation spec/MarsRover/Geolocation
mv ../navigation/src/MarsRover/Navigation/{Coordinates,Location,Orientation}.php ./src/MarsRover/Geolocation/
mv ../navigation/spec/MarsRover/Navigation/{Coordinates,Location,Orientation}Spec.php ./spec/MarsRover/Geolocation/
</code></pre>

<p>We then need to fix the namespace:</p>

<pre><code>sed -i 's/Navigation/Geolocation/' */MarsRover/Geolocation/*.php
</code></pre>

<p>This should allow us to run successfully our tests for this package:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All Green!</p>

<h2 id="navigation">Navigation</h2>

<p>Now let's update the <code>navigation</code> package:</p>

<pre><code>cd ../navigation
</code></pre>

<p>In order to find where our <code>Location</code> class is used, we can use the following:</p>

<pre><code>grep -R Location src spec/
</code></pre>

<p>We need to fix the use statement in <code>spec/MarsRover/Navigation/LandRoverSpec.php</code>:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\Geolocation\Location;
use MarsRover\Geolocation\Orientation;
use PhpSpec\ObjectBehavior;

class LandRoverSpec extends ObjectBehavior
{
    const X = 23;
    const Y = 42;
    const ORIENTATION = Orientation::NORTH;

    function it_has_location()
    {
        $this-&gt;beConstructedWith(
            self::X,
            self::Y,
            self::ORIENTATION
        );

        $location = $this-&gt;getLocation();
        $location-&gt;shouldHaveType(Location::class);
        $coordinates = $location-&gt;getCoordinates();
        $coordinates-&gt;getX()-&gt;shouldBe(self::X);
        $coordinates-&gt;getY()-&gt;shouldBe(self::Y);
        $location-&gt;getOrientation()-&gt;get()-&gt;shouldBe(self::ORIENTATION);
    }
}
</code></pre>

<p>We can see that we also use <code>Orientation</code>, so we fix it here and we'lldo a search later.</p>

<p>Then we need to add use statements in <code>src/MarsRover/Navigation/LandRover.php</code>:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

use MarsRover\Geolocation\{
    Coordinates,
    Location,
    Orientation
};

class LandRover
{
    private $location;

    public function __construct($x, $y, $orientation)
    {
        $this-&gt;location = new Location(
            new Coordinates($x, $y),
            new Orientation($orientation)
        );
    }

    public function getLocation() : Location
    {
        return $this-&gt;location;
    }
}
</code></pre>

<p>We also spot a use of <code>Coordinates</code>, so we fix it here now and we'll do a search later.</p>

<p>All done. Let's search for <code>Coordinates</code>:</p>

<pre><code>grep -R Coordinates src spec
</code></pre>

<p>There's nothing we haven't fixed yet, so let's search for <code>Orientation</code>:</p>

<pre><code>grep -R Orientation src spec
</code></pre>

<p>It looks like <code>spec/MarsRover/Navigation/LandRoverHandlerSpec.php</code> uses it, so let's fix it:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\EventSourcing\AnEventHappened;
use MarsRover\EventSourcing\Event;
use MarsRover\Navigation\Events;
use MarsRover\EventSourcing\EventStore;
use MarsRover\Navigation\LandRover;
use MarsRover\Geolocation\Orientation;
use PhpSpec\ObjectBehavior;

class LandRoverHandlerSpec extends ObjectBehavior
{
    const X = 23;
    const Y = 42;
    const ORIENTATION = Orientation::NORTH;

    const EVENT_NAME = Events::ROVER_LANDED;
    const EVENT_DATA = [
        'x' =&gt; self::X,
        'y' =&gt; self::Y,
        'orientation' =&gt; self::ORIENTATION,
    ];

    function it_lands_a_rover_at_given_location(
        AnEventHappened $anEventHappened,
        Event $roverLanded,
        EventStore $eventStore
    ) {
        $this-&gt;beConstructedwith($anEventHappened, $eventStore);
        $landRover = new LandRover(
            self::X,
            self::Y,
            self::ORIENTATION
        );

        $anEventHappened-&gt;justNow(
            self::EVENT_NAME,
            self::EVENT_DATA
        )-&gt;willReturn($roverLanded);
        $eventStore-&gt;log($roverLanded)-&gt;shouldBeCalled();

        $this-&gt;handle($landRover);
    }
}
</code></pre>

<p>That should be it for our <code>navigation</code> package. Let's run the tests:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All Green!</p>

<h2 id="location">Location</h2>

<p>Finally we can use our value objects in our <code>location</code> package:</p>

<pre><code>cd ../location
</code></pre>

<p>We can now use <code>Orientation</code> for our constant in <code>spec/MarsRover/Location/LocateRoverHandlerSpec.php</code>,
and also make sure both <code>FindLatestLocation</code> and <code>LocateRoverHandler</code> return a <code>Location</code>
value object:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Location;

use MarsRover\Geolocation\Coordinates;
use MarsRover\Geolocation\Location;
use MarsRover\Geolocation\Orientation;
use MarsRover\Location\Service\FindLatestLocation;
use PhpSpec\ObjectBehavior;

class LocateRoverHandlerSpec extends ObjectBehavior
{
    const X = 23;
    const Y = 42;
    const ORIENTATION = Orientation::NORTH;

    const LOCATION = [
        'x' =&gt; self::X,
        'y' =&gt; self::Y,
        'orientation' =&gt; self::ORIENTATION,
    ];

    function it_finds_a_rover_latest_location(
        FindLatestLocation $findLatestLocation
    ) {
        $this-&gt;beConstructedWith($findLatestLocation);
        $location = new Location(
            new Coordinates(self::X, self::Y),
            new Orientation(self::ORIENTATION)
        );

        $findLatestLocation-&gt;find()-&gt;willReturn($location);

        $this-&gt;handle()-&gt;shouldBe($location);
    }
}
</code></pre>

<p>Let's update <code>src/MarsRover/Location/Service/FindLatestLocation.php</code> to add the return type:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Location\Service;

use MarsRover\Geolocation\Location;

interface FindLatestLocation
{
    public function find() : Location;
}
</code></pre>

<p>And finally let's update <code>src/MarsRover/Location/LocateRoverHandler.php</code>:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Location;

use MarsRover\Geolocation\Location;
use MarsRover\Location\Service\FindLatestLocation;

class LocateRoverHandler
{
    private $findLatestLocation;

    public function __construct(FindLatestLocation $findLatestLocation)
    {
        $this-&gt;findLatestLocation = $findLatestLocation;
    }

    public function handle() : Location
    {
        return $this-&gt;findLatestLocation-&gt;find();
    }
}
</code></pre>

<p>Now tests should pass:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All green! Let's check all tests across our project:</p>

<pre><code>cd ../../
vendor/bin/phpspec run
</code></pre>

<p><a href="https://www.youtube.com/watch?v=rKHh3EIFcZw">Super green</a>!
We can now commit our work:</p>

<pre><code>git add -A
git commit -m 'Moved geolocation value objects in their package'
git checkout master
git merge --no-ff 5-location
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>And that's it! We now have a fully functional Mars Rover, that covers the
following use cases:</p>

<blockquote>
  <ol>
  <li>Mars Rovers need first to be landed at a given position. A position is
  composed of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an
  orientation (a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</li>
  <li>Once a rover has been landed on Mars it is possible to drive them, using
  instructions such as:
  
  <ul>
  <li><code>move_forward</code> (keeps orientation, but moves along the <code>x</code> or <code>y</code> axis)</li>
  <li><code>turn_left</code> / <code>turn_right</code> (keeps the same coordinates, but changes the
  orientation).</li>
  </ul></li>
  <li>Mars rover will be requested to give its current location (<code>x</code> and <code>y</code>
  coordinates and the orientation).</li>
  </ol>
</blockquote>

<p>In order to follow the CQRS principle, we've decided to separate our code in
two main packages:</p>

<ul>
<li><code>navigation</code>: write logic</li>
<li><code>location</code>: read logic</li>
</ul>

<p>With this we can imagine deploying <code>navigation</code> on a central, restricted in
access server, and deploy many <code>location</code> servers, all synchronized with the
data received in <code>navigation</code>.</p>

<p>Splitting our code into many packages would have been quite bothersome without
Mono Repo: all our packages are versioned in the same git repository and can be
linked together using Composer.</p>

<p>For each use case, we've structured our code as follow:</p>

<ol>
<li>create a "Command" object that represents user input and intentation</li>
<li>create a "Value Object" for each Command parameter, with simple input validation</li>
<li>create a "CommandHandler" object that does the actual work</li>
</ol>

<p>With Event Sourcing, the "actual work" for "write" use cases is simply creating
an event and store it. For the "read" use cases it could be retrieving the
latests state by replaying all the past events in the store, or simply retrieving
the latest state from a cache.</p>

<p>And last but not least, we've written tests before writing the actual code, which
helped us to think about how the code will be used. Our test method names were
written as if they were sentences, which has the consequence to make our test
a descriptive and accurate documentation. And of course our tests make sure we
don't introduce regressions.</p>

<p>I hope this series has helped to introduce you to those concepts.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Driving event]]></title>
            <link href="/2016/09/07/mars-rover-driving-event.html"/>
            <updated>2016-09-07T00:00:00+01:00</updated>
            <id>/2016/09/07/mars-rover-driving-event.html</id>
            <content type="html"><![CDATA[<p>In this series we're building the software of a Mars Rover, according to
the <a href="/2016/06/15/mars-rover-introduction.html">following specifications</a>.
It allows us to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>We've already developed the first use case about landing the rover on mars,
and we've started the second one about driving it:</p>

<blockquote>
  <p>Once a rover has been landed on Mars it is possible to drive them, using
  instructions such as <code>move_forward</code> (keeps orientation, but moves along the
  <code>x</code> or <code>y</code> axis) or <code>turn_left</code> / <code>turn_right</code> (keeps the same coordinates,
  but changes the orientation).</p>
</blockquote>

<p>In this article we're going to create the actual driving logic, using
Event Sourcing:</p>

<pre><code>cd packages/navigation
git checkout 4-driving
</code></pre>

<h2 id="driveroverhandler">DriveRoverHandler</h2>

<p>Following our <a href="/2016/06/29/mars-rover-landing.html#twisting-command-bus">Command Bus twist</a>,
we're now going to create the <code>DriveRoverHandler</code> class that's going to take
care of the actual logic associated to the <code>DriveRover</code> use case. We're
starting by bootstraping the test class:</p>

<pre><code>vendor/bin/phpspec describe 'MarsRover\Navigation\DriveRoverHandler'
</code></pre>

<p>This should create the following
<code>spec/MarsRover/Navigation/DriveRoverHandlerSpec.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\Navigation\DriveRoverHandler;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class DriveRoverHandlerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(DriveRoverHandler::class);
    }
}
</code></pre>

<p><a href="/2016/06/15/mars-rover-introduction.html#event-sourcing">Event Sourcing</a> is
all about recording significant actions. Driving a rover seems significant
enough, so that's what <code>DriveRoverHandler</code> should do:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\EventSourcing\AnEventHappened;
use MarsRover\EventSourcing\Event;
use MarsRover\EventSourcing\EventStore;
use MarsRover\Navigation\DriveRover;
use MarsRover\Navigation\Instruction;
use PhpSpec\ObjectBehavior;

class DriveRoverHandlerSpec extends ObjectBehavior
{
    const DRIVING_INSTRUCTION = Instruction::MOVE_FORWARD;

    const EVENT_NAME = 'rover_driven';
    const EVENT_DATA = [
        'instruction' =&gt; self::DRIVING_INSTRUCTION,
    ];

    function it_drives_a_rover_with_given_instruction(
        AnEventHappened $anEventHappened,
        Event $roverDriven,
        EventStore $eventStore
    ) {
        $this-&gt;beConstructedWith($anEventHappened, $eventStore);
        $driveRover = new DriveRover(
            self::DRIVING_INSTRUCTION
        );

        $anEventHappened-&gt;justNow(
            self::EVENT_NAME,
            self::EVENT_DATA
        )-&gt;willReturn($roverDriven);
        $eventStore-&gt;log($roverDriven)-&gt;shouldBeCalled();

        $this-&gt;handle($driveRover);
    }
}
</code></pre>

<p>It's very similar to what we've done for <code>LandRoverHandler</code>, all we've done
is create and event specific to driving the rover with its instructions
and "logged" it in an `EventStore. Let's run the tests:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>They fail because <code>DriveRoverHandler</code> doesn't exists, but phpspec bootstrapped
it for us in the <code>src/MarsRover/Navigation/DriveRoverHandler.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

use MarsRover\EventSourcing\AnEventHappened;
use MarsRover\EventSourcing\EventStore;

class DriveRoverHandler
{
    private $anEventHappened;

    private $eventStore;

    public function __construct(AnEventHappened $anEventHappened, EventStore $eventStore)
    {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(DriveRover $driveRover)
    {
    }
}
</code></pre>

<p>Thanks to the <a href="https://github.com/memio/spec-gen">SpecGen extension</a>, phpspec
was able to detect Dependency Injection, and bootstrapped a constructor with
an attribute initialization for us. How nice!</p>

<p>We'll just need to complete the <code>handle</code> method:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

use MarsRover\EventSourcing\{
    AnEventHappened,
    EventStore
};

class DriveRoverHandler
{
    const EVENT_NAME = 'rover_driven';

    private $anEventHappened;
    private $eventStore;

    public function __construct(
        AnEventHappened $anEventHappened,
        EventStore $eventStore
    ) {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(DriveRover $driveRover)
    {
        $roverDriven = $this-&gt;anEventHappened-&gt;justNow(self::EVENT_NAME, [
            'instruction' =&gt; $driveRover-&gt;getInstruction()-&gt;get(),
        ]);
        $this-&gt;eventStore-&gt;log($roverDriven);
    }
}
</code></pre>

<p>Overall, the code looks very similar to the test. Let's run them again:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All green! We're going to do a quick refactoring to move the event name in
the <code>src/MarsRover/Navigation/Events.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

class Events
{
    const ROVER_LANDED = 'rover_landed';
    const ROVER_DRIVEN = 'rover_driven';
}
</code></pre>

<p>Then use it in the code:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

use MarsRover\EventSourcing\{
    AnEventHappened,
    EventStore
};

class DriveRoverHandler
{
    private $anEventHappened;
    private $eventStore;

    public function __construct(
        AnEventHappened $anEventHappened,
        EventStore $eventStore
    ) {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(DriveRover $driveRover)
    {
        $roverDriven = $this-&gt;anEventHappened-&gt;justNow(Events::ROVER_DRIVEN, [
            'instruction' =&gt; $driveRover-&gt;getInstruction()-&gt;get(),
        ]);
        $this-&gt;eventStore-&gt;log($roverDriven);
    }
}
</code></pre>

<p>and finally in the test:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\EventSourcing\AnEventHappened;
use MarsRover\EventSourcing\Event;
use MarsRover\EventSourcing\EventStore;
use MarsRover\Navigation\DriveRover;
use MarsRover\Navigation\Events;
use MarsRover\Navigation\Instruction;
use PhpSpec\ObjectBehavior;

class DriveRoverHandlerSpec extends ObjectBehavior
{
    const DRIVING_INSTRUCTION = Instruction::MOVE_FORWARD;

    const EVENT_NAME = Events::ROVER_DRIVEN;
    const EVENT_DATA = [
        'instruction' =&gt; self::DRIVING_INSTRUCTION,
    ];

    function it_drives_a_rover_with_given_instruction(
        AnEventHappened $anEventHappened,
        Event $roverDriven,
        EventStore $eventStore
    ) {
        $this-&gt;beConstructedWith($anEventHappened, $eventStore);
        $driveRover = new DriveRover(
            self::DRIVING_INSTRUCTION
        );

        $anEventHappened-&gt;justNow(
            self::EVENT_NAME,
            self::EVENT_DATA
        )-&gt;willReturn($roverDriven);
        $eventStore-&gt;log($roverDriven)-&gt;shouldBeCalled();

        $this-&gt;handle($driveRover);
    }
}
</code></pre>

<p>We can run the tests one last time:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>Still green! We can commit our work:</p>

<pre><code>git add -A
git commit -m '4: Created DriveRoverHandler'
git checkout master
git merge --no-ff 4-driving
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>With Event Sourcing, the logic associated to our "Driving a Rover on Mars" use
case is quite simple: we just record it as an event.</p>

<h2 id="what%27s-next%3F">What's next?</h2>

<p>In the next article, we'll create a new package to take care of the last use
case: "Requesting the Rover's location".</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Event Sourcing code]]></title>
            <link href="/2016/08/03/mars-rover-event-sourcing-code.html"/>
            <updated>2016-08-03T00:00:00+01:00</updated>
            <id>/2016/08/03/mars-rover-event-sourcing-code.html</id>
            <content type="html"><![CDATA[<p>In this series we're building the software of a Mars Rover, according to the
<a href="/2016/06/15/mars-rover-introduction.html">following specifications</a>.
It will allow us to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>Up until now, we've implemented the first use case, "Landing a rover on Mars":</p>

<blockquote>
  <p>Mars Rovers need first to be landed at a given position. A position is
  composed of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an
  orientation (a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</p>
</blockquote>

<p>We've also created an <code>event-sourcing</code> package with the following interfaces:</p>

<ul>
<li><code>Event</code>, a Data Transfer Object (DTO) that contains the name and the data</li>
<li><code>AnEventHappened</code>, which is actually an <code>Event</code> factory</li>
<li><code>EventStore</code>, a service responsible for "logging" <code>Event</code>s</li>
</ul>

<p>In this article, we're going to implement them.</p>

<h2 id="event">Event</h2>

<p>Let's start by asking <a href="http://phpspec.net/">phpspec</a> to generate the test
class:</p>

<pre><code>vendor/bin/phpspec describe 'MarsRover\EventSourcing\Event'
</code></pre>

<p>It should have generated the following
<code>spec/MarsRover/EventSourcing/EventSpec.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\EventSourcing;

use MarsRover\EventSourcing\Event;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class EventSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(Event::class);
    }
}
</code></pre>

<p>We're going to start writing test methods that describe what kind of data this
DTO holds:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\EventSourcing;

use PhpSpec\ObjectBehavior;

class EventSpec extends ObjectBehavior
{
    const NAME = 'something_happened';
    const DATA = [
        'message' =&gt; 'We are the knights who say Ni!',
    ];

    function let(\DateTime $receivedAt)
    {
        $this-&gt;beConstructedWith(
            self::NAME,
            self::DATA,
            $receivedAt
        );
    }

    function it_has_a_name()
    {
        $this-&gt;getName()-&gt;shouldBe(self::NAME);
    }

    function it_has_data()
    {
        $this-&gt;getData()-&gt;shouldBe(self::DATA);
    }

    function it_has_been_received_at_a_date_and_time(\DateTime $receivedAt)
    {
        $this-&gt;getReceivedAt()-&gt;shouldBe($receivedAt);
    }
}
</code></pre>

<p>We can now run the tests to bootstrap the class:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>It will overwrite the existing <code>src/MarsRover/EventSourcing/Event.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\EventSourcing;

use DateTimeInterface;

class Event
{
    public function __construct($argument1, array $argument2, DateTimeInterface $dateTime)
    {
    }

    public function getName()
    {
    }

    public function getData()
    {
    }

    public function getReceivedAt()
    {
    }
}
</code></pre>

<p>We can edit it to make the tests pass:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\EventSourcing;

class Event
{
    private $name;
    private $data;
    private $receivedAt;

    public function __construct(
        string $name,
        array $data,
        \DateTimeInterface $receivedAt
    ) {
        $this-&gt;name = $name;
        $this-&gt;data = $data;
        $this-&gt;receivedAt = $receivedAt;
    }

    public function getName() : string
    {
        return $this-&gt;name;
    }

    public function getData() : array
    {
        return $this-&gt;data;
    }

    public function getReceivedAt() : \DateTimeInterface
    {
        return $this-&gt;receivedAt;
    }
}
</code></pre>

<p>Let's check if everything is alright:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>And it is! Time to commit our work:</p>

<pre><code>git add -A
git commit -m '3: Created Event'
</code></pre>

<h2 id="aneventhappened">AnEventHappened</h2>

<p>The next class to implement is <code>AnEventHappened</code>. Let's create its test:</p>

<pre><code>vendor/bin/phpspec describe 'MarsRover\EventSourcing\AnEventHappened'
</code></pre>

<p>It should generate the <code>spec/MarsRover/EventSourcing/AnEventHappenedSpec.php</code>
file:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\EventSourcing;

use MarsRover\EventSourcing\AnEventHappened;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class AnEventHappenedSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(AnEventHappened::class);
    }
}
</code></pre>

<p>We can start describing this factory by writing test methods:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\EventSourcing;

use MarsRover\EventSourcing\Event;
use PhpSpec\ObjectBehavior;

class AnEventHappenedSpec extends ObjectBehavior
{
    const NAME = 'something_happened';
    const DATA = [
        'message' =&gt; 'And now for something completly different',
    ];

    function it_can_create_events()
    {
        $this-&gt;justNow(self::NAME, self::DATA)-&gt;shouldHaveType(Event::class);
    }
}
</code></pre>

<p>Running the tests will generate the class:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>It should have overwritten the
<code>src/MarsRover/EventSourcing/AnEventHappened.php</code> file with:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\EventSourcing;

class AnEventHappened
{
    public function justNow($argument1, $argument2)
    {
    }
}
</code></pre>

<p>We can now complete it:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\EventSourcing;

class AnEventHappened
{
    public function justNow(string $name, array $data) : Event
    {
        return new Event($name, $data, new \DateTime());
    }
}
</code></pre>

<p>Let's run the tests:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All green! Time to commit:</p>

<pre><code>git add -A
git commit -m 'Created AnEventHappened'
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>We replaced the generated interfaces for <code>AnEventHappened</code> and <code>Event</code> with
classes, which have been tested.</p>

<p><code>EventStore</code> could log events in a log file, or in a database, or send them as
messages to a queue to be treated later... For that reason we'll keep the
interface.</p>

<p>We're going to delay its implementations for later, when the rover will be
almost done.</p>

<p>If we run the tests from the project's root, we'll see that it runs tests for
both <code>navigation</code> and <code>event-sourcing</code> in one go. This is one advantage of
MonoRepo: it makes it easy to make sure that changes in a package don't break
the other that depend on it.</p>

<p>We can now merge our branch:</p>

<pre><code>cd ../../
git checkout master
git merge --no-ff 3-event-sourcing
</code></pre>

<h2 id="what%27s-next">What's next</h2>

<p>In the next article we'll start developing the second use case: Driving the
rover.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Event Sourcing package]]></title>
            <link href="/2016/07/27/mars-rover-event-sourcing-package.html"/>
            <updated>2016-07-27T00:00:00+01:00</updated>
            <id>/2016/07/27/mars-rover-event-sourcing-package.html</id>
            <content type="html"><![CDATA[<p>In this series we're building the software of a Mars Rover, according to the
<a href="/2016/06/15/mars-rover-introduction.html">following specifications</a>.
It will allow us to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>Up until now, we've implemented the first use case, "Landing a rover on Mars":</p>

<blockquote>
  <p>Mars Rovers need first to be landed at a given position. A position is
  composed of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an
  orientation (a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</p>
</blockquote>

<p>In order to do so, we've:</p>

<ul>
<li>created a <a href="/2016/06/22/mars-rover-initialization.html">navigation package</a></li>
<li>created <a href="/2016/06/29/mars-rover-landing.html">LandRover for input validation</a></li>
<li>refactored it by:

<ul>
<li>extracting <a href="/2016/07/06/mars-rover-landing-coordinates.html">Coordinates</a></li>
<li>extracting <a href="/2016/07/13/mars-rover-landing-orientation.html">Orientation</a></li>
</ul></li>
<li>created <a href="/2016/07/20/mars-rover-landing-event.html">LandRoverHandler for the actual logic</a></li>
</ul>

<p>In the last article, we wrote some Event Sourcing code:</p>

<ul>
<li><code>Event</code>, a Data Transfer Object (DTO) that contains the name and the data</li>
<li><code>AnEventHappened</code>, which is actually an <code>Event</code> factory</li>
<li><code>EventStore</code>, a service responsible for "logging" <code>Event</code>s</li>
</ul>

<p>In this article, we're going to extract them from the <code>navigation</code> package and
put them in their own <code>event-sourcing</code> package.</p>

<h2 id="creating-the-%60event-sourcing%60-package">Creating the <code>event-sourcing</code> package</h2>

<p>We can start by creating the directory:</p>

<pre><code>git checkout -b 3-event-sourcing
mkdir -p packages/event-sourcing
cd packages/event-sourcing
</code></pre>

<p>Composer needs us to set up the package by creating a <code>composer.json</code> file:</p>

<pre><code>{
    "name": "mars-rover/event-sourcing",
    "license": "MIT",
    "type": "library",
    "description": "Mars Rover - Event Sourcing",
    "autoload": {
        "psr-4": { "MarsRover\\EventSourcing\\": "src/MarsRover/EventSourcing" }
    },
    "require": {
        "php": "^7.0"
    },
    "require-dev": {
        "memio/spec-gen": "^0.6"
    }
}
</code></pre>

<p>We've decided to use <a href="http://phpspec.net/">phpspec</a> as a test framework, and
to get the most of it we'd like to use its <a href="http://memio.github.io/spec-gen">SpecGen</a>
extension. To do so we need to create the <code>phpspec.yml.dist</code> file:</p>

<pre><code>extensions:
    Memio\SpecGen\MemioSpecGenExtension: ~
</code></pre>

<blockquote>
  <p><strong>Note</strong>: For more information about phpspec
  <a href="/2015/08/03/phpspec.html">see this article</a>.</p>
</blockquote>

<p>Finally, we can configure this package's git by creating a <code>.gitignore</code> file:</p>

<pre><code># Configuration
/phpspec.yml

# Third Party libraries
/vendor/
/composer.lock
</code></pre>

<p>With this we've finished creating our package. We can run Composer:</p>

<pre><code>composer install --optimize-autoloader
</code></pre>

<p>That should be enough for a second commit:</p>

<pre><code>git add -A
git commit -m '3: Created Event Sourcing package'
</code></pre>

<h2 id="adding-%60event-sourcing%60-to-the-project">Adding <code>event-sourcing</code> to the project</h2>

<p>Let's go back to the project's root:</p>

<pre><code>cd ../../
</code></pre>

<p>All we need to do is to add a new line in the <code>require</code> section of our
<code>composer.json</code> file:</p>

<pre><code>{
    "name": "mars-rover/mars-rover",
    "license": "MIT",
    "type": "project",
    "description": "Mars Rover",
    "repositories": [
        {
            "type": "path",
            "url": "./packages/*"
        }
    ],
    "require": {
        "mars-rover/event-sourcing": "*@dev",
        "mars-rover/navigation": "*@dev",
        "php": "^7.0"
    },
    "require-dev": {
        "phpspec/phpspec": "^3.0@beta"
    }
}
</code></pre>

<p>Actually, we also need to add a new section in <code>phpspec.yml.dist</code>:</p>

<pre><code>suites:
    event-sourcing:
        namespace: 'MarsRover\EventSourcing'
        src_path: packages/event-sourcing/src
        spec_path: packages/event-sourcing

    navigation:
        namespace: 'MarsRover\Navigation'
        src_path: packages/navigation/src
        spec_path: packages/navigation
</code></pre>

<p>And that's it! We are now able to run Composer and then phpspec:</p>

<pre><code>composer update --optimize-autoloader
vendor/bin/phpspec run
</code></pre>

<p>That should be enough for a second commit:</p>

<pre><code>git add -A
git commit -m '3: Added event-sourcing package to main project'
</code></pre>

<h2 id="event-sourcing-files">Event Sourcing files</h2>

<p>It's now time to move Event Sourcing files from <code>navigation</code> to
<code>event-sourcing</code>:</p>

<pre><code>cd packages/event-sourcing
mkdir -p src/MarsRover/EventSourcing
mv ../navigation/src/MarsRover/Navigation/{EventStore.php,Event.php,AnEventHappened.php} ./src/MarsRover/EventSourcing/
</code></pre>

<p>We then need to change namespaces:</p>

<pre><code>sed -i 's/Navigation/EventSourcing/g' ./src/MarsRover/EventSourcing/*
</code></pre>

<p>To continue those namespace changes we'll have to move back to the <code>navigation</code>
package:</p>

<pre><code>cd ../navigation
</code></pre>

<p>Then rename the namespaces:</p>

<pre><code>sed -i 's/Navigation\\Event;/EventSourcing\\Event;/g' ./spec/MarsRover/Navigation/*
sed -i 's/Navigation\\EventStore;/EventSourcing\\EventStore;/g' ./spec/MarsRover/Navigation/*
sed -i 's/Navigation\\AnEventHappened;/EventSourcing\\AnEventHappened;/g' ./spec/MarsRover/Navigation/*
</code></pre>

<p>We'll also need to add use statements to
<code>./src/MarsRover/Navigation/LandRoverHandler.php</code>:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

use MarsRover\EventSourcing\{
    AnEventHappened,
    EventStore
};

class LandRoverHandler
{
    private $anEventHappened;
    private $eventStore;

    public function __construct(
        AnEventHappened $anEventHappened,
        EventStore $eventStore
    ) {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(LandRover $landRover)
    {
        $roverLanded = $this-&gt;anEventHappened-&gt;justNow(Events::ROVER_LANDED, [
            'x' =&gt; $landRover-&gt;getCoordinates()-&gt;getX(),
            'y' =&gt; $landRover-&gt;getCoordinates()-&gt;getY(),
            'orientation' =&gt; $landRover-&gt;getOrientation()-&gt;get(),
        ]);
        $this-&gt;eventStore-&gt;log($roverLanded);
    }
}
</code></pre>

<p>Since <code>navigation</code> now relies on <code>event-sourcing</code> classes, we need to add it in
<code>composer.json</code>:</p>

<pre><code>{
    "name": "mars-rover/navigation",
    "license": "MIT",
    "type": "library",
    "description": "Mars Rover - Navigation",
    "autoload": {
        "psr-4": { "MarsRover\\Navigation\\": "src/MarsRover/Navigation" }
    },
    "repositories": [
        {
            "type": "path",
            "url": "../*"
        }
    ],
    "require": {
        "mars-rover/event-sourcing": "*@dev",
        "php": "^7.0"
    },
    "require-dev": {
        "memio/spec-gen": "^0.6"
    }
}
</code></pre>

<p>As we can see, it's quite similar to what we've done in the project's root:
we've added a <code>repositories</code> section with the path to packages (<code>../</code>) and
then added <code>mars-rover/event-sourcing</code> to the <code>require</code> section, with the
version <code>*@dev</code> (any version, including unstable ones).</p>

<p>We are now able to run Composer:</p>

<pre><code>composer update --optimize-autoloader
</code></pre>

<p>Let's run the tests:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All green! We can now succesfully commit our new package:</p>

<pre><code>cd ../../
git add -A
git commit -m '3: Moved Event Sourcing classes to their own package'
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>We identified <code>AnEventHappened</code>, <code>Event</code> and <code>EventStore</code> as objects that
could be in their own package, so we created <code>event-sourcing</code> and moved them
in it. This also meant we had to add this package to the project's root and to
navigation.</p>

<h2 id="what%27s-next">What's next</h2>

<p>In the next article, we'll implement <code>AnEventHappened</code> and <code>Event</code>.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Landing event]]></title>
            <link href="/2016/07/20/mars-rover-landing-event.html"/>
            <updated>2016-07-20T00:00:00+01:00</updated>
            <id>/2016/07/20/mars-rover-landing-event.html</id>
            <content type="html"><![CDATA[<p>In this series we're going to build the software of a Mars Rover, according to
the <a href="/2016/06/15/mars-rover-introduction.html">following specifications</a>.
It will allow us to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>Previously we've created a
<a href="/2016/06/22/mars-rover-initialization.html">navigation package</a>, and in it
a <code>LandRover</code> class that
<a href="/2016/06/29/mars-rover-landing.html">validates input parameters</a> for our
first use case:</p>

<blockquote>
  <p>Mars Rovers need first to be landed at a given position. A position is
  composed of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an
  orientation (a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</p>
</blockquote>

<p>We've then refactored it to extract
<a href="/2016/07/06/mars-rover-landing-coordinates.html">coordinates</a>
and <a href="/2016/07/13/mars-rover-landing-orientation.html">orientation</a>
in their own classes.</p>

<p>In this article we're going to create the actual landing logic, using
Event Sourcing:</p>

<pre><code>cd packages/navigation
git checkout 2-landing
</code></pre>

<h2 id="landroverhandler">LandRoverHandler</h2>

<p>Following our <a href="/2016/06/29/mars-rover-landing.html#twisting-command-bus">Command Bus twist</a>,
we're now going to create the <code>LandRoverHandler</code> class that's going to take
care of the actual logic associated to the <code>LandRover</code> use case. We're starting
by bootstraping the test class:</p>

<pre><code>vendor/bin/phpspec describe 'MarsRover\Navigation\LandRoverHandler'
</code></pre>

<p>this should create the following
<code>spec/MarsRover/Navigation/LandRoverHandlerSpec.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\Navigation\LandRoverHandler;
use PhpSpec\ObjectBehavior;
use Prophecy\Argument;

class LandRoverHandlerSpec extends ObjectBehavior
{
    function it_is_initializable()
    {
        $this-&gt;shouldHaveType(LandRoverHandler::class);
    }
}
</code></pre>

<p><a href="/2016/06/15/mars-rover-introduction.html#event-sourcing">Event Sourcing</a> is
all about recording significant actions. Landing a rover seems significant
enough, so that's what <code>LandRoverHandler</code> should do:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\Navigation\AnEventHappened;
use MarsRover\Navigation\Event;
use MarsRover\Navigation\EventStore;
use MarsRover\Navigation\LandRover;
use MarsRover\Navigation\Orientation;
use PhpSpec\ObjectBehavior;

class LandRoverHandlerSpec extends ObjectBehavior
{
    const X = 23;
    const Y = 42;
    const ORIENTATION = Orientation::NORTH;

    const EVENT_NAME = 'rover_landed';
    const EVENT_DATA = [
        'x' =&gt; self::X,
        'y' =&gt; self::Y,
        'orientation' =&gt; self::ORIENTATION,
    ];

    function it_lands_a_rover_at_given_location(
        AnEventHappened $anEventHappened,
        Event $roverLanded,
        EventStore $eventStore
    ) {
        $this-&gt;beConstructedWith($anEventHappened, $eventStore);
        $landRover = new LandRover(
            self::X,
            self::Y,
            self::ORIENTATION
        );

        $anEventHappened-&gt;justNow(
            self::EVENT_NAME,
            self::EVENT_DATA
        )-&gt;willReturn($roverLanded);
        $eventStore-&gt;log($roverLanded)-&gt;shouldBeCalled();

        $this-&gt;handle($landRover);
    }
}
</code></pre>

<p>In this test, we rely on:</p>

<ul>
<li><code>Event</code>, a Data Transfer Object (DTO) that contains the name and the data</li>
<li><code>AnEventHappened</code>, which is actually an <code>Event</code> factory</li>
<li><code>EventStore</code>, a service responsible for "logging" <code>Event</code>s</li>
</ul>

<p>We could have done without the factory and create directly <code>Event</code> in
<code>LandRoverHandler</code>, but then we'd have no way to check in our tests that it
was constructed with the right data.</p>

<p>Those classes don't exist yet, we've made them up to build a coherent
<strong>story</strong>. Let's run the tests:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>They fail because of the missing classes... But phpspec bootstrapped them for
us!</p>

<p>It created the <code>src/MarsRover/Navigation/AnEventHappened.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

interface AnEventHappened
{

    public function justNow($argument1, $argument2);
}
</code></pre>

<p>It also created the <code>src/MarsRover/Navigation/Event.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

interface Event
{
}
</code></pre>

<p>And it created the <code>src/MarsRover/Navigation/EventStore.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

interface EventStore
{

    public function log($argument1);
}
</code></pre>

<p>As we can see, when we reference a non existence class, phpspec generates an
interface for us. It also generates methods, if we've described method calls
in our test.</p>

<p>For now we'll leave them like this, and have a look at the generated
<code>src/MarsRover/Navigation/LandRoverHandler.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

class LandRoverHandler
{
    private $anEventHappened;

    private $eventStore;

    public function __construct(AnEventHappened $anEventHappened, EventStore $eventStore)
    {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(LandRover $landRover)
    {
    }
}
</code></pre>

<p>Thanks to the <a href="https://github.com/memio/spec-gen">SpecGen extension</a>, phpspec
was able to detect Dependency Injection, and bootstrapped a constructor with
an attribute initialization for us. How nice!</p>

<p>We'll just need to complete the <code>handle</code> method:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

class LandRoverHandler
{
    const EVENT_NAME = 'rover_landed';

    private $anEventHappened;
    private $eventStore;

    public function __construct(
        AnEventHappened $anEventHappened,
        EventStore $eventStore
    ) {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(LandRover $landRover)
    {
        $roverLanded = $this-&gt;anEventHappened-&gt;justNow(self::EVENT_NAME, [
            'x' =&gt; $landRover-&gt;getCoordinates()-&gt;getX(),
            'y' =&gt; $landRover-&gt;getCoordinates()-&gt;getY(),
            'orientation' =&gt; $landRover-&gt;getOrientation()-&gt;get(),
        ]);
        $this-&gt;eventStore-&gt;log($roverLanded);
    }
}
</code></pre>

<p>Overall, the code looks very similar to the test. Let's run them:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>All green! We might want to use the same event name in both the code and the
test, so let's create a <code>src/MarsRover/Navigation/Events.php</code> file:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

class Events
{
    const ROVER_LANDED = 'rover_landed';
}
</code></pre>

<p>Then use it in the code:</p>

<pre><code class="php">&lt;?php

namespace MarsRover\Navigation;

class LandRoverHandler
{
    private $anEventHappened;
    private $eventStore;

    public function __construct(
        AnEventHappened $anEventHappened,
        EventStore $eventStore
    ) {
        $this-&gt;anEventHappened = $anEventHappened;
        $this-&gt;eventStore = $eventStore;
    }

    public function handle(LandRover $landRover)
    {
        $roverLanded = $this-&gt;anEventHappened-&gt;justNow(Events::ROVER_LANDED, [
            'x' =&gt; $landRover-&gt;getCoordinates()-&gt;getX(),
            'y' =&gt; $landRover-&gt;getCoordinates()-&gt;getY(),
            'orientation' =&gt; $landRover-&gt;getOrientation()-&gt;get(),
        ]);
        $this-&gt;eventStore-&gt;log($roverLanded);
    }
}
</code></pre>

<p>and finally in the test:</p>

<pre><code class="php">&lt;?php

namespace spec\MarsRover\Navigation;

use MarsRover\Navigation\AnEventHappened;
use MarsRover\Navigation\Event;
use MarsRover\Navigation\Events;
use MarsRover\Navigation\EventStore;
use MarsRover\Navigation\LandRover;
use MarsRover\Navigation\Orientation;
use PhpSpec\ObjectBehavior;

class LandRoverHandlerSpec extends ObjectBehavior
{
    const X = 23;
    const Y = 42;
    const ORIENTATION = Orientation::NORTH;

    const EVENT_NAME = Events::ROVER_LANDED;
    const EVENT_DATA = [
        'x' =&gt; self::X,
        'y' =&gt; self::Y,
        'orientation' =&gt; self::ORIENTATION,
    ];

    function it_lands_a_rover_at_given_location(
        AnEventHappened $anEventHappened,
        Event $roverLanded,
        EventStore $eventStore
    ) {
        $this-&gt;beConstructedWith($anEventHappened, $eventStore);
        $landRover = new LandRover(
            self::X,
            self::Y,
            self::ORIENTATION
        );

        $anEventHappened-&gt;justNow(
            self::EVENT_NAME,
            self::EVENT_DATA
        )-&gt;willReturn($roverLanded);
        $eventStore-&gt;log($roverLanded)-&gt;shouldBeCalled();

        $this-&gt;handle($landRover);
    }
}
</code></pre>

<p>We can run the tests one last time:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>Still green! We can commit our work:</p>

<pre><code>git add -A
git commit -m '2: Created LandRoverHandler'
git checkout master
git merge --no-ff 2-landing
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>With Event Sourcing, the logic associated to our "Landing a Rover on Mars" use
case is quite simple: we just record it as an event.</p>

<h2 id="what%27s-next%3F">What's next?</h2>

<p>In the next article, we'll extract Event Sourcing logic from the <code>navigation</code>
package and put it in its own <code>event-sourcing</code> one.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Introduction]]></title>
            <link href="/2016/06/15/mars-rover-introduction.html"/>
            <updated>2016-06-15T00:00:00+01:00</updated>
            <id>/2016/06/15/mars-rover-introduction.html</id>
            <content type="html"><![CDATA[<p>Welcome to this Mars Rover series where we're going to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>In this introductory article, we're simply going to describe our Mars Rover
specifications.</p>

<blockquote>
  <p><strong>Note</strong>: This programming exercise originally comes from
  <a href="http://dallashackclub.com/rover">Dallas Hack Club</a>, which is now
  unfortunately down.</p>
  
  <p>This Mars Rover <a href="https://en.wikipedia.org/wiki/Kata_(programming)">kata</a>
  has been adapted for the needs of this series.</p>
</blockquote>

<p>But first, let's have a quick reminder on what the practices mentioned above
are.</p>

<h2 id="monolithic-repositories">Monolithic Repositories</h2>

<p>A MonoRepo is a single versioning repository containing many packages that
would otherwise be versioned in their own repositories.</p>

<p>With it, everything can be found in one place, which makes it easy to:</p>

<ul>
<li>navigate</li>
<li>manage dependencies</li>
<li>set up</li>
<li>run tests</li>
</ul>

<p>However it also brings the following disadvantages:</p>

<ul>
<li>no hard separation between packages (thigh coupling is possible)</li>
<li>limited regarding scaling (disk space, bandwidth)</li>
<li>no finely grain permission management (a user has access to everything
or nothing)</li>
</ul>

<p>MonoRepos make sense for projects that would be packaged / released together
(although it makes it possible to package / release them independently).</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about MonoRepos:</p>
  
  <ul>
  <li><a href="http://danluu.com/monorepo/">Advantages of a monolithic version control</a></li>
  <li><a href="http://gregoryszorc.com/blog/2014/09/09/on-monolithic-repositories/">On Monolithic Repositories</a></li>
  </ul>
</blockquote>

<h2 id="command-%2F-query-responsibility-segregation">Command / Query Responsibility Segregation</h2>

<p>CQRS is about separating "write" logic from "read" logic, and it can be applied
on many levels, for example:</p>

<ul>
<li>have a read-only microservice and a separate write microservice</li>
<li>have endpoints / tasks that are either write or read only</li>
<li>separate your models in two (again, read-only and write-only)</li>
</ul>

<p>It's important to note that CQRS can also be applied <em>partially</em> in the same
project: use it only when it makes sense.</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about CQRS:</p>
  
  <ul>
  <li><a href="/2015/08/25/cqrs.html">Command / Query Responsibility Segregation</a></li>
  <li><a href="http://martinfowler.com/bliki/CQRS.html">CQRS</a></li>
  <li><a href="http://www.jefclaes.be/2013/02/adding-r-to-cqs-some-storage-options.html">Adding the R to CQS: some storage options</a></li>
  <li><a href="http://udidahan.com/2009/12/09/clarified-cqrs/">Clarified CQRS</a></li>
  <li><a href="http://verraes.net/2014/05/functional-foundation-for-cqrs-event-sourcing/">Functional foundation for CQRS / ES</a></li>
  <li><a href="http://verraes.net/2015/01/messaging-flavours/">Messaging Flavours</a></li>
  <li><a href="https://speakerdeck.com/richardmiller/avoiding-the-mud">Avoiding the Mud</a></li>
  <li><a href="https://medium.com/@benjamindulau/do-not-mistake-ddd-for-cqrs-yeah-but-where-to-start-5595b8e68a4d#.vnh8i8rhb">Do not mistake DDD for CQRS. Yeah but where to start?</a></li>
  <li><a href="https://moquet.net/talks/phptour-2015/">CQRS/ES</a></li>
  <li><a href="http://verraes.net/2013/12/fighting-bottlenecks-with-cqrs/">Fighting Bottlenecks with CQRS</a></li>
  </ul>
</blockquote>

<h2 id="event-sourcing">Event Sourcing</h2>

<p>With ES, every significant action is recorded as an "event". Keeping track of
those events provides the following advantages:</p>

<ul>
<li>replay them to recreate the state of an application at a given time
(undo, redo, synchronization)</li>
<li>analyse how the latest state came to be (compare two versions or find who did
what and when)</li>
</ul>

<p>Just like with CQRS, it's important to note that ES can also be applied
<em>partially</em> inside a project : use it only when it makes sense.</p>

<p>ES is often associated to CQRS, but they can be used separately.</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about ES:</p>
  
  <ul>
  <li><a href="https://martin.kleppmann.com/2015/05/27/logs-for-data-infrastructure.html">Using logs to build a solid data infrastructure or: why dual writes are a bad idea</a></li>
  <li><a href="http://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a></li>
  <li><a href="http://verraes.net/2014/03/practical-event-sourcing.markdown/">Practical Event Sourcing</a></li>
  <li><a href="https://moquet.net/talks/phptour-2015/">CQRS/ES</a></li>
  <li><a href="http://verraes.net/2013/12/fighting-bottlenecks-with-cqrs/">Fighting Bottlenecks with CQRS</a></li>
  <li><a href="http://verraes.net/2014/05/functional-foundation-for-cqrs-event-sourcing/">Functional foundation for CQRS / ES</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/07/meeting-the-broadway-team/">Meeting the Broadway team - talking DDD, CQRS and event sourcing</a></li>
  </ul>
</blockquote>

<h2 id="test-driven-development">Test Driven Development</h2>

<p>TDD can be summed up in the following steps when developing:</p>

<ol>
<li>create a test</li>
<li>then write just enough code to make the test pass (quick and dirty, or
"make it work")</li>
<li>then refactor the code (clean, or "make it right")</li>
</ol>

<p>Writing the test before the code forces us to think about how we'd like the
future code to be <em>used</em>. It's like writing specifications, but with 3
purposes: design, documentation and automated regression checking.</p>

<p>This discipline makes it easy to have a high code coverage (although rigour
still needs to be applied: we need to test all the happy paths and all the
unhappy ones).</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about TDD:</p>
  
  <ul>
  <li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1170">Straw man TDD</a></li>
  <li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1202">Coverage!!!</a></li>
  <li><a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html">The Failures of "Intro to TDD"</a></li>
  <li><a href="http://tech.mybuilder.com/coupling-tests/">TDD, avoid testing implementation details</a></li>
  <li><a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">Monogamous TDD</a></li>
  <li><a href="http://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">When TDD doesn't work</a></li>
  <li><a href="http://codurance.com/2015/05/12/does-tdd-lead-to-good-design/">Does TDD really lead to good design?</a></li>
  <li><a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead, long live testing</a></li>
  <li><a href="http://www.daedtech.com/what-tdd-is-and-is-not/">What TDD is and is not</a></li>
  <li><a href="https://vimeo.com/68375232">TDD, where it all went wrong</a></li>
  <li><a href="https://medium.com/@davidihunt/tdd-and-complexity-1bbd5ca51ee7#.4mzrdro57">TDD and Complexity</a></li>
  <li><a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">Giving up on TDD</a></li>
  </ul>
</blockquote>

<h2 id="specifications">Specifications</h2>

<p>The purpose of this series is to create the software of a Mars Rover, according
to the following specifications.</p>

<p>Mars Rovers need first to be landed at a given position. A position is composed
of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an orientation
(a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</p>

<p>It is then possible to drive them, using instructions such as <code>move_forward</code>
(keeps orientation, but moves along the <code>x</code> or <code>y</code> axis) or
<code>turn_left</code> / <code>turn_right</code> (keeps the same coordinates, but changes the
orientation).</p>

<p>From time to time, they'll be requested to give their current location
(again, <code>x</code> and <code>y</code> coordinates and the orientation).</p>

<p>For example, a rover can be landed at <code>23</code>, <code>42</code>, <code>north</code> and then can be
instructed to move forward twice, then to turn left, then to move forward once.
When requested to, it should provide this location: <code>22</code>, <code>44</code>, <code>west</code>.</p>

<h2 id="identifying-use-cases">Identifying use cases</h2>

<p>From the above specifications, we can identify at least three use cases:</p>

<ol>
<li>Landing a Rover on Mars</li>
<li>Driving the rover</li>
<li>Requesting its location</li>
</ol>

<h2 id="what%27s-next">What's next</h2>

<p>In the next article we'll initialize the project by creating the MonoRepo and
its first package: <code>navigation</code>.</p>

<blockquote>
  <p><strong>Note</strong> We'll be using:</p>
  
  <ul>
  <li>PHP 7</li>
  <li><a href="https://getcomposer.org">Composer</a></li>
  <li>git</li>
  <li><a href="http://phpspec.net/">phpspec</a>
  and its <a href="http://memio.github.io/spec-gen">SpecGen extension</a></li>
  </ul>
</blockquote>
]]></content>
        </entry>
    </feed>