<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-08-13T06:56:38+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Keep It Simple and Git]]></title>
            <link href="/2014/12/10/keep-it-simple-and-git.html"/>
            <updated>2014-12-10T00:00:00+00:00</updated>
            <id>/2014/12/10/keep-it-simple-and-git.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>TL;DR</strong>: Branch only from master, merge back when done and immediately deploy.</p>
</blockquote>

<p>Git proposes a branch system with the possibility to merge them together,
allowing you to separate released code from work in progress one.</p>

<p>Git flows have been created to help you keep the same process in your team.
In this article, we'll have a look at <a href="https://github.com/jbenet">@jbenet</a>'s
<a href="https://gist.github.com/jbenet/ee6c9ac48068889b0912">simple git branching model</a>:</p>

<blockquote>
  <ol>
  <li><code>master</code> must always be deployable.</li>
  <li><strong>all changes</strong> are made through feature branches (pull-request + merge)</li>
  <li>rebase to avoid/resolve conflicts; merge in to <code>master</code></li>
  </ol>
</blockquote>

<h2 id="working-on-a-change">Working on a change</h2>

<p>Changes can be new features, bug fixes, enhancements. They're all coming from
master:</p>

<pre><code class="bash">git checkout master
git checkout -b my-changes
</code></pre>

<h2 id="making-the-change-ready">Making the change ready</h2>

<p>Once you're happy with your branch, you need to update it with the last changes
from master:</p>

<pre><code class="bash">git checkout master
git pull --rebase
git checkout my-changes
git rebase master
git push -fu origin my-changes
</code></pre>

<blockquote>
  <p><strong>Note</strong>: <code>rebase</code> will rewrite your commits, their dates will be changed
  (therefore their hash will be changed).</p>
</blockquote>

<p>Check your tests, the coding standards and ask for a code review.</p>

<h3 id="managing-conflicts">Managing conflicts</h3>

<p>You can list conflicts (if any):</p>

<pre><code class="bash">git status
</code></pre>

<p>Edit your files and then mark them as solved:</p>

<pre><code class="bash">git add &lt;file&gt;
</code></pre>

<p>When all conflicted files have been resolved, you can continue:</p>

<pre><code class="bash">git rebase --continue
</code></pre>

<h3 id="when-to-merge">When to merge</h3>

<p>Here's a to do list you can use to know if a branch is ready to be merged:</p>

<ul>
<li>is it compliant with the coding standards?</li>
<li>has the code been reviewed?</li>
<li>do the tests pass?</li>
<li>has the Quality Assurance team checked the feature?</li>
<li>will someone be available in the next hour in case of emergency?</li>
<li>does the product owner want this feature now?</li>
</ul>

<h2 id="deploying-the-new-change">Deploying the new change</h2>

<p>If everything is ok with your change, then you can merge it into master:</p>

<pre><code class="bash">git checkout master
git merge --no-ff my-change
git push
git push origin :my-changes
git branch -D my-changes
</code></pre>

<p>It's now time to deploy! You can make a tag:</p>

<pre><code class="bash">git tag -a &lt;version&gt;
git push --tags
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>Make small changes, release often.</p>
]]></content>
        </entry>
    </feed>