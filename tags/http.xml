<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-09-03T07:18:36+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[HTTP Cache]]></title>
            <link href="/2015/11/26/http-cache.html"/>
            <updated>2015-11-26T00:00:00+00:00</updated>
            <id>/2015/11/26/http-cache.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>TL;DR</strong>: Enable HTTP cache by setting one of the following header in your Responses:
  <code>Cache-Control</code>, <code>Expires</code>, <code>Last-Modified</code> or <code>Etag</code>.</p>
</blockquote>

<p>The HTTP protocol specifies how to cache Responses:</p>

<p><img src="http://www.websequencediagrams.com/cgi-bin/cdraw?lz=SFRUUCBHYXRld2F5IENhY2hlCgpDbGllbnQtPgAKBTogUmVxdWVzdAoAGQUtPlNlcnZlcjogRm9yd2FyZGVkIHIAGgcAFAYALQtzcG9uc2UAMQgAUQYAKw4AGggAZA5TYW1lAE0JAC8PAIEfBQAwCw&amp;s=napkin" alt="sequence diagram" /></p>

<p>The following actors are involved:</p>

<ul>
<li>client, usually a browser or a SDK</li>
<li>reverse proxy (cache application), could be one (or even many) of:

<ul>
<li><a href="http://nginx.org/en/">nginx</a></li>
<li><a href="https://www.varnish-cache.org/">Varnish</a></li>
<li>a CDN like <a href="https://aws.amazon.com/cloudfront/">cloudfront</a></li>
<li><code>AppCache</code> embed in <a href="http://symfony.com/doc/current/book/http_cache.html#symfony-reverse-proxy">Symfony</a></li>
</ul></li>
<li>application</li>
</ul>

<p>Its advantages:</p>

<ul>
<li>standard and widely adopted (highly documented on the web)</li>
<li>simple to set up (just add HTTP headers to Responses)</li>
<li>improves the number of Request per second (avoids calling the dynamic logic)</li>
</ul>

<p>Its drawbacks:</p>

<ul>
<li>requires an extra application (the Reverse Proxy)</li>
<li>does not reduce network calls from a Client point of view</li>
<li>needs more thinking (choose a strategy)</li>
</ul>

<h2 id="cacheable-response">Cacheable Response</h2>

<p>A Response can be cached if the incoming Request complies to the following rules:</p>

<ul>
<li>it has a <code>GET</code> or <code>HEAD</code> method</li>
<li>its URI is the same (that includes query parameters)</li>
<li>its headers listed in <code>Vary</code> are the same</li>
<li>it doesn't have a <code>Authorization</code> header</li>
</ul>

<p>For example, the following Request can produce cacheable Responses:</p>

<pre><code>GET /v1/items?page=1
Accept: application/json
Vary: Accept
</code></pre>

<p>Sending the following Request would produce a different cacheable Response:</p>

<pre><code>GET /v1/items?page=1
Accept: text/html
Vary: Accept
</code></pre>

<p>To be cacheable, a Response should also have one of the headers described in the
next section.</p>

<blockquote>
  <p><strong>Note</strong>: Headers specified in <code>Vary</code> will have their value stored in the
  Reverse Proxy. Sensitive data (e.g. API keys, password, etc) shouldn't be used
  as a cache key.</p>
</blockquote>

<h2 id="strategies">Strategies</h2>

<p>HTTP cache provides the possibility to choose different strategies:</p>

<ul>
<li>Expiration (timeout or expiration date)</li>
<li>Validation (modification date or hash comparison)</li>
</ul>

<h3 id="expiration">Expiration</h3>

<p>If a Response can be safely cached for a fixed period of time (e.g. 10 minutes),
use <code>Cache-Control</code> HTTP Header:</p>

<pre><code>HTTP/1.1 200 OK
Cache-Control: max-age=600
Content-Type: application/json

{"id":42,"name":"Arthur Dent"}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: the Reverse Proxy will add a header to the Response indicating its age:</p>

<pre><code>HTTP/1.1 200 OK
Age: 23
Cache-Control: max-age=600
Content-Type: application/json

{"id":42,"name":"Arthur Dent"}
</code></pre>
</blockquote>

<p>If a Response can be safely cached until a known date (e.g. the 30th of October 1998,
at 2:19pm), use <code>Expires</code> HTTP Header:</p>

<pre><code>HTTP/1.1 200 OK
Expires: Fri, 30 Oct 1998 14:19:41 GMT
Content-Type: application/json

{"id":42,"name":"Arthur Dent"}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: the HTTP date format is required.</p>
</blockquote>

<h3 id="validation">Validation</h3>

<p>The Reverse Proxy can serve stale cached copy and then asynchronously check with
the Application if it needs to be refreshed, using <code>Last-Modified</code> (a date) or/and
<code>ETag</code> (a hash) HTTP Headers:</p>

<pre><code>HTTP/1.1 200 OK
Last-Modified: Tue, 8 Sep 2015 13:35:23 GMT
ETag: a3e455afd
Content-Type: application/json

{"id":42,"name":"Arthur Dent"}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: the Reverse Proxy will add a header to requests with <code>If-Modified-Since</code>
  (a date) or/and <code>If-None-Match</code> (a hash):</p>

<pre><code>GET /v1/users/42 HTTP/1.1
If-Modified-Since: Tue, 8 Sep 2015 13:35:23 GMT
If-None-Match: a3e455afd
Accept: application/json
</code></pre>
  
  <p>If the Response shouldn't be updated, the Server should return a <code>304 Not Modified</code>
  Response.</p>
</blockquote>

<h2 id="cheatsheet">Cheatsheet</h2>

<h3 id="cache-control-values">Cache-Control values</h3>

<p>Keep in mind that <code>Cache-Control</code> header can be used by both the Reverse Proxy
and the Client (e.g. a browser) to cache the Response.</p>

<ul>
<li><code>max-age=[seconds]</code>: How long the Response should be cached</li>
<li><code>s-maxage=[seconds]</code>: Same as max-age but for Reverse Proxy only</li>
<li><code>private</code>: Only the Client can cache (default for authenticated Responses)</li>
<li><code>public</code>: Proxy can also cache (for authenticated Responses)</li>
<li><code>no-cache</code>: Refresh the cached copy (but still caches it)</li>
<li><code>no-store</code>: Response should not be cached anywhere (e.g. because it contains sensitive data)</li>
<li><code>must-revalidate</code>: Refresh the cached copy if it is stale</li>
<li><code>proxy-revalidate</code>: Same as must-revalidate but for Reverse Proxy only</li>
</ul>

<h3 id="http-date-format">HTTP date format</h3>

<p>The date MUST be represented in Greenwich Mean Time (GMT), with the following format: <code>D, d M Y H:i:s GMT</code></p>

<ul>
<li><code>D</code>: A textual representation of a day, three letters (<code>Mon</code> to <code>Sun</code>)</li>
<li><code>d</code>: Day of the month, 2 digits with leading zeros (<code>01</code> to <code>31</code>)</li>
<li><code>M</code>: A short textual representation of a month, three letters (<code>Jan</code> to <code>Dec</code>)</li>
<li><code>Y</code>: A full numeric representation of a year, 4 digits (e.g. <code>1999</code>, <code>2003</code>)</li>
<li><code>H</code>: 24-hour format of an hour with leading zeros (<code>00</code> to <code>23</code>)</li>
<li><code>i</code>: Minutes with leading zeros (<code>00</code> to <code>59</code>)</li>
<li><code>s</code>: Seconds, with leading zeros (<code>00</code> to <code>59</code>)</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>The <code>Expires</code> header is usually used to cache responses for application which are
updated on a regular date (synchronization with a source of the data).</p>

<p>The <code>Last-Modified</code> header is used when the data has an <code>updated_at</code> field we can
rely on.</p>

<p>The <code>Etag</code> header is used when we can safely create a hash of the response and compare
it with with the cached copy.</p>

<blockquote>
  <p><strong>Note</strong>: With <code>Last-Modified</code> and <code>Etag</code>, the Reverse Proxy serves first the
  cached Reponse and then check asynchronously with the application if it is stale.</p>
</blockquote>

<p>Finally the <code>Cache-Control</code> header is usually used in any other situation.</p>

<p>More readings about HTTP Cache can be found here:</p>

<ul>
<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13">HTTP 1.1 (RFC 2616), caching chapter</a></li>
<li><a href="http://2ndscale.com/rtomayko/2008/things-caches-do">Things caches do</a></li>
<li><a href="https://www.mnot.net/cache_docs/">Caching tutorial</a></li>
<li><a href="https://jakearchibald.com/2016/caching-best-practices/">Caching best practices</a></li>
</ul>
]]></content>
        </entry>
    </feed>