<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-09-10T10:14:49+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[phinx]]></title>
            <link href="/2015/08/05/phinx.html"/>
            <updated>2015-08-05T00:00:00+01:00</updated>
            <id>/2015/08/05/phinx.html</id>
            <content type="html"><![CDATA[<p><a href="https://phinx.org/">phinx</a> is a lightweight migration library, completly decoupled
from any framework and libraries. In its most simple form, it allows you to write SQL
statements to upgrade and downgrade your schema, or insert / delete data.</p>

<h2 id="installation">Installation</h2>

<p>First of all, we need to install it using <a href="https://getcomposer.org/download/">Composer</a>:</p>

<pre><code>composer require robmorgan/phinx:^0.4
</code></pre>

<p>With this we get a phar that can be run:</p>

<pre><code>phinx
</code></pre>

<blockquote>
  <p><strong>Tip</strong>: make your vendor's binaries available by adding <code>vendor/bin</code> to your <code>$PATH</code>.
  <code>export PATH="vendor/bin:$PATH"</code>.</p>
</blockquote>

<p>Then we need to configure the settings:</p>

<pre><code class="php">&lt;?php
// File: phinx.php

$parameters = \Symfony\Component\Yaml\Yaml::parse(file_get_contents(__DIR__.'/app/config/parameters.yml'));

return array(
    'paths' =&gt; array(
        'migrations' =&gt; __DIR__.'/migrations'
    ),
    'environments' =&gt; array(
        'default_migration_table' =&gt; 'migration',
        'default_database' =&gt; 'prod',
        'prod' =&gt; array(
            'adapter' =&gt; 'pgsql', // Could also be "mysql", "sqlite" or "sqlsrv"
            'host' =&gt; $parameters['parameters']['database_host'],
            'name' =&gt; $parameters['parameters']['database_name'],
            'user' =&gt; $parameters['parameters']['database_user'],
            'pass' =&gt; $parameters['parameters']['database_pass'],
            'port' =&gt; $parameters['parameters']['database_port'],
            'charset' =&gt; 'utf8',
        ),
        'test' =&gt; array(
            'adapter' =&gt; 'pgsql',
            'host' =&gt; $parameters['parameters']['database_host'],
            'name' =&gt; $parameters['parameters']['database_name'].'_test',
            'user' =&gt; $parameters['parameters']['database_user'],
            'pass' =&gt; $parameters['parameters']['database_pass'],
            'port' =&gt; $parameters['parameters']['database_port'],
            'charset' =&gt; 'utf8',
        ),
    ),
);
</code></pre>

<p>The configuration could also be written in YAML, here I used PHP to be able to share
the database configuration with the application's one.</p>

<h2 id="usage-example">Usage example</h2>

<p>Migration files can be bootstrapped using the command:</p>

<pre><code>phinx create FirstVersion
</code></pre>

<p>Which results in the following file (<code>migrations/20150805201245_first_version.php</code>):</p>

<pre><code class="php">&lt;?php

use Phinx\Migration\AbstractMigration;

class FirstVersion extends AbstractMigration
{
    public function change()
    {
    }
}
</code></pre>

<p>In the <code>change</code> method we need to get a <code>Table</code> object using <code>$this-&gt;table('table_name')</code>
and then use it to describe the changes in the schema: phinx is then able to figure out
how to reverse them if necessary.</p>

<p>If you'd rather write SQL queries directly you need to remove <code>change</code> and define
a <code>up</code> and a <code>down</code> method. In them you can use <code>$this-&gt;query('SQL')</code> to execute
your queries.</p>

<p>Example:</p>

<pre><code class="php">&lt;?php

use Phinx\Migration\AbstractMigration;

class FirstVersion extends AbstractMigration
{
    public function up()
    {
        $this-&gt;query('CREATE TABLE my_table;');
    }

    public function down()
    {
        $this-&gt;query('DROP TABLE my_table;');
    }
}
</code></pre>

<p>Migrating an application then becomes as simple as:</p>

<pre><code>phinx migrate
</code></pre>

<p>And rolling back:</p>

<pre><code>phinx rollback
</code></pre>

<h2 id="tips">Tips</h2>

<p>Time for the personal tips!</p>

<p>Using <a href="http://www.doctrine-project.org/projects/migrations.html">Doctrine Migrations</a>
is fine when using Doctrine ORM, but for the rest (including Doctrine DBAL) I'd rather use phinx.</p>

<p>While <code>Table</code> allows to write portable migrations and saves you the time of writing the <code>down</code> method,
I'd advise you to write directly SQL queries: it's a layer less to learn and it will be consistent
with the migrations where you insert / update data.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Migration libraries are all very similar, the nice touch of phinx is that it's not
coupled to any framework and it doesn't require any integration.</p>

<p>Give it a try!</p>
]]></content>
        </entry>
    </feed>