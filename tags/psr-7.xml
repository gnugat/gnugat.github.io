<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-09-10T10:14:49+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Beyond PSR-7]]></title>
            <link href="/2015/11/11/beyond-psr7.html"/>
            <updated>2015-11-11T00:00:00+00:00</updated>
            <id>/2015/11/11/beyond-psr7.html</id>
            <content type="html"><![CDATA[<p><a href="http://www.php-fig.org/psr/psr-7/">PSR-7</a> is a standard providing interfaces for
HTTP messages.</p>

<p>The main package, <a href="https://packagist.org/packages/psr/http-message">psr/http-message</a>,
has a <a href="https://packagist.org/providers/psr/http-message-implementation">few implementations</a>
but mainly it comes down to:</p>

<ul>
<li><a href="https://packagist.org/packages/zendframework/zend-diactoros">Zend Diactoros</a></li>
<li><a href="https://packagist.org/packages/guzzlehttp/psr7">Guzzle PSR-7</a></li>
</ul>

<p>The standard interfaces leave little room for implementation details by forcing
immutability and streams. It mainly leaves freedom in the way implementations
are constructed though.</p>

<blockquote>
  <p><strong>Note</strong>: Beyond that, Diactoros and Guzzle still differ slightly.</p>
</blockquote>

<p>It's a pity we didn't end up directly with standard value objects, but we'll have
to do with those interfaces for now. So now, what's the next step for PSR-7?</p>

<h2 id="middlewares">Middlewares</h2>

<p>Middlewares have been around for a while now (in PHP as well as in other languages).
The idea is to have:</p>

<ol>
<li>an interface</li>
<li>an implementation considered to be the basic one</li>
<li>implementations that wraps a call to another one</li>
</ol>

<p>Let's take <a href="http://symofny.com">Symfony</a>'s <code>HttpKernelInterface</code> as an example:</p>

<pre><code class="php">&lt;?php

namespace Symfony\Component\HttpKernel\HttpKernelInterface;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

interface HttpKernelInterface
{
    const MASTER_REQUEST = 1;
    const SUB_REQUEST = 2;

    // @return Response
    public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = false);
}
</code></pre>

<p>Symfony provides a <code>HttpKernel</code> implementation to take care of creating a
<code>Response</code> for the given <code>Request</code>. Middlewares would wrap the call to
<code>HttpKernel#handle</code> with their own logic, which could be:</p>

<ul>
<li><a href="https://github.com/gnugat/knowledge/blob/master/memo/http-cache.md">HTTP cache</a>, save the Response for a given Request when possible and serve the copy until it's stale</li>
<li><a href="http://williamdurand.fr/Negotiation/">Content Negotiation</a>, guess how to format the Response body based on the <code>Accept</code> header</li>
<li>Database transaction, with the possibility to rollback on error (or always rollback for tests)</li>
</ul>

<p>Here's an example to always rollback database transactions with <a href="/2015/08/06/pomm-foundation.html">Pomm Foundation</a>.</p>

<pre><code class="php">&lt;?php

namespace Acme\Fortune\Bridge\HttpKernel;

use PommProject\Foundation\QueryManager\QueryManagerInterface;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class RollbackKernel implements HttpKernelInterface
{
    private $httpKernel;
    private $queryManager;

    public function __construct(HttpKernelInterface $httpKernel, QueryManagerInterface $queryManager)
    {
        $this-&gt;httpKernel = $httpKernel;
        $this-&gt;queryManager = $queryManager;
    }

    // @return Response
    public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = false)
    {
        $this-&gt;queryManager-&gt;query('START TRANSACTION');
        $response = $this-&gt;httpKernel-&gt;handle($request, $type, $catch);
        $this-&gt;queryManager-&gt;query('ROLLBACK');

        return $response;
    }
}
</code></pre>

<p>The <a href="http://stackphp.com/">Stack</a> initiative provides visibility on those <code>HttpKernelInterface</code> middlewares.</p>

<blockquote>
  <p><strong>Note</strong>: Stack is inspired by Ruby's <a href="http://rack.github.io/">rack</a>.</p>
</blockquote>

<h2 id="psr-7-middelwares">PSR-7 Middelwares</h2>

<p>So the next step would be to provide a standard interface to allow PSR-7 middlewares.
Of course such a standard isn't straigthforward as there are many ways to create middlewares.</p>

<h3 id="1.-take-request%2C-return-response">1. Take request, return response</h3>

<p>Similar to <code>HttpKernelInterface</code>, this one just receives a <code>RequestInterface</code>
and returns a <code>ResponseInterface</code>:</p>

<pre><code class="php">&lt;?php

use Psr\Message\RequestInterface;
use Psr\Message\ResponseInterface;

interface RequestHandler
{
    // @return ResponseInterface
    public function handleRequest(RequestInterface $request);
}
</code></pre>

<p>Names can be debated, but the point here is that calling the next middleware is
up to the implementation (can use dependency injection).</p>

<p><a href="http://docs.php-http.org/en/latest/httplug/introduction.html">Httplug</a> is a good example
using this implementation.</p>

<h3 id="2.-take-request%2C-response-and-next">2. Take request, response and next</h3>

<p>Another interface commonly encountered forces the way of managing the next middleware:</p>

<pre><code class="php">&lt;?php

use Psr\Message\RequestInterface;
use Psr\Message\ResponseInterface;

interface RequestHanler
{
    public function handleRequest(
        RequestInterface $request,
        ResponseInterface $response,
        RequestHanler next = null
    );
}
</code></pre>

<p>This one requires the response to be passed as an argument, as well as the next
middleware.</p>

<p>A good example using this implementation would be <a href="https://github.com/zendframework/zend-stratigility/blob/master/doc/book/middleware.md">Zend Stratigility</a></p>

<h2 id="conclusion">Conclusion</h2>

<p>Middlewares are really powerful and PSR-7 would benefit greatly from it, but we're
missing a standard for it. As long as it will be missing, we're going to assist to
the creation of a wide range of "PSR-7 middlewares",  all incompatible with each others.</p>

<p>Since this seems inevitable, maybe we should instead try to figure out a new standard
that would allow to compose all those middlewares?</p>

<p><a href="https://xkcd.com/927/"><img src="https://imgs.xkcd.com/comics/standards.png" alt="XKCD explaining how standards proliferate" /></a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Diactoros (PSR-7)]]></title>
            <link href="/2015/08/07/diactoros-psr7.html"/>
            <updated>2015-08-07T00:00:00+01:00</updated>
            <id>/2015/08/07/diactoros-psr7.html</id>
            <content type="html"><![CDATA[<p><a href="https://github.com/zendframework/zend-diactoros">Zend Diactoros</a> is a lightweight
library providing implementations for <a href="http://www.php-fig.org/psr/psr-7/">PSR-7 interfaces</a>.</p>

<p>It can be installed using <a href="https://getcomposer.org/download/">Composer</a>:</p>

<pre><code>composer require zendframework/zend-diactoros:^1.0
</code></pre>

<h2 id="example">Example</h2>

<p>We'd like to retrieve data from remote endpoints, using our internal <code>RequestHandler</code>:</p>

<pre><code class="php">&lt;?php

namespace Vendor\Project;

use Psr\Http\Message\RequestInterface;

interface RequestHandler
{
    // @return \Psr\Http\Message\ResponseInterface
    public function handle(RequestInterface $request);
}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: For the sake of our example we use this interface, but in your application
  you'd use an actual HTTP client (e.g. <a href="http://guzzle.readthedocs.org/en/latest/">Guzzle</a>).</p>
</blockquote>

<p><code>RequestHandler</code> expects a <code>Request</code> parameter, so we're going to build it:</p>

<pre><code class="php">&lt;?php

namespace Vendor\Project;

use Zend\Diactoros\Request;
use Zend\Diactoros\Stream;

class MemberGateway
{
    private $requestHandler;
    private $username;
    private $password;

    public function __construct(RequestHandler $requestHandler, $username, $password)
    {
        $this-&gt;requestHandler = $requestHandler;
        $this-&gt;username = $username;
        $this-&gt;password = $password;
    }

    public function findOne($id)
    {
        $request = new Request('http://example.com/members/'.$id, 'GET', 'php://memory', array(
            'Authorization' =&gt; 'Basic '.base64_encode($this-&gt;username.':'.$this-&gt;password),
        ));
        $item = json_decode($this-&gt;requestHandler-&gt;handle($request)-&gt;getBody()-&gt;__toString(), true);

        return array(
            'id' =&gt; $item['id'],
            'name' =&gt; $item['name'],
            'description' =&gt; $item['description'],
        );
    }

    public function createOne($name, $description)
    {
        $body = new Stream('php://memory', 'w');
        $body-&gt;write(json_encode(array(
            'name' =&gt; $name,
            'description' =&gt; $description,
        )));
        $request = new Request('http://example.com/members/'.$id, 'GET', $body, array(
            'Authorization' =&gt; 'Basic '.base64_encode($this-&gt;username.':'.$this-&gt;password),
        ));
        $item = json_decode($this-&gt;requestHandler-&gt;handle($request)-&gt;getBody()-&gt;__toString(), true);

        return array(
            'id' =&gt; $item['id'],
            'name' =&gt; $item['name'],
            'description' =&gt; $item['description'],
        );
    }
}
</code></pre>

<p>The body of <code>Request</code> and <code>Response</code> is wrapped in a <code>Stream</code> (as specified in PSR-7).</p>

<h2 id="tips">Tips</h2>

<p>If the <code>Request</code> body should be empty, simply pass <code>php://memory</code>.</p>

<p>If the <code>Response</code> has a body, we can convert the <code>Stream</code> into a string using <code>__toString</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Zend Diactoros is becoming the de facto PSR-7 implementation, for example it's
used in <a href="http://symfony.com/blog/psr-7-support-in-symfony-is-here">Symfony</a>.</p>

<p>You should give it a try!</p>
]]></content>
        </entry>
    </feed>