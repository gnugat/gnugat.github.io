<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2024-09-11T19:30:10+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Symfony Differently - part 3: Conclusion]]></title>
            <link href="/2015/08/02/sf-differently-part-3-conclusion.html"/>
            <updated>2015-08-02T00:00:00+01:00</updated>
            <id>/2015/08/02/sf-differently-part-3-conclusion.html</id>
            <content type="html"><![CDATA[<p>This series isn't really working for me, so I've decided to conclude it prematurely.
Have a look at the first ones:</p>

<ol>
<li><a href="/2015/06/03/sf-differently-part-1-introduction.html">Introduction</a></li>
<li><a href="/2015/06/10/sf-differently-part-2-bootstrap.html">Bootstrap</a></li>
</ol>

<p>In this article we'll see a series of optimizations with their impact. Then we'll
conclude that Caching is actually better, let's see those figures!</p>

<h2 id="tools">Tools</h2>

<p>The application is built with the Symfony Standard Edition and Doctrine ORM's QueryBuilder.
Composer's configuration has been tweaked to use PSR-4 and to not autoload tests.
Also Composer has been run with the <code>--optimize-autoloader</code> option.</p>

<p>Tests are done using <a href="https://httpd.apache.org/docs/2.2/programs/ab.html">ab</a>
(with 10 concurrent clients for 10 seconds), on a different server than the application's
one.</p>

<p>Also, we're using PHP 5.5 and Symfony 2.7.</p>

<h2 id="optimizations">Optimizations</h2>

<p>The application would initially serve: <strong>22 requests / seconds</strong>.</p>

<p>By removing unused dependencies, we get <strong>23 requests / seconds</strong>.</p>

<blockquote>
  <p>Note</p>
  
  <p>Removed:</p>
  
  <ul>
  <li>AsseticBundle</li>
  <li>SensioDistributionBundle (only from <code>AppKernel</code>, the dependency is kept to generate <code>app/bootstrap.php.cache</code>)</li>
  <li>SensioGeneratorBundle</li>
  <li>SwiftmailerBundle</li>
  <li>TwigBundle</li>
  <li>WebProfilerBundle</li>
  </ul>
  
  <p>Also, the following components have been disabled:</p>
  
  <ul>
  <li>Form</li>
  <li>Validation</li>
  </ul>
</blockquote>

<p>By switching from Doctrine ORM's Query Builder to Doctrine DBAL's one: <strong>28 requests / seconds</strong>.</p>

<p>By <a href="http://labs.octivi.com/mastering-symfony2-performance-internals/">adding classes to compile</a>:
<strong>29 requests / seconds</strong>.</p>

<p>By defining controllers as services: <strong>30 requests / seconds</strong>.</p>

<p>This sums up to an increase of 36%.</p>

<h2 id="how-about-using-http-cache%3F">How about using HTTP cache?</h2>

<p>By setting a 10 seconds HTTP cache (using <a href="http://foshttpcachebundle.readthedocs.org/en/latest/">FOSCacheBundle</a>),
on top of the previous optimizations , we get <strong>160 requests / seconds</strong> (an increase of 430%).</p>

<p>And that's by using Symfony's built in reverse proxy, imagine what we could get with varnish!</p>

<h2 id="conclusion">Conclusion</h2>

<p>While optimizations are fun, they don't bring much value. The main bottlenecks
are usually the autoloading, database/network transactions and the number of functions
called.</p>

<p>On the other hand, using a reverse proxy is quite simple and does pay off!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Symfony Differently - part 2: Bootstrap]]></title>
            <link href="/2015/06/10/sf-differently-part-2-bootstrap.html"/>
            <updated>2015-06-10T00:00:00+01:00</updated>
            <id>/2015/06/10/sf-differently-part-2-bootstrap.html</id>
            <content type="html"><![CDATA[<p>This is the second article of the <a href="https://symfony.com">Symfony</a> Differently series,
Have a look at the first one: <a href="/2015/06/03/sf-differently-part-1-introduction.html">Introduction</a>.</p>

<p>Our goal in this post is to bootstrap an application to then create a search endpoint for items.
We've decided to use Symfony for a single reason: our company Acme used it since the begining
and the API developers team has Symfony and PHP skills.</p>

<blockquote>
  <p><strong>Note</strong>: Most frameworks have a good community support, a strong documentation,
  similar features and many developers available on the market. We'll see the
  importance of a framework performances in the following articles, but the point
  here is that the choice should mainly rely on skills we have internally
  (and the ones we can acquire).</p>
</blockquote>

<h2 id="symfony-standard-edition">Symfony Standard Edition</h2>

<p>The first step is to use <a href="http://getcomposer.com/">Composer</a>:</p>

<pre><code>composer create-project symfony/framework-standard-edition items
</code></pre>

<p>This will create a directory structure for our project, download a set of third
party libraries and ask us to set a bunch of configuration parameters. In this
series we'll use a Postgres database, so we need to edit <code>app/config/config.yml</code>:</p>

<pre><code># ...

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_pgsql

# ...
</code></pre>

<p>Once finished we'll save our work using Git:</p>

<pre><code>cd items
git init
git add -A
git ci -m 'Created a standard Symfony application'
</code></pre>

<blockquote>
  <p><strong>Note</strong>: We can also use the <a href="http://symfony.com/doc/current/book/installation.html#installing-the-symfony-installer">Symfony Installer</a>
  to create new projects.</p>
</blockquote>

<h2 id="configuring-apache">Configuring Apache</h2>

<p>For the same reason we chose Symfony we've decided to use Apache for our web servers
(it's the one used for all previous projects).</p>

<blockquote>
  <p><strong>Note</strong>: By providing Nginx trainings and recruiting devops used to, it Acme
  could change its technology stack. The only rule when switching to another
  technology is to stick to it in order to avoid having too many different technologies.</p>
</blockquote>

<p>We need to create a virtual host first by creating the <code>/etc/apache2/sites-available/items.conf</code>
file:</p>

<pre><code>&lt;VirtualHost *:80&gt;
    ServerName items.local

    DocumentRoot /home/foobar/items/web

    ErrorLog "/home/foobar/items/app/logs/apache_errors.log"
    CustomLog "/home/foobar/items/app/logs/apache_accesses.log" common

    &lt;Directory /home/foobar/items/web&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride all
        Require all granted
        Order allow,deny
        allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>Apache will require access to the logs and cache directories, as well as our user.
The easiest way to avoid permission issues is to change Apache's user and group
to ours in <code>/etc/apache2/envvars</code>:</p>

<pre><code>export APACHE_RUN_USER=foobar
export APACHE_RUN_GROUP=foobar
</code></pre>

<p>We'll aslo need to add the hostname to our <code>/etc/hosts</code> file:</p>

<pre><code>echo '127.0.0.1 items.local' | sudo tee -a /etc/hosts
</code></pre>

<p>Finally we have to enable the website and reload Apache to take the configuration into account:</p>

<pre><code>sudo a2ensite items
sudo service apache2 reload
</code></pre>

<p>We now should be able to see the message "Homepage" when browsing http://items.local/app_dev.php/app/example</p>

<h2 id="tests">Tests</h2>

<p>A nice tweak to do is to move tests in a separate directory, allowing Composer to only
autoload test class in development environments. This can be done by changing <code>composer.json</code>
as follow:</p>

<pre><code>{
    "name": "acme/items",
    "license": "private",
    "type": "project",
    "description": "Specific APIs for items",
    "autoload": {
        "psr-4": { "AppBundle\\": "src/AppBundle" }
    },
    "autoload-dev": {
        "psr-4": { "AppBundle\\Tests\\": "tests/" }
    },
    "require": {
        "php": "&gt;=5.3.3",
        "symfony/symfony": "~2.7@beta",
        "doctrine/orm": "~2.2,&gt;=2.2.3,&lt;2.5",
        "doctrine/dbal": "&lt;2.5",
        "doctrine/doctrine-bundle": "~1.4",
        "symfony/assetic-bundle": "~2.3",
        "symfony/swiftmailer-bundle": "~2.3",
        "symfony/monolog-bundle": "~2.4",
        "sensio/distribution-bundle": "~3.0,&gt;=3.0.12",
        "sensio/framework-extra-bundle": "~3.0,&gt;=3.0.2",
        "incenteev/composer-parameter-handler": "~2.0"
    },
    "require-dev": {
        "sensio/generator-bundle": "~2.3"
    },
    "scripts": {
        "post-install-cmd": [
            "Incenteev\\ParameterHandler\\ScriptHandler::buildParameters",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::buildBootstrap",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::clearCache",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::installAssets",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::installRequirementsFile",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::removeSymfonyStandardFiles",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::prepareDeploymentTarget"
        ],
        "post-update-cmd": [
            "Incenteev\\ParameterHandler\\ScriptHandler::buildParameters",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::buildBootstrap",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::clearCache",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::installAssets",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::installRequirementsFile",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::removeSymfonyStandardFiles",
            "Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::prepareDeploymentTarget"
        ]
    },
    "extra": {
        "symfony-app-dir": "app",
        "symfony-web-dir": "web",
        "symfony-assets-install": "relative",
        "incenteev-parameters": {
            "file": "app/config/parameters.yml"
        }
    }
}
</code></pre>

<p>Since we've decided to move vendor binaries back to <code>vendor/bin</code>, we can un-ignore
the <code>bin</code> directory by editing <code>.gitignore</code>:</p>

<pre><code>/web/bundles/
/app/bootstrap.php.cache
/app/cache/*
/app/config/parameters.yml
/app/logs/*
!app/cache/.gitkeep
!app/logs/.gitkeep
/app/phpunit.xml
/build/
/vendor/
/composer.phar
</code></pre>

<p>To make it official, we need to run the following commands:</p>

<pre><code>rm -rf bin
composer update
</code></pre>

<blockquote>
  <p><strong>Note</strong>: In production, we'll need to run <code>composer install --no-dev --optimize-autoloader</code></p>
</blockquote>

<p>Our system/functional tests will involve database queries which can make the test suite
unreliable. To fix this, we'll create a "middleware" that wraps our <code>AppKernel</code> in a
database transaction and rolls it back after each requests:</p>

<p>To do so, we can create the following <code>app/RollbackKernel.php</code>:</p>

<pre><code class="php">&lt;?php
// File: app/RollbackKernel.php

use Doctrine\DBAL\Connection;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\HttpKernelInterface;

class RollbackKernel implements HttpKernelInterface
{
    private $app;
    private $connection;

    public function __construct(HttpKernelInterface $app, Connection $connection)
    {
        $this-&gt;app = $app;
        $this-&gt;connection = $connection;
    }

    public static function make()
    {
        $kernel = new \AppKernel('test', false);
        $kernel-&gt;boot();
        $connection = $kernel-&gt;getContainer()-&gt;get('doctrine.dbal.default_connection');

        return new self($kernel, $connection);
    }

    public function handle(Request $request, $type = HttpKernelInterface::MASTER_REQUEST, $catch = true)
    {
        $this-&gt;connection-&gt;beginTransaction();
        $response = $this-&gt;app-&gt;handle($request, $type, $catch);
        $this-&gt;connection-&gt;rollback();

        return $response;
    }
}
</code></pre>

<p>To be able to use <code>RollbackKernel</code> in our tests we need to make it available by
creating the following <code>app/bootstrap_test.php</code>:</p>

<pre><code class="php">&lt;?php
// File: app/bootstrap_test.php

require __DIR__.'/bootstrap.php.cache';
require __DIR__.'/AppKernel.php';
require __DIR__.'/RollBackKernel.php';
</code></pre>

<p>Then we can configure PHPUnit to use it by editing <code>app/phpunit.xml.dist</code>:</p>

<pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!-- http://phpunit.de/manual/current/en/appendixes.configuration.html --&gt;
&lt;phpunit backupGlobals="false" colors="true" syntaxCheck="false" bootstrap="bootstrap_test.php"&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="Functional Tests"&gt;
            &lt;directory&gt;../tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;
</code></pre>

<p>Finally we'll install <a href="http://phpspec.net/">phpspec</a> with <a href="http://memio.github.io/spec-gen">SpecGen</a>
for our unit tests:</p>

<pre><code>composer require --dev phpunit/phpunit:~4.6 phpspec/phpspec:~2.2 memio/spec-gen:~0.3
echo 'extensions:' &gt; phpspec.yml
echo '  - Memio\SpecGen\MemioSpecGenExtension' &gt;&gt; phpspec.yml
</code></pre>

<p>And now we're ready to test our application! Let's save our work:</p>

<pre><code>git add -A
git commit -m 'Prepared application for tests'
</code></pre>

<h2 id="scripts">Scripts</h2>

<p>There's 3 common tasks we'll be doing as developers with our application:</p>

<ul>
<li>build it for our development environment</li>
<li>test it locally or in a Continuous Integration environment</li>
<li>deploy it to production</li>
</ul>

<p>In order to automate those in a simple way, we've decided to create 3 scripts:
<code>bin/build.sh</code>, <code>bin/deploy.sh</code> and <code>bin/test.sh</code>, but for this series we'll only
take care of <code>build</code> and <code>test</code>.</p>

<p>The build steps should reinitialize the database and Symfony's cache, for this
we'll need Doctrine Fixtures and Doctrine Migrations:</p>

<pre><code>composer require doctrine/doctrine-fixtures-bundle:~2.2
composer require doctrine/migrations:~1.0@alpha
composer require doctrine/doctrine-migrations-bundle:~1.0
</code></pre>

<p>Then we have to register them in <code>app/AppKernel.php</code>:</p>

<pre><code class="php">&lt;?php

use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Config\Loader\LoaderInterface;

class AppKernel extends Kernel
{
    public function registerBundles()
    {
        $bundles = array(
            new Symfony\Bundle\FrameworkBundle\FrameworkBundle(),
            new Symfony\Bundle\SecurityBundle\SecurityBundle(),
            new Symfony\Bundle\TwigBundle\TwigBundle(),
            new Symfony\Bundle\MonologBundle\MonologBundle(),
            new Symfony\Bundle\SwiftmailerBundle\SwiftmailerBundle(),
            new Symfony\Bundle\AsseticBundle\AsseticBundle(),
            new Doctrine\Bundle\DoctrineBundle\DoctrineBundle(),
            new Sensio\Bundle\FrameworkExtraBundle\SensioFrameworkExtraBundle(),
            new AppBundle\AppBundle(),
        );

        if (in_array($this-&gt;getEnvironment(), array('dev', 'test'))) {
            $bundles[] = new Doctrine\Bundle\FixturesBundle\DoctrineFixturesBundle();
            $bundles[] = new Doctrine\Bundle\MigrationsBundle\DoctrineMigrationsBundle();
            $bundles[] = new Symfony\Bundle\DebugBundle\DebugBundle();
            $bundles[] = new Symfony\Bundle\WebProfilerBundle\WebProfilerBundle();
            $bundles[] = new Sensio\Bundle\DistributionBundle\SensioDistributionBundle();
            $bundles[] = new Sensio\Bundle\GeneratorBundle\SensioGeneratorBundle();
        }

        return $bundles;
    }

    public function registerContainerConfiguration(LoaderInterface $loader)
    {
        $loader-&gt;load($this-&gt;getRootDir().'/config/config_'.$this-&gt;getEnvironment().'.yml');
    }
}
</code></pre>

<p>Now we can write the following <code>bin/build.sh</code> script:</p>

<pre><code>#!/usr/bin/env sh

echo ''
echo '// Building development environment'


rm -rf app/cache/* app/logs/*

composer --quiet --no-interaction install --optimize-autoloader &gt; /dev/null

php app/console --quiet doctrine:database:drop --force &gt; /dev/null 2&gt;&amp;1
php app/console --quiet doctrine:database:create
php app/console --no-interaction --quiet doctrine:migrations:migrate
php app/console --no-interaction --quiet doctrine:fixtures:load --fixtures=src

echo ''
echo ' [OK] Development environment built'
echo ''
</code></pre>

<p>The test steps should be similar, in addition they will run the test suites and
check for coding standards. We can install PHP CS Fixer for this:</p>

<pre><code>composer require --dev fabpot/php-cs-fixer:~1.6
</code></pre>

<p>Here's the <code>bin/test.sh</code> script:</p>

<pre><code>#!/usr/bin/env sh

echo ''
echo '// Building test environment'

rm -rf app/cache/test app/logs/*test.log

composer --quiet --no-interaction install --optimize-autoloader  &gt; /dev/null
php app/console --env=test --quiet cache:clear


php app/console --env=test --no-debug --quiet doctrine:database:drop --force &gt; /dev/null 2&gt;&amp;1
php app/console --env=test --no-debug --quiet doctrine:database:create
php app/console --env=test --no-debug --no-interaction --quiet doctrine:migrations:migrate
php app/console --env=test --no-debug --no-interaction --quiet doctrine:fixtures:load --fixtures=src

echo ''
echo ' [OK] Test environment built'
echo ''

vendor/bin/phpunit -c app &amp;&amp; vendor/bin/phpspec --no-interaction run --format=dot &amp;&amp; vendor/bin/php-cs-fixer fix --dry-run --config=sf23 .
</code></pre>

<p>With this we can start the tickets assigned to us, we can commit the changes:</p>

<pre><code>chmod +x bin/*.sh
git add -A
git commit -m 'Created build and test scripts'
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>Acme's technology stack is composed of Apache2, PostgreSQL, Symfony, PHPUnit and phpspec.
In order to ake sure that anyone in the team or any new comers can maintain this new
application in the future, we've chosen to stay consistent with the rest.</p>

<p>In the next article, we'll create the search items endpoint in a pragmatic way.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Symfony Differently - part 1: Introduction]]></title>
            <link href="/2015/06/03/sf-differently-part-1-introduction.html"/>
            <updated>2015-06-03T00:00:00+01:00</updated>
            <id>/2015/06/03/sf-differently-part-1-introduction.html</id>
            <content type="html"><![CDATA[<p><a href="https://symfony.com">Symfony</a> is an amazing HTTP framework which powers
<a href="http://labs.octivi.com/handling-1-billion-requests-a-week-with-symfony2/">high traffic websites</a>.
Performance shouldn't be a concern when first creating a website, because between
the time it is launched and the time it actually has a high traffic many things
that we didn't expect in the first days will happen:</p>

<ul>
<li>requirements will change</li>
<li>user behavior will change</li>
<li>even the team can change</li>
</ul>

<p>Optimizing applications has an impact over maintenance, and making it harder to change
right from the begining might not be the best option. However when the need of performance
actually arises, we need to tackle it.</p>

<p>This series of articles is about this specific moment, and how to tackle it in a pragmatic way.</p>

<blockquote>
  <p><strong>Spoiler Alert</strong>: It will feature a section where we optimize our application step by step,
  with a monitoring of the impact on performance. We'll see that those don't make a big
  difference, which is why those concerns shouldn't be addressed from day 1.</p>
</blockquote>

<p>First, let's have a look at the big picture. Please note that the approach we use
here is only one amongst many (every need is different, it might not be the best in every situations).</p>

<h2 id="the-project">The project</h2>

<p>For our examples, we'll pretend to be the Acme Company which powers half the planet
in almost every aspect of our lives. Performance isn't just a concern, it has become
a reality.</p>

<blockquote>
  <p><strong>Note</strong>: Those examples are all made up, but they're based on real experience.</p>
</blockquote>

<p>We've analysed our market and we'd like to have the following new feature:</p>

<pre><code>As a customer, I'd like to buy an item
</code></pre>

<p>During a meeting, we've come up with the following example:</p>

<pre><code>Given a "fruit" category
When I pick a "banana"
Then it should be ordered
</code></pre>

<h2 id="the-team">The team</h2>

<p>In the first days of Acme, we only had a few developers which were full stack. It
worked quite well but we've grown so much that we had to recruit more specialized
profiles with a frontend team and an API one: it allowed us to parallelize the work.</p>

<h2 id="the-architecture">The architecture</h2>

<p>Frontend applications that live in the customer's browser have been chosen because:</p>

<ul>
<li>they are extremely responsive</li>
<li>they provide a richer User eXperience</li>
<li>they have a lower server consumption</li>
</ul>

<p>In the early days of Acme there was a single big application, but with the number
of customer growing and asking features specific to their need, it failed us hard
costing us Money, Customers and Developers.
Now each frontend applications talk to a dedicated API.</p>

<p>The dedicated APIs mix and match data coming from another layer of specific APIs.
Those basically provide Create Read Update Delete and Search (CRUDS) access to
their own data storage.</p>

<blockquote>
  <p><strong>Note</strong>: We've decided to have two layers of APIs in order to avoid mixing
  features specific to a customer in an endpoint used by everyone.</p>
</blockquote>

<p>From the Use Stories, we've identified two types of data: <code>item</code> related ones
and <code>order</code> related one.
We've decided to create the following applications:</p>

<ul>
<li><code>acme/order-items-front</code>, the frontend application</li>
<li><code>acme/order-items-api</code> the dedicated API</li>
<li><code>acme/items</code>, an API specific to the <code>item</code> and <code>item_category</code> tables</li>
<li><code>acme/orders</code>, an API specific to the <code>order</code> table</li>
</ul>

<p><img src="http://yuml.me/c0591d90" alt="Diagram" /></p>

<p>In this series, we'll focus on the creation of the Search endpoint in <code>acme/items</code>.</p>

<h2 id="the-task">The task</h2>

<p>The Search endpoint should allow:</p>

<ul>
<li>pagination of items, using <code>page</code> and <code>per_page</code> parameters</li>
<li>filtering of items, using column name with value for parameters</li>
<li>ordering items, using a <code>sort</code> parameter</li>
</ul>

<p>In this series, we'll focus on paginating items.</p>

<p>Here's a valid <code>Request</code> sample:</p>

<pre><code>GET /v1/items?page=2&amp;per_page=1 HTTP/1.1
</code></pre>

<p>It should return a <code>Response</code> similar to:</p>

<pre><code>HTTP/1.1 200 OK
Content-Type: application/json

{"data":[{"id":42,"name":"banana","category_id":23}],"page":{"current_page":2,"per_page":1,"total_elements":2,"total_pages":2}}
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>Our Acme mega corporation needs a new feature and we've decided to implement it
by creating a frontend, its dedicated API which mix and match data coming from two
new specific APIs.</p>

<p>The choice of this architecture has been made because it solved issues encountered
in Acme's past, when we had a single big application.</p>

<p>In the next article we'll bootstrap a Symfony application to create an endpoint to search
for items.</p>

<p>In the mean time if you're interrested in creating APIs in a pragmatic way you can
read <a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api">the following article</a>.
If you're wondering why Acme didn't use this approach from the begining you might
want to read <a href="http://martinfowler.com/bliki/MonolithFirst.html">the following article</a>.</p>
]]></content>
        </entry>
    </feed>