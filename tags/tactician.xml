<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2024-09-11T19:30:10+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Tactician]]></title>
            <link href="/2015/09/09/tactician.html"/>
            <updated>2015-09-09T00:00:00+01:00</updated>
            <id>/2015/09/09/tactician.html</id>
            <content type="html"><![CDATA[<p>Just like <a href="/2015/08/04/simple-bus.html">SimpleBus</a>,
<a href="https://tactician.thephpleague.com/">Tactician</a> is a lightweight library created by
<a href="http://rosstuck.com/">Ross Tuck</a> allowing you to use the Command Bus design pattern
in your applications.</p>

<blockquote>
  <p><strong>Note</strong>: Command Bus is often used to comply to [CQRS](/2015/08/25/cqrs.html, but not only.</p>
</blockquote>

<h2 id="usage-example">Usage example</h2>

<p>Here's how to install Tactician:</p>

<pre><code>composer require league/tactician:^0.6
</code></pre>

<p>Then we have to associate a Command to a CommandHandler:</p>

<pre><code class="php">&lt;?php

use League\Tactician\Setup\QuickStart;

require __DIR__.'/vendor/autoload.php';

$commandBus = QuickStart::create(array(
    'Vendor\Project\Member\RegisterMember' =&gt; new Vendor\Project\Member\RegisterMemberHandler(),
));
</code></pre>

<p>It provides many framework integrations, including one for <a href="http://symfony.com/">Symfony</a>:</p>

<pre><code>composer require league/tactician-bundle:^0.3
# Don't forget to register `League\Tactician\Bundle\TacticianBundle` in `AppKernel`
</code></pre>

<p>Then we just have to use the <code>tactician.commandBus</code> service. To register Command Handler, we
need to tag service definitions as follow:</p>

<pre><code>services:
    register_member_handler:
        class: Vendor\Project\Member\RegisterMemberHandler
        tags:
            - { name: tactician.handler, command: Vendor\Project\Member\RegisterMember }
</code></pre>

<p>Now that the configuration is settled, here's a usage example:</p>

<pre><code class="php">$username = isset($argv[1]) ? $argv[1] : null;
$commandBus-&gt;handle(new RegisterMember($username));
</code></pre>

<p>The command would look like this:</p>

<pre><code class="php">&lt;?php

namespace Vendor\Project\Member;

class RegisterMember
{
    private $username;

    public function __construct($username)
    {
        if (null === $username) {
            throw new \InvalidArgumentException('Missing required "username" parameter');
        }
        $this-&gt;username = $username;
    }

    public function getUsername()
    {
        return $this-&gt;username;
    }
}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: Commands validate simple input logic (required parameters, parameter type, etc).</p>
</blockquote>

<p>The Command Handler could look like this:</p>

<pre><code class="php">&lt;?php

namespace Vendor\Project\Member;

class RegisterMemberHandler
{
    private $memberRepository;

    public function __construct(MemberRespository $memberRepository)
    {
        $this-&gt;memberRepository = $memberRepository;
    }

    public function handle(RegisterMember $registerMember)
    {
        $username = $registerMember-&gt;getUsername();
        if ($memberRepository-&gt;has($username)) {
            throw new \DomainException(sprintf('Given username "%s" already exists, and duplicates are not allowed', $username));
        }
        $memberRepository-&gt;register($registerMember);
    }
}
</code></pre>

<p>The Command Handler validates more complex logic (member username duplication, etc).</p>

<p>Here's a nice reference about command validation: <a href="http://verraes.net/2015/02/form-command-model-validation/">Form, Command, and Model Validation</a>.</p>

<h2 id="tips">Tips</h2>

<p>Here are some personal tips!</p>

<p>CommandBus is able to return the value of the executed CommandHandler.
While this isn't advised in asynchronous applications (think messaging queues, like RabbitMQ)
it can be useful in simple applications.</p>

<p>Because Commands also contain simple input validation you can write unit test for them,
but since they're mainly DTOs it might not be too important.</p>

<p>CommandHandlers on the other way are good candidates for unit tests.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Remember when people said that controllers shouldn't have any logic in it?
With the Command Bus pattern this becomes possible.
It also makes this kind of logic reusable and testable.</p>

<p>Tactician is a nice library for this: it doesn't get in our way and allows you to choose between
the "good" way or the "pragmatic" way (if you don't choose wisely, then shame on you).</p>
]]></content>
        </entry>
    </feed>