<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-08-20T13:45:04+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Don&#039;t mock what you don&#039;t own -- phpspec isn&#039;t a test framework]]></title>
            <link href="/2024/09/11/don-t-mock-what-you-don-t-own.html"/>
            <updated>2024-09-11T00:00:00+01:00</updated>
            <id>/2024/09/11/don-t-mock-what-you-don-t-own.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p>TL;DR: phpspec isn't a test framework. It's a code designing/modeling tool.</p>
</blockquote>

<h2 id="something-feels-wrong">Something feels wrong</h2>

<p>Looking at some 2014 code of mine, I found the following test:</p>

<pre><code class="php">&lt;?php

namespace spec\Memio\SpecGen\CodeEditor;

use Gnugat\Redaktilo;
use Memio\Model;
use Memio\PrettyPrinter\PrettyPrinter;
use Memio\SpecGen\CodeEditor\InsertConstructor;
use Memio\SpecGen\CodeEditor\InsertConstructorHandler;
use Memio\SpecGen\CommandBus\CommandHandler;
use PhpSpec\ObjectBehavior;

class InsertConstructorHandlerSpec extends ObjectBehavior
{
    function let(
        Redaktilo\Editor $redaktiloEditor,
        PrettyPrinter $prettyPrinter,
    ) {
        $this-&gt;beConstructedWith($redaktiloEditor, $prettyPrinter);
    }

    function it_inserts_constructor_in_class_that_has_constants_and_methods(
        Redaktilo\Editor $redaktiloEditor,
        Redaktilo\File $redaktiloFile,
        Model\Method $modelMethod,
        PrettyPrinter $prettyPrinter,
    ) {
        $insertConstructor = new InsertConstructor($redaktiloFile-&gt;getWrappedObject(), $modelMethod-&gt;getWrappedObject());

        $generatedCode =&lt;&lt;&lt;'GENERATED_CODE'
                public function __construct(Dependency $dependency, string $redaktiloFilename)
                {
                    $this-&gt;dependency = $dependency;
                    $this-&gt;filename = $redaktiloFilename;    
                }
            GENERATED_CODE
        ;

        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::CONSTRUCTOR, 0)-&gt;willReturn(false);
        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;willReturn(true);
        $redaktiloEditor-&gt;jumpBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;shouldBeCalled();
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, '')-&gt;shouldBeCalled();
        $prettyPrinter-&gt;generateCode($modelMethod)-&gt;willReturn($generatedCode);
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, $generatedCode)-&gt;shouldBeCalled();
        $redaktiloFile-&gt;decrementCurrentLineNumber(1)-&gt;shouldBeCalled();
        $redaktiloFile-&gt;getLine()-&gt;willReturn('    const CONSTANT = 42;');
        $redaktiloEditor-&gt;insertBelow($redaktiloFile, '')-&gt;shouldBeCalled();

        $this-&gt;handle($insertConstructor);
    }
}
</code></pre>

<p>There are some things that feel wrong there, like the calls to
<code>getWrappedObject()</code>, and when something feels wrong with phpspec, it usually
means that this thing is wrong.</p>

<h2 id="don%27t-mock-sut-inputs">Don't mock SUT inputs</h2>

<p>As per the previous advice, <a href="https://gnugat.github.io/2024/08/19/phpspec-tip-don-t-mock-sut-inputs.html">don't mock SUT inputs</a>,
I've removed the inputs mock and their awkward <code>getWrappedObject()</code> calls
and instead set up the inputs:</p>

<pre><code class="php">    function it_inserts_constructor_in_class_that_has_constants_and_methods(
        Redaktilo\Editor $redaktiloEditor,
        PrettyPrinter $prettyPrinter,
    ) {
        $redaktiloFile = Redaktilo\File::fromString(&lt;&lt;&lt;'FILE'
            &lt;?php 

            namespace Vendor\Project;

            class MyClass
            { 
                const CONSTANT = 42;

                public function existingMethod()
                {
                }
            } 
            FILE
        );
        $modelMethod = (new Model\Method('__construct'))
            -&gt;addArgument(new Model\Argument('Vendor\Project\Dependency', 'dependency'))
            -&gt;addArgument(new Model\Argument('string', 'filename'))
        ;                      
        $insertConstructor = new InsertConstructor($redaktiloFile, $modelMethod);

        $generatedCode =&lt;&lt;&lt;'GENERATED_CODE'
                public function __construct(Dependency $dependency, string $redaktiloFilename)
                {
                    $this-&gt;dependency = $dependency;
                    $this-&gt;filename = $redaktiloFilename;    
                }
            GENERATED_CODE
        ;

        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::CONSTRUCTOR, 0)-&gt;willReturn(false);
        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;willReturn(true);
        $redaktiloEditor-&gt;jumpBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;shouldBeCalled();
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, '')-&gt;shouldBeCalled();
        $prettyPrinter-&gt;generateCode($modelMethod)-&gt;willReturn($generatedCode);
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, $generatedCode)-&gt;shouldBeCalled();
        $redaktiloEditor-&gt;insertBelow($redaktiloFile, '')-&gt;shouldBeCalled();

        $this-&gt;handle($insertConstructor);
    }
</code></pre>

<h2 id="something-still-feels-wrong">Something still feels wrong</h2>

<p>Now pay attention to the two following lines we've removed:</p>

<pre><code class="php">        $redaktiloFile-&gt;decrementCurrentLineNumber(1)-&gt;shouldBeCalled();
        $redaktiloFile-&gt;getLine()-&gt;willReturn('    const CONSTANT = 42;');
</code></pre>

<p>After running the tests, I get an error:</p>

<blockquote>
  <p>Exception <code>Gnugat\Redaktilo\Exception\InvalidLineNumberException("The line number should be positive")</code> has been thrown.</p>
</blockquote>

<p>When the Redaktilo File is first instantiated in our test method, it is
initialised with a "current line number" set to <code>0</code>. Since Redaktilo's Editor
is mocked, it doesn't update the file's "current line number" as it would in
a real situation. Our SUT, <code>InsertConstructorHandler</code>, however calls directly
<code>decrementCurrentLineNumber</code> on the file, which ends up trying to set
"current line number" to <code>-1</code>, hence the exception.</p>

<p>To make the test pass, we could add a call to Redaktilo's File
<code>setCurrentLineNumber()</code>, for example:</p>

<pre><code class="php">        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::CONSTRUCTOR, 0)-&gt;willReturn(false);
        $redaktiloEditor-&gt;hasBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;willReturn(true);
        $redaktiloEditor-&gt;jumpBelow($redaktiloFile, InsertConstructorHandler::METHOD, 0)-&gt;shouldBeCalled();
        $redaktiloFile-&gt;setCurrentLineNumber(11);
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, '')-&gt;shouldBeCalled();
        $prettyPrinter-&gt;generateCode($modelMethod)-&gt;willReturn($generatedCode);
        $redaktiloEditor-&gt;insertAbove($redaktiloFile, $generatedCode)-&gt;shouldBeCalled();
        $redaktiloEditor-&gt;insertBelow($redaktiloFile, '')-&gt;shouldBeCalled();
</code></pre>

<p>But this feels wrong, and when something feels wrong with phpspec, it usually
means that this thing is wrong. But what?</p>

<h2 id="don%27t-mock-what-you-don%27t-own">Don't mock what you don't own</h2>

<p>Let's take a step back and look at the test again.
What are we trying to achieve here?</p>

<p>It is a test method, written with phpspec, that checks assertions on the
implementation details of the class under test <code>InsertConstructorHandler</code>,
by setting up mocks for the Redaktilo library.</p>

<p>2014 me would think that's perfectly reasonable, and would probably struggle
to identify the issue. But 2024 me can tell straight away from the above
paragraph what the issue is.</p>

<p>I've actually always had some issue understanding the advice
"don't mock what you don't own".
How do we really define what we own, and what we don't?</p>

<ul>
<li>do I own a third party library I've installed in my application (eg Guzzle as a HTTP client to do curl requests)?</li>
<li>do I own a "third party" library, that I've actually developed and then installed in my application (eg Redaktilo)?</li>
<li>do I own abstractions I've built on top of these libraries?</li>
<li>do I own the framework I've installed (eg Symfony, and its components like Form)?</li>
<li>do I own the RAD controllers (ie are they part of my application, or of the framework)?</li>
<li>do I own my own implementations of extension points (eg custom EventListeners)?</li>
<li>do I own business code in the application that was initially designed for other part of the system (ie from another Bounded Context)?</li>
<li>do I own code in the application that I haven't written?</li>
</ul>

<p>The answer to these questions probably depends on the context, but here in
<code>InsertConstructorHandler</code>, it certainly feels like Redaktilo, a third party
library (which I've developed), is "something that I don't own" and therefore
shouldn't be mocked.</p>

<p>Now that we have identified the problem, how do we fix it?</p>

<h2 id="behaviour-driven-development%2C-it%27s-all-words">Behaviour Driven Development, it's all words</h2>

<p>Let's re-read the first paragraph of the previous section, and more specifically:</p>

<blockquote>
  <p>It is a test method, <strong>written with phpspec</strong>, that checks assertions on the
  implementation details of the class under test <code>InsertConstructorHandler</code>,
  by setting up mocks for the Redaktilo library.</p>
</blockquote>

<p>And when reading the test method, we get a lot of "has below" and "jump below"
and "insert above". This is all implementation detail. And this is all
Redaktilo's (clunky) language.</p>

<p><strong><em>Our test method is a one to one translation of the</em> implementation details</strong>.</p>

<p>phpspec is a specBDD framework. One of the core of Behaviour Driven Development
is to drop the "unit testing" terminology and use a slightly different
vocabulary instead:</p>

<ul>
<li>instead of the verb "to test", use "to specify"</li>
<li>instead of "unit", use "behaviour"</li>
<li>instead of "test method", use "example"</li>
<li>instead of "assertion", use "expectation"</li>
<li>instead of "mock", use "collaborator"</li>
<li>and why not switch the words "class under test" for "use case"</li>
</ul>

<blockquote>
  <p>See Liz Keogh. 2009. <a href="https://lizkeogh.com/2009/11/06/translating-tdd-to-bdd/">Translating TDD to BDD</a></p>
</blockquote>

<p>This might not seem like much, or very useful,
but in reality the language used is key to changing our perspective.</p>

<p>To be able to have an example that checks expectations on a specific use case,
we first need to define the behaviour we want to describe in plain English:</p>

<blockquote>
  <p>If the class doesn't already have a constructor
  But it has an existing method,
  As well as potentially a constant, or property definition
  Then the generated code for the new constructor
  Should be inserted above the existing method, separated by an empty line
  And it should also be under the constant and property definitions, also separated by an empty line</p>
</blockquote>

<p>We then try our best to translate that into code. To use the exact same vocabulary.
This cannot be done by mocking Redaktilo, which has its own vocabulary.</p>

<p>So we have to extract the Redaktilo implementation details and hide them in
classes that have descriptive names which are relevant to our use case.</p>

<p>Creating a new abstraction layer, essentially.</p>

<p>Here's our new and improved "example":</p>

<pre><code class="php">    function it_inserts_constructor_above_methods_but_under_constants_and_properties(
        DoesClassAlreadyHaveConstructor $doesClassAlreadyHaveConstructor,
        DoesClassAlreadyHaveMethods $doesClassAlreadyHaveMethod,
        PrettyPrinter $prettyPrinter,
        InsertGeneratedConstructorAboveExistingMethods $insertGeneratedConstructorAboveExistingMethods,
    ) {
        $inFile = Redaktilo\File::fromString(&lt;&lt;&lt;'FILE'
            &lt;?php 

            namespace Vendor\Project;

            class MyClass
            { 
                const CONSTANT = 42;

                public function existingMethod()
                {
                }
            } 
            FILE
        );
        $modelConstructor = (new Model\Method('__construct'))
            -&gt;addArgument(new Model\Argument('Vendor\Project\Dependency', 'dependency'))
            -&gt;addArgument(new Model\Argument('string', 'filename'))
        ;                      
        $insertConstructor = new InsertConstructor($inFile, $modelConstructor);

        $generatedConstructor =&lt;&lt;&lt;'GENERATED_CODE'
                public function __construct(Dependency $dependency, string $redaktiloFilename)
                {
                    $this-&gt;dependency = $dependency;
                    $this-&gt;filename = $redaktiloFilename;    
                }
            GENERATED_CODE
        ;

        $doesClassAlreadyHaveConstructor-&gt;check($inFile)-&gt;withReturn(false);

        $doesClassAlreadyHaveMethod-&gt;check($inFile)-&gt;withReturn(true);
        $prettyPrinter-&gt;generateCode($modelMethod)-&gt;willReturn($generatedConstructor);
        $insertGeneratedConstructorAboveExistingMethods-&gt;insert($generatedConstructor, $inFile)-&gt;shouldBeCalled();

        $this-&gt;handle($insertConstructor);
    }
</code></pre>

<p>It no longer has <code>Redaktilo\Editor</code>.</p>

<p>It now has:</p>

<ul>
<li><code>DoesClassAlreadyHaveConstructor-&gt;check(Redaktilo\File $inFile): bool</code>

<ul>
<li>it will call <code>$this-&gt;redaktiloEditor-&gt;hasBelow($inFile, InsertConstructorHandler::CONSTRUCTOR, 0)</code>;</li>
</ul></li>
<li><code>DoesClassAlreadyHaveMethods-&gt;check(Redaktilo\File $inFile): bool</code>

<ul>
<li>it will call <code>$this-&gt;redaktiloEditor-&gt;hasBelow($inFile, InsertConstructorHandler::METHOD, 0);</code></li>
</ul></li>
<li><code>InsertGeneratedConstructorAboveExistingMethods-&gt;insert(string $generatedConstructor, Redaktilo\File $inFile): void</code>

<ul>
<li>it will call:</li>
<li><code>$this-&gt;redaktiloEditor-&gt;jumpBelow($inFile, InsertConstructorHandler::METHOD, 0);</code></li>
<li><code>$this-&gt;redaktiloEditor-&gt;insertAbove($inFile, '');</code></li>
<li><code>$this-&gt;redaktiloEditor-&gt;insertAbove($inFile, $generatedCode);</code></li>
<li><code>$this-&gt;redaktiloEditor-&gt;insertBelow($inFile, '');</code></li>
</ul></li>
</ul>

<p>And it still has:</p>

<ul>
<li><code>Model\Method</code>, this is one of the inputs of our use case, it seems fine as is</li>
<li><code>Redaktilo\File</code>, though the variable has been renamed to <code>$inFile</code></li>
<li><code>PrettyPrinter</code>, as far as I can tell, this collaborator still describes the behaviour we want</li>
</ul>

<h2 id="it%27s-all-about-trade-offs">It's all about trade offs</h2>

<p>I've also taken the liberty to rename a couple of things, to make the intent
more explicit:</p>

<ul>
<li><code>$redaktiloFile</code> becomes <code>$inFile</code>, I've taken a liking to having code read
like sentences (insert generated code in file)</li>
<li><code>it_inserts_constructor_in_class_that_has_constants_and_methods</code> becomes
<code>it_inserts_constructor_above_methods_but_under_constants_and_properties</code>,
as I think that describes the use case a bit better (though in the
implementation, we end up not caring about constants and properties, as
we generate the constructor above methods, which we expect to be below
constants and properties)</li>
</ul>

<p>But there are more changes that have been introduced as a result of this new
abstraction layer. On the positive side, we got:</p>

<ul>
<li>more readable code -- and by that I mean more explicit intent</li>
<li>decoupling our "business logic" from "code we don't own"
(ie third party library, or "implementation details")</li>
</ul>

<p>On the negative side:</p>

<ul>
<li>we have introduced an abstraction layer</li>
<li>we'll have to introduce new classes to specify the other scenarios
(<code>InsertGeneratedConstructorAtTheEndOfTheClass</code>
when there are no methods in the class)</li>
</ul>

<p>While there is value in the code at the beginning of this article, as it worked
just fine as it was, I personally value the new version more, even with the
drawbacks they bring.</p>

<p>Having an executable specification that results in a code that explicitly
describes its intent is, in my humble opinion, quite a worthy improvement
indeed.</p>

<blockquote>
  <p><strong>Note</strong>: also, while the initial version of the code "worked", it did come
  with its own drawbacks. It takes some time to understand what the code does
  (the "jump above and below" mumbo jumbo isn't very helpful), and it was
  coupled to a third party library, meaning tying us to its upgrade policy
  and making us subject to its backward incompatible changes.</p>
</blockquote>

<h2 id="phpspec-isn%27t-a-test-framework">phpspec isn't a test framework</h2>

<p>phpspec is highly opinionated, has very intentional "limitations", and has this
knack of making you feel like something is wrong -- when you're indeed doing
something you shouldn't be doing.</p>

<p>It's not a testing framework, no, it's a designing / modeling tool.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[phpspec tip: don&#039;t mock SUT inputs]]></title>
            <link href="/2024/08/19/phpspec-tip-don-t-mock-sut-inputs.html"/>
            <updated>2024-08-19T00:00:00+01:00</updated>
            <id>/2024/08/19/phpspec-tip-don-t-mock-sut-inputs.html</id>
            <content type="html"><![CDATA[<p>Looking at some old code of mine, I've found the following test:</p>

<pre><code class="php">&lt;?php

namespace spec\Memio\SpecGen\GenerateMethod;

use Memio\Model\File;
use Memio\Model\Method;
use Memio\Model\Objekt;
use Memio\SpecGen\GenerateMethod\GeneratedMethod;
use PhpSpec\Console\ConsoleIO;
use PhpSpec\ObjectBehavior;

class LogGeneratedMethodListenerSpec extends ObjectBehavior
{   
    function let(ConsoleIO $io)
    {
        $this-&gt;beConstructedWith($io);
    }

    function it_logs_the_generated_method(ConsoleIO $io, File $file, Method $method, Objekt $object)
    {
        $className = 'Vendor\Project\MyClass';
        $methodName = 'myMethod';
        $generatedMethod = new GeneratedMethod($file-&gt;getWrappedObject());
        $file-&gt;getStructure()-&gt;willReturn($object);
        $object-&gt;getName()-&gt;willReturn($className);
        $object-&gt;allMethods()-&gt;willReturn([$method]);
        $method-&gt;getName()-&gt;willReturn($methodName);

        $io-&gt;write(&lt;&lt;&lt;OUTPUT

  &lt;info&gt;Generated &lt;value&gt;{$className}#{$methodName}&lt;/value&gt;&lt;/info&gt;

 OUTPUT
        )-&gt;shouldBeCalled();

        $this-&gt;onGeneratedMethod($generatedMethod);
    }
}
</code></pre>

<p>And while reading it, one of the things that caught my attention was
<strong>the setting up of mocks for SUT inputs</strong>
(SUT means System Under Test, the class we're testing).</p>

<p>The purpose of this test is to specify how <code>LogGeneratedMethodListener</code> should
behave, through its interactions with the <code>ConsoleIO</code> collaborator.</p>

<p>But here, it's also specifying how <code>LogGeneratedMethodListener</code> interacts
with the input parameter <code>GeneratedMethod</code>.</p>

<p><code>GeneratedMethod</code> encapsulates data relevant to the process of generating the
code for a Method. It doesn't have any critical behaviour:
we just call getters on it.</p>

<p>So my advice to you (me, from the past), would be to not bother creating Mocks
for it:</p>

<pre><code class="php">&lt;?php

namespace spec\Memio\SpecGen\GenerateMethod;

use Memio\Model\File;
use Memio\Model\Method;
use Memio\Model\Objekt;
use Memio\SpecGen\GenerateMethod\GeneratedMethod;
use PhpSpec\Console\ConsoleIO;
use PhpSpec\ObjectBehavior;

class LogGeneratedMethodListenerSpec extends ObjectBehavior
{   
    function let(ConsoleIO $io)
    {
        $this-&gt;beConstructedWith($io);
    }

    function it_logs_the_generated_method(ConsoleIO $io)
    {
        $className = 'Vendor\Project\MyClass';
        $methodName = 'myMethod';
        $generatedMethod = new GeneratedMethod((new File('src/MyClass.php'))
            -&gt;setStructure((new Objekt($className))
                -&gt;addMethod(new Method($methodName))
            )
        );

        $io-&gt;write(&lt;&lt;&lt;OUTPUT

  &lt;info&gt;Generated &lt;value&gt;{$className}#{$methodName}&lt;/value&gt;&lt;/info&gt;

 OUTPUT
        )-&gt;shouldBeCalled();

        $this-&gt;onGeneratedMethod($generatedMethod);
    }
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Mars Rover, Introduction]]></title>
            <link href="/2016/06/15/mars-rover-introduction.html"/>
            <updated>2016-06-15T00:00:00+01:00</updated>
            <id>/2016/06/15/mars-rover-introduction.html</id>
            <content type="html"><![CDATA[<p>Welcome to this Mars Rover series where we're going to practice the followings:</p>

<ul>
<li>Monolithic Repositories (MonoRepo)</li>
<li>Command / Query Responsibility Segregation (CQRS)</li>
<li>Event Sourcing (ES)</li>
<li>Test Driven Development (TDD)</li>
</ul>

<p>In this introductory article, we're simply going to describe our Mars Rover
specifications.</p>

<blockquote>
  <p><strong>Note</strong>: This programming exercise originally comes from
  <a href="http://dallashackclub.com/rover">Dallas Hack Club</a>, which is now
  unfortunately down.</p>
  
  <p>This Mars Rover <a href="https://en.wikipedia.org/wiki/Kata_(programming)">kata</a>
  has been adapted for the needs of this series.</p>
</blockquote>

<p>But first, let's have a quick reminder on what the practices mentioned above
are.</p>

<h2 id="monolithic-repositories">Monolithic Repositories</h2>

<p>A MonoRepo is a single versioning repository containing many packages that
would otherwise be versioned in their own repositories.</p>

<p>With it, everything can be found in one place, which makes it easy to:</p>

<ul>
<li>navigate</li>
<li>manage dependencies</li>
<li>set up</li>
<li>run tests</li>
</ul>

<p>However it also brings the following disadvantages:</p>

<ul>
<li>no hard separation between packages (thigh coupling is possible)</li>
<li>limited regarding scaling (disk space, bandwidth)</li>
<li>no finely grain permission management (a user has access to everything
or nothing)</li>
</ul>

<p>MonoRepos make sense for projects that would be packaged / released together
(although it makes it possible to package / release them independently).</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about MonoRepos:</p>
  
  <ul>
  <li><a href="http://danluu.com/monorepo/">Advantages of a monolithic version control</a></li>
  <li><a href="http://gregoryszorc.com/blog/2014/09/09/on-monolithic-repositories/">On Monolithic Repositories</a></li>
  </ul>
</blockquote>

<h2 id="command-%2F-query-responsibility-segregation">Command / Query Responsibility Segregation</h2>

<p>CQRS is about separating "write" logic from "read" logic, and it can be applied
on many levels, for example:</p>

<ul>
<li>have a read-only microservice and a separate write microservice</li>
<li>have endpoints / tasks that are either write or read only</li>
<li>separate your models in two (again, read-only and write-only)</li>
</ul>

<p>It's important to note that CQRS can also be applied <em>partially</em> in the same
project: use it only when it makes sense.</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about CQRS:</p>
  
  <ul>
  <li><a href="/2015/08/25/cqrs.html">Command / Query Responsibility Segregation</a></li>
  <li><a href="http://martinfowler.com/bliki/CQRS.html">CQRS</a></li>
  <li><a href="http://www.jefclaes.be/2013/02/adding-r-to-cqs-some-storage-options.html">Adding the R to CQS: some storage options</a></li>
  <li><a href="http://udidahan.com/2009/12/09/clarified-cqrs/">Clarified CQRS</a></li>
  <li><a href="http://verraes.net/2014/05/functional-foundation-for-cqrs-event-sourcing/">Functional foundation for CQRS / ES</a></li>
  <li><a href="http://verraes.net/2015/01/messaging-flavours/">Messaging Flavours</a></li>
  <li><a href="https://speakerdeck.com/richardmiller/avoiding-the-mud">Avoiding the Mud</a></li>
  <li><a href="https://medium.com/@benjamindulau/do-not-mistake-ddd-for-cqrs-yeah-but-where-to-start-5595b8e68a4d#.vnh8i8rhb">Do not mistake DDD for CQRS. Yeah but where to start?</a></li>
  <li><a href="https://moquet.net/talks/phptour-2015/">CQRS/ES</a></li>
  <li><a href="http://verraes.net/2013/12/fighting-bottlenecks-with-cqrs/">Fighting Bottlenecks with CQRS</a></li>
  </ul>
</blockquote>

<h2 id="event-sourcing">Event Sourcing</h2>

<p>With ES, every significant action is recorded as an "event". Keeping track of
those events provides the following advantages:</p>

<ul>
<li>replay them to recreate the state of an application at a given time
(undo, redo, synchronization)</li>
<li>analyse how the latest state came to be (compare two versions or find who did
what and when)</li>
</ul>

<p>Just like with CQRS, it's important to note that ES can also be applied
<em>partially</em> inside a project : use it only when it makes sense.</p>

<p>ES is often associated to CQRS, but they can be used separately.</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about ES:</p>
  
  <ul>
  <li><a href="https://martin.kleppmann.com/2015/05/27/logs-for-data-infrastructure.html">Using logs to build a solid data infrastructure or: why dual writes are a bad idea</a></li>
  <li><a href="http://martinfowler.com/eaaDev/EventSourcing.html">Event Sourcing</a></li>
  <li><a href="http://verraes.net/2014/03/practical-event-sourcing.markdown/">Practical Event Sourcing</a></li>
  <li><a href="https://moquet.net/talks/phptour-2015/">CQRS/ES</a></li>
  <li><a href="http://verraes.net/2013/12/fighting-bottlenecks-with-cqrs/">Fighting Bottlenecks with CQRS</a></li>
  <li><a href="http://verraes.net/2014/05/functional-foundation-for-cqrs-event-sourcing/">Functional foundation for CQRS / ES</a></li>
  <li><a href="http://php-and-symfony.matthiasnoback.nl/2015/07/meeting-the-broadway-team/">Meeting the Broadway team - talking DDD, CQRS and event sourcing</a></li>
  </ul>
</blockquote>

<h2 id="test-driven-development">Test Driven Development</h2>

<p>TDD can be summed up in the following steps when developing:</p>

<ol>
<li>create a test</li>
<li>then write just enough code to make the test pass (quick and dirty, or
"make it work")</li>
<li>then refactor the code (clean, or "make it right")</li>
</ol>

<p>Writing the test before the code forces us to think about how we'd like the
future code to be <em>used</em>. It's like writing specifications, but with 3
purposes: design, documentation and automated regression checking.</p>

<p>This discipline makes it easy to have a high code coverage (although rigour
still needs to be applied: we need to test all the happy paths and all the
unhappy ones).</p>

<blockquote>
  <p><strong>Note</strong>: Here are some references about TDD:</p>
  
  <ul>
  <li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1170">Straw man TDD</a></li>
  <li><a href="http://codemanship.co.uk/parlezuml/blog/?postid=1202">Coverage!!!</a></li>
  <li><a href="http://blog.testdouble.com/posts/2014-01-25-the-failures-of-intro-to-tdd.html">The Failures of "Intro to TDD"</a></li>
  <li><a href="http://tech.mybuilder.com/coupling-tests/">TDD, avoid testing implementation details</a></li>
  <li><a href="http://blog.8thlight.com/uncle-bob/2014/04/25/MonogamousTDD.html">Monogamous TDD</a></li>
  <li><a href="http://blog.8thlight.com/uncle-bob/2014/04/30/When-tdd-does-not-work.html">When TDD doesn't work</a></li>
  <li><a href="http://codurance.com/2015/05/12/does-tdd-lead-to-good-design/">Does TDD really lead to good design?</a></li>
  <li><a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead, long live testing</a></li>
  <li><a href="http://www.daedtech.com/what-tdd-is-and-is-not/">What TDD is and is not</a></li>
  <li><a href="https://vimeo.com/68375232">TDD, where it all went wrong</a></li>
  <li><a href="https://medium.com/@davidihunt/tdd-and-complexity-1bbd5ca51ee7#.4mzrdro57">TDD and Complexity</a></li>
  <li><a href="http://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">Giving up on TDD</a></li>
  </ul>
</blockquote>

<h2 id="specifications">Specifications</h2>

<p>The purpose of this series is to create the software of a Mars Rover, according
to the following specifications.</p>

<p>Mars Rovers need first to be landed at a given position. A position is composed
of coordinates (<code>x</code> and <code>y</code>, which are both integers) and an orientation
(a string being one of <code>north</code>, <code>east</code>, <code>west</code> or <code>south</code>).</p>

<p>It is then possible to drive them, using instructions such as <code>move_forward</code>
(keeps orientation, but moves along the <code>x</code> or <code>y</code> axis) or
<code>turn_left</code> / <code>turn_right</code> (keeps the same coordinates, but changes the
orientation).</p>

<p>From time to time, they'll be requested to give their current location
(again, <code>x</code> and <code>y</code> coordinates and the orientation).</p>

<p>For example, a rover can be landed at <code>23</code>, <code>42</code>, <code>north</code> and then can be
instructed to move forward twice, then to turn left, then to move forward once.
When requested to, it should provide this location: <code>22</code>, <code>44</code>, <code>west</code>.</p>

<h2 id="identifying-use-cases">Identifying use cases</h2>

<p>From the above specifications, we can identify at least three use cases:</p>

<ol>
<li>Landing a Rover on Mars</li>
<li>Driving the rover</li>
<li>Requesting its location</li>
</ol>

<h2 id="what%27s-next">What's next</h2>

<p>In the next article we'll initialize the project by creating the MonoRepo and
its first package: <code>navigation</code>.</p>

<blockquote>
  <p><strong>Note</strong> We'll be using:</p>
  
  <ul>
  <li>PHP 7</li>
  <li><a href="https://getcomposer.org">Composer</a></li>
  <li>git</li>
  <li><a href="http://phpspec.net/">phpspec</a>
  and its <a href="http://memio.github.io/spec-gen">SpecGen extension</a></li>
  </ul>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHPUnit with phpspec]]></title>
            <link href="/2015/09/23/phpunit-with-phpspec.html"/>
            <updated>2015-09-23T00:00:00+01:00</updated>
            <id>/2015/09/23/phpunit-with-phpspec.html</id>
            <content type="html"><![CDATA[<p><a href="https://phpunit.de/">PHPUnit</a> is a port of <a href="http://junit.org/">jUnit</a>, its name
might be deceptive: it allows you to write any type of tests (unit, but also functional,
system, integration, end to end, acceptance, etc).</p>

<p><a href="http://www.phpspec.net">phpspec</a> was at first a port of <a href="http://rspec.info/">rspec</a>,
it can be considered as a unit test framework that enforces practices it considers best.</p>

<blockquote>
  <p><strong>Note</strong>: <a href="/2015/08/03/phpspec.html">read more about phpspec</a>.</p>
</blockquote>

<p>In this article, we'll see how to use both tools together in a same project.</p>

<h2 id="fortune%3A-our-example">Fortune: our example</h2>

<p>We're going to build part of a <a href="https://en.wikipedia.org/wiki/Fortune_%28Unix%29">fortune</a>
application for our example, more precisely we're going to build a CLI allowing us to save quotes.</p>

<p>To do so, we'll bootstrap a symfony application using the <a href="https://github.com/gnugat/symfony-empty-edition">Empty Edition</a>:</p>

<pre><code>composer create-project gnugat/symfony-empty-edition fortune
cd fortune
</code></pre>

<p>We'll need to install our test frameworks:</p>

<pre><code>composer require --dev phpunit/phpunit
composer require --dev phpspec/phpspec
</code></pre>

<p>Finally we'll configure PHPUnit:</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!-- phpunit.xml.dist --&gt;
&lt;!-- http://phpunit.de/manual/current/en/appendixes.configuration.html --&gt;
&lt;phpunit backupGlobals="false" colors="true" syntaxCheck="false" bootstrap="app/bootstrap.php"&gt;
    &lt;testsuites&gt;
        &lt;testsuite name="System Tests"&gt;
            &lt;directory&gt;tests&lt;/directory&gt;
        &lt;/testsuite&gt;
    &lt;/testsuites&gt;
&lt;/phpunit&gt;
</code></pre>

<h2 id="the-command">The command</h2>

<p>Our first step will be to write a <strong>system test</strong> describing the command:</p>

<pre><code class="php">&lt;?php
// tests/Command/SaveQuoteCommandTest.php

namespace AppBundle\Tests\Command;

use AppKernel;
use PHPUnit_Framework_TestCase;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Tester\ApplicationTester;

class SaveQuoteCommandTest extends PHPUnit_Framework_TestCase
{
    const EXIT_SUCCESS = 0;

    private $app;

    protected function setUp()
    {
        $kernel = new AppKernel('test', false);
        $application = new Application($kernel);
        $application-&gt;setAutoExit(false);
        $this-&gt;app = new ApplicationTester($application);
    }

    /**
     * @test
     */
    public function it_saves_a_new_quote()
    {
        $exitCode = $this-&gt;app-&gt;run(array(
            'quote:save',
            'quote' =&gt; 'Nobody expects the spanish inquisition',
        ));

        self::assertSame(self::EXIT_SUCCESS, $exitCode, $this-&gt;app-&gt;getDisplay());
    }
}
</code></pre>

<blockquote>
  <p><strong>Note</strong>: Testing only the exit code is called "Smoke Testing" and is a very
  efficient way to check if the application is broken.
  Testing the output would be tedious and would make our test fragile as it might change often.</p>
</blockquote>

<p>Let's run it:</p>

<pre><code>vendor/bin/phpunit
</code></pre>

<p>The tests fails because the command doesn't exist. Let's fix that:</p>

<pre><code class="php">&lt;?php
// src/AppBundle/Command/SaveQuoteCommand.php

namespace AppBundle\Command;

use Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Output\OutputInterface;

class SaveQuoteCommand extends ContainerAwareCommand
{
    protected function configure()
    {
        $this-&gt;setName('quote:save');
        $this-&gt;addArgument('quote', InputArgument::REQUIRED);
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $output-&gt;writeln('');
        $output-&gt;writeln('// Saving quote');

        $this-&gt;getContainer()-&gt;get('app.save_new_quote')-&gt;save(
            $input-&gt;getArgument('quote')
        );

        $output-&gt;writeln('');
        $output-&gt;writeln(' [OK] Quote saved');
        $output-&gt;writeln('');
    }
}
</code></pre>

<p>Then run the test again:</p>

<pre><code>vendor/bin/phpunit
</code></pre>

<p>It now fails for a different reason: the service used doesn't exist.</p>

<h2 id="the-service">The service</h2>

<p>The second step is to write the unit test for the service. With phpspec we can
first bootstrap it:</p>

<pre><code>vendor/bin/phpspec describe 'AppBundle\Service\SaveNewQuote'
</code></pre>

<p>Then we need to edit it:</p>

<pre><code class="php">&lt;?php
// spec/AppBundle/Service/SaveNewQuoteSpec.php

namespace spec\AppBundle\Service;

use PhpSpec\ObjectBehavior;
use Symfony\Component\Filesystem\Filesystem;

class SaveNewQuoteSpec extends ObjectBehavior
{
    const FILENAME = '/tmp/quotes.txt';
    const QUOTE = 'Nobody expects the spanish inquisition!';

    function let(Filesystem $filesystem)
    {
        $this-&gt;beConstructedWith($filesystem, self::FILENAME);
    }

    function it_saves_new_quote(Filesystem $filesystem)
    {
        $filesystem-&gt;dumpFile(self::FILENAME, self::QUOTE)-&gt;shouldBeCalled();

        $this-&gt;save(self::QUOTE);
    }
}
</code></pre>

<p>Time to run the suite:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>phpspec will detect that the tested class doesn't exist and will bootstrap it for us,
so we just have to edit it:</p>

<pre><code class="php">&lt;?php
// src/AppBundle/Service/SaveNewQuote.php

namespace AppBundle\Service;

use Symfony\Component\Filesystem\Filesystem;

class SaveNewQuote
{
    private $filesystem;
    private $filename;

    public function __construct(Filesystem $filesystem, $filename)
    {
        $this-&gt;filesystem = $filesystem;
        $this-&gt;filename = $filename;
    }

    public function save($quote)
    {
        $this-&gt;filesystem-&gt;dumpFile($this-&gt;filename, $quote);
    }
}
</code></pre>

<p>Again, we're going to run our unit test:</p>

<pre><code>vendor/bin/phpspec run
</code></pre>

<p>It's finally green! Our final step will be to define our service in the Dependency Injection
Container:</p>

<pre><code># app/config/config.yml

imports:
    - { resource: parameters.yml }
    - { resource: importer.php }

framework:
    secret: "%secret%"

services:
    app.save_new_quote:
        class: AppBundle\Service\SaveNewQuote
        arguments:
            - "@filesystem"
            - "%kernel.root_dir%/cache/quotes"
</code></pre>

<p>To make sure everything is fine, let's clear the cache and run the test:</p>

<pre><code>rm -rf app/cache/*
vendor/bin/phpunit
</code></pre>

<p>It's <a href="https://www.youtube.com/watch?v=lFeLDc2CzOs">Super Green</a>!</p>

<h2 id="conclusion">Conclusion</h2>

<p>As we can see, PHPUnit and phpspec can work perfectly well together.</p>

<p>Of course we could write our unit test in a similar manner with PHPUnit:</p>

<pre><code>&lt;?php
// tests/Service/SaveNewQuoteTest.php

namespace AppBundle\Tests\Service;

use AppBundle\Service\SaveNewQuote;
use PHPUnit_Framework_TestCase;

class SaveNewQuoteTest extends PHPUnit_Framework_TestCase
{
    const FILENAME = '/tmp/quotes.txt';
    const QUOTE = 'Nobody expects the spanish inquisition!';

    private $filesystem;
    private $saveNewQuote;

    protected function setUp()
    {
        $this-&gt;filesystem = $this-&gt;prophesize('Symfony\Component\Filesystem\Filesystem');
        $this-&gt;saveNewQuote = new SaveNewQuote($this-&gt;filesystem-&gt;reveal(), self::FILENAME);
    }

    /**
     * @test
     * @group unit
     */
    public function it_saves_new_quote()
    {
        $this-&gt;filesystem-&gt;dumpFile(self::FILENAME, self::QUOTE)-&gt;shouldBeCalled();

        $this-&gt;saveNewQuote-&gt;save(self::QUOTE);
    }
}
</code></pre>

<p>And run it separately:</p>

<pre><code>vendor/bin/phpunit --group=unit
</code></pre>

<p>But then we would lose all the advantages of phpspec:</p>

<ul>
<li>it adds less overhead (this same test runs in ~20ms with phpspec, and ~80ms with PHPUnit)</li>
<li>it tells you when it thinks you're doing something wrong (typically by making it harder/impossible for you to do it)</li>
<li>it bootstraps things for you if you follow the TDD workflow (test first, then code)</li>
</ul>

<blockquote>
  <p><strong>Reference</strong>: <a class="button button-reference" href="/2015/08/03/phpspec.html">see the phpspec reference article</a></p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Master Symfony2 - part 2: Test Driven Development]]></title>
            <link href="/2014/08/13/master-sf2-part-2-tdd.html"/>
            <updated>2014-08-13T00:00:00+01:00</updated>
            <id>/2014/08/13/master-sf2-part-2-tdd.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p><strong>Deprecated</strong>: This series has been re-written - see
  <a href="/2016/02/03/ultimate-symfony-http-kernel.html">The Ultimate Developer Guide to Symfony</a></p>
</blockquote>

<p>This is the second article of the series on mastering the
<a href="http://symfony.com/">Symfony2</a> framework. Have a look at the first one:
<a href="/2014/08/05/master-sf2-part-1-bootstraping.html">Bootstraping</a>.</p>

<p>In the first article we bootstraped our project with the following files:</p>

<pre><code>.
├── app
│   ├── AppKernel.php
│   ├── cache
│   │   └── .gitkeep
│   ├── config
│   │   ├── config_prod.yml
│   │   ├── config_test.yml
│   │   ├── config.yml
│   │   ├── parameters.yml.dist
│   │   └── routing.yml
│   ├── logs
│   │   └── .gitkeep
│   └── phpunit.xml.dist
├── composer.json
├── composer.lock
├── src
│   └── Fortune
│       └── ApplicationBundle
│           └── FortuneApplicationBundle.php
└── web
    └── app.php
</code></pre>

<p>Here's the <a href="https://github.com/gnugat/mastering-symfony2">repository where you can find the actual code</a>.</p>

<p>In this one we'll implement the first User Story, by writing tests first.</p>

<p><strong>Note</strong>: writing tests before writing any code is part of the
<a href="/2014/02/19/test-driven-development.html">Test Driven Development (TDD) methodology</a>.</p>

<h2 id="defining-the-user-story">Defining the User Story</h2>

<p>With the help of our Scrum Master, our Product Owner (Nostradamus) managed to
write the following user story:</p>

<pre><code>As a User
I want to be able to submit a new quote
In order to make it available
</code></pre>

<h2 id="writing-the-test">Writing the test</h2>

<p>Our first reflex will be to write a functional test. First create the directory:</p>

<pre><code>mkdir -p src/Fortune/ApplicationBundle/Tests/Controller
</code></pre>

<p>Then the test class:</p>

<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Controller/QuoteControllerTest.php

namespace Fortune\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class QuoteControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), $headers, $content);

        return $client-&gt;getResponse();
    }

    public function testSubmitNewQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; '&lt;KnightOfNi&gt; Ni!'));

        $this-&gt;assertSame(Response::HTTP_CREATED, $response-&gt;getStatusCode());
    }
}
</code></pre>

<h2 id="configuring-the-route">Configuring the route</h2>

<p>Now we need to link the <code>/quotes</code> URL to a controller, so let's edit the
configuration:</p>

<pre><code># File: app/config/routing.yml
submit_quote:
    path: /api/quotes
    methods:
        - POST
    defaults:
        _controller: FortuneApplicationBundle:Quote:submit
</code></pre>

<h2 id="creating-the-controller">Creating the controller</h2>

<p>There wasn't any controllers until now, so we create the directory:</p>

<pre><code>mkdir src/Fortune/ApplicationBundle/Controller
</code></pre>

<p>And finally the controller class:</p>

<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        $answer['quote']['content'] = $postedValues['content'];

        return new JsonResponse($answer, Response::HTTP_CREATED);
    }
}
</code></pre>

<p>Now let's run our tests:</p>

<pre><code>./vendor/bin/phpunit -c app
</code></pre>

<p><a href="https://www.youtube.com/watch?v=lFeLDc2CzOs">All green</a>! This makes us
confident enough to commit our work:</p>

<pre><code>git add -A
git commit -m 'Created submission of quotes'
</code></pre>

<h2 id="testing-bad-cases">Testing bad cases</h2>

<p>The submitted content shouldn't be empty. Let's add a test for the bad cases:</p>

<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Tests/Controller/QuoteControllerTest.php

namespace Fortune\ApplicationBundle\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Response;

class QuoteControllerTest extends WebTestCase
{
    private function post($uri, array $data)
    {
        $headers = array('CONTENT_TYPE' =&gt; 'application/json');
        $content = json_encode($data);
        $client = static::createClient();
        $client-&gt;request('POST', $uri, array(), array(), $headers, $content);

        return $client-&gt;getResponse();
    }

    public function testSubmitNewQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; '&lt;KnightOfNi&gt; Ni!'));

        $this-&gt;assertSame(Response::HTTP_CREATED, $response-&gt;getStatusCode());
    }

    public function testSubmitEmptyQuote()
    {
        $response = $this-&gt;post('/api/quotes', array('content' =&gt; ''));

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }

    public function testSubmitNoQuote()
    {
        $response = $this-&gt;post('/api/quotes', array());

        $this-&gt;assertSame(Response::HTTP_UNPROCESSABLE_ENTITY, $response-&gt;getStatusCode());
    }
}
</code></pre>

<h2 id="checking-bad-cases">Checking bad cases</h2>

<p>Now let's fix the new tests:</p>

<pre><code>&lt;?php
// File: src/Fortune/ApplicationBundle/Controller/QuoteController.php

namespace Fortune\ApplicationBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

class QuoteController extends Controller
{
    public function submitAction(Request $request)
    {
        $postedContent = $request-&gt;getContent();
        $postedValues = json_decode($postedContent, true);

        if (empty($postedValues['content'])) {
            $answer = array('message' =&gt; 'Missing required parameter: content');

            return new JsonResponse($answer, Response::HTTP_UNPROCESSABLE_ENTITY);
        }
        $answer['quote']['content'] = $postedValues['content'];

        return new JsonResponse($answer, Response::HTTP_CREATED);
    }
}
</code></pre>

<p>Finally run the tests:</p>

<pre><code>./vendor/bin/phpunit -c app
</code></pre>

<p>All green! Let's call it a day and commit our work:</p>

<pre><code>git add -A
git commit -m 'Managed submission of empty/no quotes'
</code></pre>

<h2 id="conclusion">Conclusion</h2>

<p>For those who didn't practice a lot with Symfony2, this article should have
demonstrated how quick and simple it is to implement the first User Story
(test and code alike).</p>

<p>In the next article, we'll learn how to work with services.</p>
]]></content>
        </entry>
    </feed>