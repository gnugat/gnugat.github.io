<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Loïc Faugeron]]></title>
    <link href="/feed/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2025-09-17T07:14:59+01:00</updated>
    <id>http://gnugat.github.com</id>
            <author>
            <name><![CDATA[Loïc Faugeron]]></name>            <email><![CDATA[faugeron.loic@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[eXtreme Legacy 1: Dockerizing a 2005 LAMP app]]></title>
            <link href="/2025/09/10/xl-1-dockerizing-2005-lamp-app.html"/>
            <updated>2025-09-10T00:00:00+01:00</updated>
            <id>/2025/09/10/xl-1-dockerizing-2005-lamp-app.html</id>
            <content type="html"><![CDATA[<blockquote>
  <p>🤘 From the abyssal depths of forgotten servers,
  Docker the Void-Walker awakens to drag ancient LAMP stack from their tombs,
  wrapping them in the obsidian chains of containerization! 🔥</p>
</blockquote>

<p>Back in 2005, I learned how to write Linux/Apache/MySQL/PHP websites thanks
to the Site du Zero (SdZ), which is now known as <a href="https://openclassrooms.com/en/">Open Classrooms</a>.</p>

<p>I also used to play a web-browser game, similar to <a href="https://fr.wikipedia.org/wiki/OGame">OGame</a>,
called BisouLand (SkySwoon). Turns out its creator also built it through SdZ tutorials!</p>

<p>Fast forward 20 years later (today),
I received a message on LinkedIn from a CTO asking me the following:</p>

<blockquote>
  <p>💬 "Are you willing to work with <strong>eXtreme Legacy</strong> code on occasion?"</p>
</blockquote>

<p>I wondered to myself: what is eXtreme Legacy code? And I immediately remembered BisouLand.</p>

<p>You see, back in 2011,
its creator had made it Open Source on github and made me code collaborator...</p>

<p>So I <em>do</em> have access to a 2005 LAMP stack website,
cobbled together by someone learning stuff on the go from the internet.</p>

<p>What would it take, in 2025, to get an eXtreme Legacy app up and running?</p>

<p>This is what we're going to find out in this series.</p>

<p>Today's first article is about getting it to run, at least locally.</p>

<ul>
<li><a href="#the-project">The Project</a></li>
<li><a href="#containerization">Containerisation</a></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="the-project">The Project</h2>

<p>The <a href="https://github.com/pyricau/bisouland/tree/v1">version 1</a> has the following tree directory:</p>

<pre><code>web/
├── .htaccess
├── checkConnect.php
├── deconnexion.php
├── favicon.ico
├── images/
├── includes/
│   ├── bisouStyle2.css
│   ├── compteur.js
│   ├── newbisouStyle2.css
│   └── prev.js
├── index.php
├── phpincludes/
│   ├── accueil.php
│   ├── action.php
│   ├── aide.php
│   ├── attaque.php
│   ├── bd.php
│   ├── bisous.php
│   ├── confirmation.php
│   ├── connected.php
│   ├── connexion.php
│   ├── erreur404.php
│   ├── evo.php
│   ├── fctIndex.php
│   ├── nuage.php
│   ├── ...
│   ├── pages.php
│   └── yeux.php
└── redirect.php
</code></pre>

<p>The <code>.htaccess</code> file contains URL rewrite rules for Apache:</p>

<pre><code>RewriteEngine on
RewriteRule (.+)\.confirmation\.html$ /index.php?page=confirmation&amp;id=$1
RewriteRule (.+)\.bisous\.html$ /index.php?page=bisous&amp;cancel=$1
RewriteRule (.+)\.(.+)\.nuage\.html$ /index.php?page=nuage&amp;saut=1&amp;sautnuage=$1&amp;sautposition=$2
RewriteRule (.+)\.nuage\.html$ /index.php?page=nuage&amp;nuage=$1
RewriteRule (.+)\.(.+)\.action\.html$ /index.php?page=action&amp;nuage=$1&amp;position=$2
RewriteRule (.+)\.(.+)\.yeux\.html$ /index.php?page=yeux&amp;Dnuage=$1&amp;Dpos=$2
RewriteRule (.+)\.html$ /index.php?page=$1
ErrorDocument 404 /erreur404.html
</code></pre>

<p>There are no Database schema, but a quick scan at the files will reveal the use
of MySQL, for example <code>web/phpincludes/bd.php</code>:</p>

<pre><code class="php">&lt;?php

function bd_connect() {
        mysql_pconnect("HOST", "USER", "PASSWORD");
        mysql_select_db("DATABASE");
}
</code></pre>

<p>As for the code architecture, the file <code>web/index.php</code> acts as a
front controller that displays the layout of the website, and then includes
a file from <code>web/phpincludes/</code> for the actual page content.</p>

<p>The HTML is mixed with the MySQL queries, session managemenet, game logic
and any other PHP code. Code and comments are written in French, and there are
several encoding issues.</p>

<p>Here's an extract from <code>web/index.php</code>:</p>

<pre><code class="php">&lt;?php

header('Content-type: text/html; charset=ISO-8859-1'); 

session_start();
ob_start();
include 'phpincludes/bd.php';
bd_connect();
include('phpincludes/fctIndex.php');

//Si la variable $_SESSION['logged'] n'existe pas, on la créée, et on l'initialise a false
if (!isset($_SESSION['logged'])) $_SESSION['logged'] = false;

//Si on est pas connecté.
if ($_SESSION['logged'] == false)
{
  $id=0;
  //On récupère les cookies enregistrés chez l'utilisateurs, s'ils sont la.
  if (isset($_COOKIE['pseudo']) &amp;&amp; isset($_COOKIE['mdp']))
  {
    $pseudo = htmlentities(addslashes($_COOKIE['pseudo']));
    $mdp = htmlentities(addslashes($_COOKIE['mdp']));
    //La requête qui compte le nombre de pseudos
    $sql = mysql_query("SELECT COUNT(*) AS nb_pseudo FROM membres WHERE pseudo='".$pseudo."'");
    if (mysql_result($sql,0,'nb_pseudo') != 0)
    {
      //Sélection des informations.
      $sql_info = mysql_query("SELECT id, confirmation, mdp, nuage FROM membres WHERE pseudo='".$pseudo."'");
      $donnees_info = mysql_fetch_assoc($sql_info);
      //Si le mot de passe est le même (le mot de passe est déjà crypté).
      if ($donnees_info['mdp'] == $mdp)
      {
        //Si le compte est confirmé.
        if ($donnees_info['confirmation'] == 1)
        {
          //On modifie la variable qui nous indique que le membre est connecté.
          $_SESSION['logged'] = true;
          $page='cerveau';
        }
      }
    }
  }
}

if ($_SESSION['logged'] == true)
{
  //l'id du membre.
  $id=$_SESSION['id'];

  //Fonction destinée à l'administration
  if (isset($_POST['UnAct']) &amp;&amp; $id==12)
  {
    actionAdmin();
  }

  $sql_info = mysql_query(
    "SELECT timestamp, coeur, bouche, amour, jambes, smack, baiser, pelle, tech1, tech2, tech3, tech4, dent, langue, bloque, soupe, oeil"
    ." FROM membres WHERE id='".$id."'"
  );
  $donnees_info = mysql_fetch_assoc($sql_info);
  //On récupère le nombre de points d'amour.
  $amour = $donnees_info['amour'];
?&gt;

&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" /&gt; 
  &lt;link rel="stylesheet" media="screen" type="text/css" title="bisouStyle2" href="includes/bisouStyle2.css" /&gt; 
  &lt;link rel="shorcut icon" href="http://bisouland.piwai.info/favicon.ico"/&gt;
  &lt;meta http-equiv="Content-Language" content="fr" /&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="speedbarre"&gt;
  &lt;?php if ($_SESSION['logged'] == true)
    {?&gt;
      &lt;?php echo formaterNombre(floor($amour)); ?&gt;
    &lt;?php
    }
    else
    {
    ?&gt;
    &lt;a href="connexion.html"&gt;Connexion&lt;/a&gt;
    &lt;?php } ?&gt;
  &lt;/div&gt;

  &lt;div id="corps"&gt;
    &lt;?php
    include('phpincludes/pages.php');
    if (isset($array_pages[$page]))
    {
      include('phpincludes/'.$array_pages[$page]);
    }
    else
    {
      include('phpincludes/erreur404.php');
    }
    ?&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>😵</p>

<p>In addition to the spaghetti code, we can immediately spot security issues.
But we cannot fix anything until we can manually test the website,
so how do we get it to run?</p>

<h2 id="containerisation">Containerisation</h2>

<p>Back in 2005, the most common versions of the LAMP stack were:</p>

<ul>
<li>Apache: 2</li>
<li>MySQL: MySQL 4.0 - 5.0</li>
<li>PHP 4.3 - 5.1</li>
</ul>

<p>Applications written for MySQL 4.0 and PHP 4.3 can be run up to MySQL 5.7
and PHP 5.6. Some deprecation notices would be issued, but in terms of backward
compatibility that's how far we can stretch things.</p>

<p>So let's create a <code>Dockerfile</code> that will have Apache 2, PHP 5.6 and MySQL 5.7:</p>

<pre><code># syntax=docker/dockerfile:1

FROM php:5.6-apache

# Update sources.list to use archive repositories for Debian Stretch
RUN sed -i 's/deb.debian.org/archive.debian.org/g' /etc/apt/sources.list \
    &amp;&amp; sed -i 's/security.debian.org/archive.debian.org/g' /etc/apt/sources.list \
    &amp;&amp; sed -i '/stretch-updates/d' /etc/apt/sources.list

# Install system dependencies and PHP extensions in single layer
RUN docker-php-ext-install mysql \
    &amp;&amp; a2enmod rewrite

# Set working directory
WORKDIR /var/www/html

# Copy application files with proper ownership
COPY --chown=www-data:www-data web/ /var/www/html/
</code></pre>

<p>With the following <code>compose.yaml</code>, we'll set up the Apache and MySQL servers:</p>

<pre><code class="yaml">name: skyswoon-monolith

services:
  web:
    build: .
    ports:
      - "8080:80"
    volumes:
      - ./web:/var/www/html
    depends_on:
      - db
    environment:
      DATABASE_HOST: ${DATABASE_HOST}
      DATABASE_USER: ${DATABASE_USER}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_NAME: ${DATABASE_NAME}
    restart: unless-stopped

  db:
    image: mysql:5.7
    platform: linux/amd64
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "127.0.0.1:3306:3306"
    restart: unless-stopped

volumes:
  mysql_data:
</code></pre>

<p>You might notice that I've mentioned some environment variables,
to configure the database. These will need to be set in a <code>.env</code> file:</p>

<pre><code># Database
DATABASE_HOST=db
DATABASE_USER=database_user
DATABASE_PASSWORD=database_password
DATABASE_NAME=database_name
# MySQL root password (for Docker)
MYSQL_ROOT_PASSWORD=mysql_root_password
</code></pre>

<p>When the <code>docker compose up</code> is run,
Docker Composer automatically reads from <code>.env</code> and sets the environment variable,
then PHP will copy these into the <code>$_ENV</code> array super global,
so we can get the values like so in <code>web/phpincludes/bd.php</code>:</p>

<pre><code class="php">&lt;?php

function bd_connect()
{
    mysql_pconnect(
        $_ENV['DATABASE_HOST'],
        $_ENV['DATABASE_USER'],
        $_ENV['DATABASE_PASSWORD'],
    );
    mysql_select_db($_ENV['DATABASE_NAME']);
}
</code></pre>

<p>Last but not least, I'm adding a <code>Makefile</code>, to avoid having to type long
<code>docker compose build; docker compose up</code> commands: <a href="https://github.com/pyricau/bisouland/blob/b31597c47a49e0dd2b87fbd55bd608530f81efec/Makefile">see file in github</a>.</p>

<blockquote>
  <p><strong>Super Secret Tip</strong>:
  I've written about <a href="/2025/08/06/my-symfony-dockerfile.html">My Symfony Dockerfile</a>,
  and <a href="/2025/08/06/my-symfony-makefile.html">My Symfony Makefile</a>.</p>
</blockquote>

<h2 id="conclusion">Conclusion</h2>

<blockquote>
  <p>💻 <strong>Source code</strong>:</p>
  
  <ul>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.0">Before our changes</a></li>
  <li><a href="https://github.com/pyricau/bisouland/tree/4.0.5">After containerisation</a></li>
  </ul>
</blockquote>

<p><img alt="BisouLand screenshot" src="/images/xl-1-bisouland-screenshot.png" width="100%" /></p>

<p>And we did it! now by typing:</p>

<pre><code class="console">make build; make up
</code></pre>

<p>We get BisouLand running live, 20 years after its conception.</p>

<p>You can visit it there: http://localhost:8080/accueil.html.</p>

<blockquote>
  <p>⁉️ <em>What do you mean, "it doesn't work"?? It works on my machine!</em></p>
</blockquote>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[My Symfony Dockerfile]]></title>
            <link href="/2025/08/06/my-symfony-dockerfile.html"/>
            <updated>2025-08-06T00:00:00+01:00</updated>
            <id>/2025/08/06/my-symfony-dockerfile.html</id>
            <content type="html"><![CDATA[<p>Dockerize your PHP / Symfony application, to eliminate "works on MY machine".</p>

<p>I'm describing here a solution that ensures consistent development environment,
to run the project locally with just a few commands, without having to worry about:</p>

<ul>
<li>PHP version / extensions</li>
<li><p>database / search engine / messaging queue / services setup</p></li>
<li><p><a href="#dockerfile">Dockerfile</a></p></li>
<li><a href="#dockerignore">Dockerignore</a></li>
<li><a href="#compose">Compose</a></li>
<li><a href="#going-further">Going further</a>

<ul>
<li><a href="#sqlite">SQLite</a></li>
</ul></li>
</ul>

<h2 id="dockerfile">Dockerfile</h2>

<p>The following <code>Dockerfile</code> will build an image with:</p>

<ul>
<li><strong>Alpine Linux</strong>

<ul>
<li>Lightweight distribution (5-10MB compared to 100MB for Ubuntu)</li>
<li>uses <em>musl libc</em> instead of glibc, expect incompatibility issues with some binaries</li>
</ul></li>
<li><strong>PHP 8.3</strong>

<ul>
<li>this is needed for any PHP applications</li>
<li>change the version to your liking</li>
</ul></li>
<li><strong>bash</strong>

<ul>
<li>not required, but I like to use bash as my shell when I connect to the container</li>
</ul></li>
<li><strong>Composer</strong>

<ul>
<li>in production, you don't need the Composer binary in the container</li>
<li>in development, it's useful to have the same running environment for your app and Composer</li>
</ul></li>
<li><strong>PostgreSQL</strong>

<ul>
<li>my favourite database</li>
<li>skip it or switch it to MySQL, SQLite, etc</li>
</ul></li>
<li><strong>Symfony CLI</strong>

<ul>
<li>in production, you don't need the Symfony CLI binary in the container</li>
<li>in development, useful to start a web server</li>
</ul></li>
</ul>

<pre><code># syntax=docker/dockerfile:1

###
# PHP Dev Container
# Utility Tools: PHP, bash, Composer, PostgreSQL, Symfony CLI
###
FROM php:8.3-cli-alpine AS php_dev_container

# Composer environment variables:
# * default user is superuser (root), so allow them
# * put cache directory in a readable/writable location
# _Note_: When running `composer` in container, use `--no-cache` option
ENV COMPOSER_ALLOW_SUPERUSER=1 \
    COMPOSER_CACHE_DIR=/tmp/.composer/cache

# Install dependencies:
# * bash for shell access and scripting
# * postgresql for the database
# * zip for composer packages that use ZIP archives
# _Note (Alpine)_: `--no-cache` includes `--update` and keeps image size minimal
#
# Then install PHP extensions
#
# _Note (Hadolint)_: No version locking, since Alpine only ever provides one version
# hadolint ignore=DL3018
RUN apk add --update --no-cache \
        bash \
        libzip-dev \
        postgresql-dev \
        zip \
    &amp;&amp; docker-php-ext-install \
        bcmath \
        zip \
        pdo_pgsql

# Copy Symfony CLI binary from image
# _Note_: Avoid using Symfony CLI installer, use Docker image instead
# See: https://github.com/symfony-cli/symfony-cli/issues/195#issuecomment-1273269735
# _Note (Hadolint)_: False positive as `COPY` works with images too
# See: https://github.com/hadolint/hadolint/issues/197#issuecomment-1016595425
# hadolint ignore=DL3022
COPY --from=ghcr.io/symfony-cli/symfony-cli:v5 /usr/local/bin/symfony /usr/local/bin/symfony

# Copy Composer binary from composer image
# _Note (Hadolint)_: False positive as `COPY` works with images too
# See: https://github.com/hadolint/hadolint/issues/197#issuecomment-1016595425
# hadolint ignore=DL3022
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /app

# Caching `composer install`, as long as composer.{json,lock} don't change.
COPY composer.json composer.lock ./
RUN composer install \
    --no-cache \
    --no-interaction \
    --no-plugins \
    --no-scripts \
    --optimize-autoloader

# Copy the remaining application files (excluding those listed in .dockerignore)
COPY . .
</code></pre>

<p>You can check the validity of your Dockerfile syntax here: <a href="https://hadolint.github.io/hadolint/">hadolint</a></p>

<p>Here's how to build the image, and then run the container:</p>

<blockquote>
  <p><strong>Note</strong>: <code>-v "$(PWD)":/app</code> mounts current directory for live code changes.</p>
</blockquote>

<pre><code class="console">docker build -t app .

# Run with interactive shell
docker run --rm -it -v "$(PWD)":/app app bash

# Run composer
docker run --rm -it -v "$(PWD)":/app app symfony composer install -o

# Run symfony's console
docker run --rm -it -v "$(PWD)":/app -e APP_ENV=prod app symfony console

# Run PHPUnit, phpstan, PHP CS Fixer
docker run --rm -it -v "$(PWD)":/app app symfony php vendor/bin/phpunit
docker run --rm -it -v "$(PWD)":/app app symfony php vendor/bin/phpstan analyze
docker run --rm -it -v "$(PWD)":/app app symfony php vendor/bin/php-cs-fixer check --verbose
docker run --rm -it -v "$(PWD)":/app app symfony php vendor/bin/php-cs-fixer fix --verbose

# Start Symfony CLI's web server
docker run --rm -it -v "$(PWD)":/app -p 8000:8000 app symfony server:start --port=8000 --host=0.0.0.0
</code></pre>

<h2 id="dockerignore">Dockerignore</h2>

<p>When using <code>COPY . .</code> in <code>Dockerfile</code>, it's useful to limit what's going to be copied, with a <code>.dockerignore</code>:</p>

<pre><code>## composer
vendor

## git
.git/

## friendsofphp/php-cs-fixer
.php-cs-fixer.php
.php-cs-fixer.cache

## phpstan/phpstan
phpstan.neon

## phpunit/phpunit
phpunit.xml
.phpunit.cache

## symfony/framework-bundle
.env.local
.env.local.php
.env.*.local
var/cache/
var/log/
</code></pre>

<h2 id="compose">Compose</h2>

<p>When the PHP application relies on other services,
such as a database (eg PostgreSQL), search engine (eg Elasticsearch), or message queue (eg RabbitMQ),
having a <code>compose.yaml</code> file will make the development experience much smoother
by handling services, networking, and volumes automatically:</p>

<pre><code class="yaml">services:
  app:
    build: .
    # Mount current directory into container for live code changes
    volumes:
      - .:/app
    # Database should be started first
    depends_on:
      - db
    ports:
      - "8000:8000"
    command: symfony serve --no-tls --port=8000 --listen-ip=0.0.0.0

  db:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
        POSTGRES_DB: ${POSTGRES_DB:-app}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeMe}
        POSTGRES_USER: ${POSTGRES_USER:-app}
    # Persist database data between container restarts
    volumes:
      - db-data:/var/lib/postgresql/data:rw
    # Port mapping to avoid conflict with locally running PostgreSQL
    ports:
      - "5433:5432"

# Define the db-data volume used above
volumes:
  db-data:
</code></pre>

<p>Now usage commands will be a bit different:</p>

<pre><code class="console"># Build docker images
docker compose build --pull
# Start services (no logs)
docker compose up --detach
# Show live logs
docker compose logs --tail=0 --follow
# Stop services
docker compose down --remove-orphans

# Run with interactive shell
docker compose exec app bash

# Run composer
docker compose exec app symfony composer

# Run symfony's console
docker compose exec -e APP_ENV=prod app symfony console

# Run PHPUnit, phpstan, PHP CS Fixer
docker compose exec -e APP_ENV=prod app symfony php vendor/bin/phpunit
docker compose exec -e APP_ENV=prod app symfony php vendor/bin/phpstan analyze
docker compose exec -e APP_ENV=prod app symfony php vendor/bin/php-cs-fixer check --verbose
docker compose exec -e APP_ENV=prod app symfony php vendor/bin/php-cs-fixer fix --verbose
</code></pre>

<h2 id="going-further">Going further</h2>

<h3 id="sqlite">SQLite</h3>

<p>To setup SQLite, you'll need to modify <code>Dockerfile</code>:</p>

<pre><code>RUN apk add --update --no-cache \
    ...
    sqlite \
    &amp;&amp; docker-php-ext-install \
    ...
    pdo_sqlite
</code></pre>

<p>As well as <code>compose.yaml</code>:</p>

<pre><code class="yaml">services:
    app:
        ...
        volumes:
            ...
            # Mount SQLite database directory to persist data
            - sqlite-data:/app/var/data

volumes:
    ...
    sqlite-data:
</code></pre>

<p>This is assuming your SQLite database file is located in the projects' <code>var/data</code> folder.</p>

<p>Make sure to set up the following environment varaible in <code>.env</code>:</p>

<pre><code>DATABASE_URL="sqlite:///%kernel.project_dir%/var/data/database.sqlite"
</code></pre>

<h3 id="rabbitmq">RabbitMQ</h3>

<p>For RabbitMQ, modify <code>Dockerfile</code>:</p>

<pre><code>RUN apk add --update --no-cache \
    ...
    rabbitmq-c-dev \
    &amp;&amp; docker-php-ext-install \
    ...
    sockets \
    &amp;&amp; pecl install amqp \
    &amp;&amp; docker-php-ext-enable amqp
</code></pre>

<p>Also <code>compose.yaml</code>:</p>

<pre><code class="yaml">services:
    app:
        ...
        depends_on:
            ...
            - rabbitmq

    rabbitmq:
        image: rabbitmq:${RABBITMQ_VERSION:-3.13}-management-alpine
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-app}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-ChangeMe}
        # Persist RabbitMQ data between container restarts
        volumes:
            - rabbitmq-data:/var/lib/rabbitmq:rw
        ports:
            # Port mapping to avoid conflict with locally running RabbitMQ
            - "5673:5672"
            # Management UI port
            - "15673:15672"

volumes:
    ...
    rabbitmq-data:
</code></pre>

<p>Again, make sure to set up the following environment varaible in <code>.env</code>:</p>

<pre><code>RABBITMQ_URL="amqp://app:ChangeMe@rabbitmq:5672/"
</code></pre>

<p>The RabbitMQ management interface will be available at http://localhost:15673,
with the credentials defined in the environment variables.</p>

<h2 id="maintenance">Maintenance</h2>

<p>Here's a list of helpful commands to maintain the images and containers:</p>

<ul>
<li><code>docker images</code>: lists images

<ul>
<li><code>docker images --filter dangling=true</code>: lists untagged / unused images</li>
</ul></li>
<li><code>docker container ls</code>: lists running containers

<ul>
<li><code>docker container ls -a</code>: lists running and stopped containers</li>
</ul></li>
<li><code>docker system prune</code>: removes dangling containers, networks and images

<ul>
<li><code>docker system prune --volumes</code>: removes dangling containers, networks, volumes and images</li>
</ul></li>
<li><code>docker history &lt;image&gt;</code>: Inspects layers of an image</li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>With this, we can finally write bugs once, and run them everywhere!</p>
]]></content>
        </entry>
    </feed>